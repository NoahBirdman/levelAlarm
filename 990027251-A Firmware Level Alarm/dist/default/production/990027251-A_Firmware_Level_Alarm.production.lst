

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Jun 16 01:13:07 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F876
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     	;# 
    29  0001                     	;# 
    30  0002                     	;# 
    31  0003                     	;# 
    32  0004                     	;# 
    33  0005                     	;# 
    34  0006                     	;# 
    35  0007                     	;# 
    36  000A                     	;# 
    37  000B                     	;# 
    38  000C                     	;# 
    39  000D                     	;# 
    40  000E                     	;# 
    41  000E                     	;# 
    42  000F                     	;# 
    43  0010                     	;# 
    44  0011                     	;# 
    45  0012                     	;# 
    46  0013                     	;# 
    47  0014                     	;# 
    48  0015                     	;# 
    49  0015                     	;# 
    50  0016                     	;# 
    51  0017                     	;# 
    52  0018                     	;# 
    53  0019                     	;# 
    54  001A                     	;# 
    55  001B                     	;# 
    56  001B                     	;# 
    57  001C                     	;# 
    58  001D                     	;# 
    59  001E                     	;# 
    60  001F                     	;# 
    61  0081                     	;# 
    62  0085                     	;# 
    63  0086                     	;# 
    64  0087                     	;# 
    65  008C                     	;# 
    66  008D                     	;# 
    67  008E                     	;# 
    68  0091                     	;# 
    69  0092                     	;# 
    70  0093                     	;# 
    71  0094                     	;# 
    72  0098                     	;# 
    73  0099                     	;# 
    74  009E                     	;# 
    75  009F                     	;# 
    76  010C                     	;# 
    77  010D                     	;# 
    78  010E                     	;# 
    79  010F                     	;# 
    80  018C                     	;# 
    81  018D                     	;# 
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0014                     	;# 
   102  0015                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  001D                     	;# 
   113  001E                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  0087                     	;# 
   119  008C                     	;# 
   120  008D                     	;# 
   121  008E                     	;# 
   122  0091                     	;# 
   123  0092                     	;# 
   124  0093                     	;# 
   125  0094                     	;# 
   126  0098                     	;# 
   127  0099                     	;# 
   128  009E                     	;# 
   129  009F                     	;# 
   130  010C                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  010F                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136                           
   137                           	psect	idataBANK0
   138  039A                     __pidataBANK0:	
   139                           
   140                           ;initializer for _adcResult
   141  039A  3464               	retlw	100
   142  039B  3400               	retlw	0
   143                           
   144                           ;initializer for _alarmTimer
   145  039C  3464               	retlw	100
   146  039D  3400               	retlw	0
   147                           
   148                           	psect	strings
   149  034B                     __pstrings:	
   150  034B                     stringtab:	
   151  034B                     __stringtab:	
   152  034B                     stringcode:	
   153                           ;	String table - string pointers are 1 byte each
   154                           
   155  034B                     stringdir:	
   156  034B  3003               	movlw	high stringdir
   157  034C  008A               	movwf	10
   158  034D  0804               	movf	4,w
   159  034E  0A84               	incf	4,f
   160  034F  0782               	addwf	2,f
   161  0350                     __stringbase:	
   162  0350  3400               	retlw	0
   163  0351                     __end_of__stringtab:	
   164  0351                     _FILTERTMR_ISEMPTY:	
   165  0351  3432               	retlw	50
   166  0352  3400               	retlw	0
   167  0353                     __end_of_FILTERTMR_ISEMPTY:	
   168  0353                     _FILTERTMR_ISFULL:	
   169  0353  3432               	retlw	50
   170  0354  3400               	retlw	0
   171  0355                     __end_of_FILTERTMR_ISFULL:	
   172  001F                     _ADCON0bits	set	31
   173  001E                     _ADRESH	set	30
   174  000B                     _INTCONbits	set	11
   175  0006                     _PORTB	set	6
   176  0007                     _PORTC	set	7
   177  0010                     _T1CONbits	set	16
   178  0012                     _T2CONbits	set	18
   179  0066                     _ADIF	set	102
   180  005D                     _TMR0IE	set	93
   181  005A                     _TMR0IF	set	90
   182  0060                     _TMR1IF	set	96
   183  0061                     _TMR2IF	set	97
   184  009F                     _ADCON1bits	set	159
   185  009E                     _ADRESL	set	158
   186  0081                     _OPTION_REGbits	set	129
   187  008C                     _PIE1bits	set	140
   188  0085                     _TRISA	set	133
   189  0086                     _TRISB	set	134
   190  0087                     _TRISC	set	135
   191  0466                     _ADIE	set	1126
   192  0460                     _TMR1IE	set	1120
   193  0461                     _TMR2IE	set	1121
   194                           
   195                           ; #config settings
   196  0000                     
   197                           	psect	cinit
   198  0015                     start_initialization:	
   199  0015                     __initialization:	
   200                           
   201                           ; Clear objects allocated to COMMON
   202  0015  01FD               	clrf	__pbssCOMMON& (0+127)
   203                           
   204                           ; Clear objects allocated to BANK0
   205  0016  1383               	bcf	3,7	;select IRP bank0
   206  0017  3033               	movlw	low __pbssBANK0
   207  0018  0084               	movwf	4
   208  0019  3044               	movlw	low (__pbssBANK0+17)
   209  001A  120A  118A  2384  120A  118A  	fcall	clear_ram0
   210                           
   211                           ; Initialize objects allocated to BANK0
   212  001F  120A  118A  239A  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   213  0024  00C4               	movwf	__pdataBANK0& (0+127)
   214  0025  120A  118A  239B  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   215  002A  00C5               	movwf	(__pdataBANK0+1)& (0+127)
   216  002B  120A  118A  239C  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   217  0030  00C6               	movwf	(__pdataBANK0+2)& (0+127)
   218  0031  120A  118A  239D   	fcall	__pidataBANK0+3	;fetch initializer
   219  0034  00C7               	movwf	(__pdataBANK0+3)& (0+127)
   220  0035                     end_of_initialization:	
   221                           ;End of C runtime variable initialization code
   222                           
   223  0035                     __end_of__initialization:	
   224  0035  0183               	clrf	3
   225  0036  120A  118A  2839   	ljmp	_main	;jump to C main() function
   226                           
   227                           	psect	bssCOMMON
   228  007D                     __pbssCOMMON:	
   229  007D                     _alarmState:	
   230  007D                     	ds	1
   231                           
   232                           	psect	bssBANK0
   233  0033                     __pbssBANK0:	
   234  0033                     _levelSensor:	
   235  0033                     	ds	8
   236  003B                     _almCounter:	
   237  003B                     	ds	2
   238  003D                     _blinkCounter:	
   239  003D                     	ds	2
   240  003F                     _counter1:	
   241  003F                     	ds	2
   242  0041                     _counter2:	
   243  0041                     	ds	2
   244  0043                     _blinkState:	
   245  0043                     	ds	1
   246                           
   247                           	psect	dataBANK0
   248  0044                     __pdataBANK0:	
   249  0044                     _adcResult:	
   250  0044                     	ds	2
   251  0046                     _alarmTimer:	
   252  0046                     	ds	2
   253                           
   254                           	psect	clrtext
   255  0384                     clear_ram0:	
   256                           ;	Called with FSR containing the base address, and
   257                           ;	W with the last address+1
   258                           
   259  0384  0064               	clrwdt	;clear the watchdog before getting into this loop
   260  0385                     clrloop0:	
   261  0385  0180               	clrf	0	;clear RAM location pointed to by FSR
   262  0386  0A84               	incf	4,f	;increment pointer
   263  0387  0604               	xorwf	4,w	;XOR with final address
   264  0388  1903               	btfsc	3,2	;have we reached the end yet?
   265  0389  3400               	retlw	0	;all done for this memory range, return
   266  038A  0604               	xorwf	4,w	;XOR again to restore value
   267  038B  2B85               	goto	clrloop0	;do the next byte
   268                           
   269                           	psect	cstackCOMMON
   270  0070                     __pcstackCOMMON:	
   271  0070                     ?_timer0_init:	
   272  0070                     ?_timer1_init:	
   273                           ; 0 bytes @ 0x0
   274                           
   275  0070                     ?_timer2_init:	
   276                           ; 0 bytes @ 0x0
   277                           
   278  0070                     ?_adc_init_CH0:	
   279                           ; 0 bytes @ 0x0
   280                           
   281  0070                     ?_timer0_start:	
   282                           ; 0 bytes @ 0x0
   283                           
   284  0070                     ?_timer2_start:	
   285                           ; 0 bytes @ 0x0
   286                           
   287  0070                     ?_adc_start:	
   288                           ; 0 bytes @ 0x0
   289                           
   290  0070                     ?_timer1_start:	
   291                           ; 0 bytes @ 0x0
   292                           
   293  0070                     ?_timer1_stop:	
   294                           ; 0 bytes @ 0x0
   295                           
   296  0070                     ?_ISR:	
   297                           ; 0 bytes @ 0x0
   298                           
   299  0070                     ?_main:	
   300                           ; 0 bytes @ 0x0
   301                           
   302  0070                     ?___awmod:	
   303                           ; 2 bytes @ 0x0
   304                           
   305  0070                     ___awmod@divisor:	
   306                           ; 2 bytes @ 0x0
   307                           
   308                           
   309                           ; 2 bytes @ 0x0
   310  0070                     	ds	2
   311  0072                     ___awmod@dividend:	
   312                           
   313                           ; 2 bytes @ 0x2
   314  0072                     	ds	2
   315  0074                     ??___awmod:	
   316                           
   317                           ; 0 bytes @ 0x4
   318  0074                     	ds	1
   319  0075                     ___awmod@counter:	
   320                           
   321                           ; 1 bytes @ 0x5
   322  0075                     	ds	1
   323  0076                     ___awmod@sign:	
   324                           
   325                           ; 1 bytes @ 0x6
   326  0076                     	ds	1
   327  0077                     ??_ISR:	
   328                           
   329                           ; 0 bytes @ 0x7
   330  0077                     	ds	6
   331                           
   332                           	psect	cstackBANK0
   333  0020                     __pcstackBANK0:	
   334  0020                     ??_timer0_init:	
   335  0020                     ??_timer1_init:	
   336                           ; 0 bytes @ 0x0
   337                           
   338  0020                     ??_timer2_init:	
   339                           ; 0 bytes @ 0x0
   340                           
   341  0020                     ??_adc_init_CH0:	
   342                           ; 0 bytes @ 0x0
   343                           
   344  0020                     ??_timer0_start:	
   345                           ; 0 bytes @ 0x0
   346                           
   347  0020                     ??_timer2_start:	
   348                           ; 0 bytes @ 0x0
   349                           
   350  0020                     ??_adc_start:	
   351                           ; 0 bytes @ 0x0
   352                           
   353  0020                     ??_timer1_start:	
   354                           ; 0 bytes @ 0x0
   355                           
   356  0020                     ??_timer1_stop:	
   357                           ; 0 bytes @ 0x0
   358                           
   359  0020                     ?_blinkLed:	
   360                           ; 0 bytes @ 0x0
   361                           
   362  0020                     blinkLed@stateTwo:	
   363                           ; 0 bytes @ 0x0
   364                           
   365                           
   366                           ; 1 bytes @ 0x0
   367  0020                     	ds	1
   368  0021                     blinkLed@almState:	
   369                           
   370                           ; 1 bytes @ 0x1
   371  0021                     	ds	1
   372  0022                     blinkLed@blinkState:	
   373                           
   374                           ; 1 bytes @ 0x2
   375  0022                     	ds	1
   376  0023                     ??_blinkLed:	
   377                           
   378                           ; 0 bytes @ 0x3
   379  0023                     	ds	1
   380  0024                     blinkLed@stateOne:	
   381                           
   382                           ; 1 bytes @ 0x4
   383  0024                     	ds	1
   384  0025                     ??_main:	
   385                           
   386                           ; 0 bytes @ 0x5
   387  0025                     	ds	3
   388  0028                     main@i:	
   389                           
   390                           ; 2 bytes @ 0x8
   391  0028                     	ds	2
   392  002A                     main@sensorRead:	
   393                           
   394                           ; 1 bytes @ 0xA
   395  002A                     	ds	1
   396  002B                     main@levelSensor:	
   397                           
   398                           ; 8 bytes @ 0xB
   399  002B                     	ds	8
   400                           
   401                           	psect	maintext
   402  0039                     __pmaintext:	
   403 ;;
   404 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   405 ;;
   406 ;; *************** function _main *****************
   407 ;; Defined at:
   408 ;;		line 122 in file "main.c"
   409 ;; Parameters:    Size  Location     Type
   410 ;;		None
   411 ;; Auto vars:     Size  Location     Type
   412 ;;  i               2    8[BANK0 ] int 
   413 ;;  levelSensor     8   11[BANK0 ] volatile struct .[2]
   414 ;;  sensorRead      1   10[BANK0 ] unsigned char 
   415 ;; Return value:  Size  Location     Type
   416 ;;                  2   95[None  ] int 
   417 ;; Registers used:
   418 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   419 ;; Tracked objects:
   420 ;;		On entry : B00/0
   421 ;;		On exit  : 0/0
   422 ;;		Unchanged: 0/0
   423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   424 ;;      Params:         0       0       0       0       0
   425 ;;      Locals:         0      11       0       0       0
   426 ;;      Temps:          0       3       0       0       0
   427 ;;      Totals:         0      14       0       0       0
   428 ;;Total ram usage:       14 bytes
   429 ;; Hardware stack levels required when called:    3
   430 ;; This function calls:
   431 ;;		_adc_init_CH0
   432 ;;		_adc_start
   433 ;;		_blinkLed
   434 ;;		_timer0_init
   435 ;;		_timer0_start
   436 ;;		_timer1_init
   437 ;;		_timer1_start
   438 ;;		_timer1_stop
   439 ;;		_timer2_init
   440 ;;		_timer2_start
   441 ;; This function is called by:
   442 ;;		Startup code after reset
   443 ;; This function uses a non-reentrant model
   444 ;;
   445                           
   446                           
   447                           ;psect for function _main
   448  0039                     _main:	
   449                           
   450                           ;main.c: 124: uint8_t sensorRead =0;
   451                           
   452                           ;incstack = 0
   453                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   454  0039  1283               	bcf	3,5	;RP0=0, select bank0
   455  003A  1303               	bcf	3,6	;RP1=0, select bank0
   456  003B  01AA               	clrf	main@sensorRead
   457                           
   458                           ;main.c: 126: levelSensor_t levelSensor[2];
   459                           ;main.c: 127: sensorRead = PORTB & ((1<<5) | (1<<4));
   460  003C  0806               	movf	6,w	;volatile
   461  003D  3930               	andlw	48
   462  003E  00A5               	movwf	??_main
   463  003F  0825               	movf	??_main,w
   464  0040  00AA               	movwf	main@sensorRead
   465                           
   466                           ;main.c: 128: levelSensor[0].sensorRead = (sensorRead & (1<<4));
   467  0041  082A               	movf	main@sensorRead,w
   468  0042  3910               	andlw	16
   469  0043  00A5               	movwf	??_main
   470  0044  0825               	movf	??_main,w
   471  0045  00AC               	movwf	main@levelSensor+1	;volatile
   472                           
   473                           ;main.c: 129: levelSensor[1].sensorRead = (sensorRead & (1<<5));
   474  0046  082A               	movf	main@sensorRead,w
   475  0047  3920               	andlw	32
   476  0048  00A5               	movwf	??_main
   477  0049  0825               	movf	??_main,w
   478  004A  00B0               	movwf	main@levelSensor+5	;volatile
   479                           
   480                           ;main.c: 131: TRISA |= (1<<0);
   481  004B  1683               	bsf	3,5	;RP0=1, select bank1
   482  004C  1303               	bcf	3,6	;RP1=0, select bank1
   483  004D  1405               	bsf	5,0	;volatile
   484                           
   485                           ;main.c: 132: TRISB |= (1<<4)|(1<<5);
   486  004E  3030               	movlw	48
   487  004F  1283               	bcf	3,5	;RP0=0, select bank0
   488  0050  1303               	bcf	3,6	;RP1=0, select bank0
   489  0051  00A5               	movwf	??_main
   490  0052  0825               	movf	??_main,w
   491  0053  1683               	bsf	3,5	;RP0=1, select bank1
   492  0054  1303               	bcf	3,6	;RP1=0, select bank1
   493  0055  0486               	iorwf	6,f	;volatile
   494                           
   495                           ;main.c: 133: TRISC &= ~((1<<2)|(1<<3));
   496  0056  30F3               	movlw	243
   497  0057  1283               	bcf	3,5	;RP0=0, select bank0
   498  0058  1303               	bcf	3,6	;RP1=0, select bank0
   499  0059  00A5               	movwf	??_main
   500  005A  0825               	movf	??_main,w
   501  005B  1683               	bsf	3,5	;RP0=1, select bank1
   502  005C  1303               	bcf	3,6	;RP1=0, select bank1
   503  005D  0587               	andwf	7,f	;volatile
   504                           
   505                           ;main.c: 134: TRISB &= ~((1<<3)|(1<<2));
   506  005E  30F3               	movlw	243
   507  005F  1283               	bcf	3,5	;RP0=0, select bank0
   508  0060  1303               	bcf	3,6	;RP1=0, select bank0
   509  0061  00A5               	movwf	??_main
   510  0062  0825               	movf	??_main,w
   511  0063  1683               	bsf	3,5	;RP0=1, select bank1
   512  0064  1303               	bcf	3,6	;RP1=0, select bank1
   513  0065  0586               	andwf	6,f	;volatile
   514                           
   515                           ;main.c: 137: timer0_init();
   516  0066  120A  118A  237B  120A  118A  	fcall	_timer0_init
   517                           
   518                           ;main.c: 138: timer1_init();
   519  006B  120A  118A  2394  120A  118A  	fcall	_timer1_init
   520                           
   521                           ;main.c: 139: timer2_init();
   522  0070  120A  118A  2372  120A  118A  	fcall	_timer2_init
   523                           
   524                           ;main.c: 140: adc_init_CH0();
   525  0075  120A  118A  233F  120A  118A  	fcall	_adc_init_CH0
   526                           
   527                           ;main.c: 142: PORTC |= (1<<2);
   528  007A  1283               	bcf	3,5	;RP0=0, select bank0
   529  007B  1303               	bcf	3,6	;RP1=0, select bank0
   530  007C  1507               	bsf	7,2	;volatile
   531                           
   532                           ;main.c: 143: PORTB &= ~((1<<2)|(1<<3));
   533  007D  30F3               	movlw	243
   534  007E  00A5               	movwf	??_main
   535  007F  0825               	movf	??_main,w
   536  0080  0586               	andwf	6,f	;volatile
   537                           
   538                           ;main.c: 145: timer0_start();
   539  0081  120A  118A  239E  120A  118A  	fcall	_timer0_start
   540                           
   541                           ;main.c: 146: timer2_start();
   542  0086  120A  118A  2369  120A  118A  	fcall	_timer2_start
   543                           
   544                           ;main.c: 150: {
   545                           ;main.c: 161: switch(levelSensor[0].levelState){
   546                           
   547                           ;main.c: 149: while(1)
   548  008B  2904               	goto	l1198
   549  008C                     l1152:	
   550                           ;main.c: 162: case INITIAL_STATE :
   551                           
   552                           
   553                           ;main.c: 163: if(levelSensor[0].sensorRead > 0){
   554  008C  1283               	bcf	3,5	;RP0=0, select bank0
   555  008D  1303               	bcf	3,6	;RP1=0, select bank0
   556  008E  082C               	movf	main@levelSensor+1,w	;volatile
   557  008F  1903               	btfsc	3,2
   558  0090  28C7               	goto	l1176
   559                           
   560                           ;main.c: 164: levelSensor[0].levelState = TRANSITION_TO_EMPTY;
   561  0091  3001               	movlw	1
   562  0092  28F3               	goto	L4
   563  0093                     l1158:	
   564                           ;main.c: 170: case TRANSITION_TO_EMPTY :
   565                           
   566                           ;main.c: 167: }
   567                           ;main.c: 168: break;
   568                           
   569                           ;main.c: 166: counter1 = 0;
   570                           
   571                           ;main.c: 165: }else {
   572                           
   573                           
   574                           ;main.c: 172: if(levelSensor[0].sensorRead == 0){
   575  0093  082C               	movf	main@levelSensor+1,w	;volatile
   576  0094  1D03               	btfss	3,2
   577  0095  289A               	goto	l1162
   578                           
   579                           ;main.c: 174: counter1 = 0;
   580  0096  01BF               	clrf	_counter1	;volatile
   581  0097  01C0               	clrf	_counter1+1	;volatile
   582                           
   583                           ;main.c: 175: levelSensor[0].levelState = INITIAL_STATE;
   584  0098  01AB               	clrf	main@levelSensor	;volatile
   585                           
   586                           ;main.c: 177: }else if(levelSensor[0].sensorRead > 0 && counter1 >= FILTERTMR_ISFULL){
   587  0099  299D               	goto	l1246
   588  009A                     l1162:	
   589  009A  082C               	movf	main@levelSensor+1,w	;volatile
   590  009B  1903               	btfsc	3,2
   591  009C  299D               	goto	l1246
   592  009D  3003               	movlw	low (_FILTERTMR_ISFULL-__stringbase)
   593  009E  0084               	movwf	4
   594  009F  120A  118A  234B  120A  118A  	fcall	stringdir
   595  00A4  00A5               	movwf	??_main
   596  00A5  120A  118A  234B  120A  118A  	fcall	stringdir
   597  00AA  00A6               	movwf	??_main+1
   598  00AB  0840               	movf	_counter1+1,w	;volatile
   599  00AC  3A80               	xorlw	128
   600  00AD  00A7               	movwf	??_main+2
   601  00AE  0826               	movf	??_main+1,w
   602  00AF  3A80               	xorlw	128
   603  00B0  0227               	subwf	??_main+2,w
   604  00B1  1D03               	skipz
   605  00B2  28B5               	goto	u955
   606  00B3  0825               	movf	??_main,w
   607  00B4  023F               	subwf	_counter1,w	;volatile
   608  00B5                     u955:	
   609  00B5  1C03               	skipc
   610  00B6  299D               	goto	l1246
   611                           
   612                           ;main.c: 178: counter1 = 0;
   613  00B7  1283               	bcf	3,5	;RP0=0, select bank0
   614  00B8  1303               	bcf	3,6	;RP1=0, select bank0
   615  00B9  28CD               	goto	L7
   616  00BA                     l1170:	
   617                           ;main.c: 184: case EMPTY:
   618                           
   619                           ;main.c: 181: }
   620                           ;main.c: 182: break;
   621                           
   622                           ;main.c: 179: levelSensor[0].levelState = EMPTY;
   623                           
   624                           
   625                           ;main.c: 187: if(levelSensor[0].sensorRead == 0 && counter1 == 0){
   626  00BA  082C               	movf	main@levelSensor+1,w	;volatile
   627  00BB  1D03               	btfss	3,2
   628  00BC  28C7               	goto	l1176
   629  00BD  083F               	movf	_counter1,w	;volatile
   630  00BE  0440               	iorwf	_counter1+1,w	;volatile
   631  00BF  1D03               	btfss	3,2
   632  00C0  28C7               	goto	l1176
   633                           
   634                           ;main.c: 188: counter1 = 1;
   635  00C1  3001               	movlw	1
   636  00C2  00BF               	movwf	_counter1	;volatile
   637  00C3  3000               	movlw	0
   638  00C4  00C0               	movwf	_counter1+1	;volatile
   639                           
   640                           ;main.c: 189: levelSensor[0].levelState = TRANSITION_TO_FULL;
   641  00C5  3003               	movlw	3
   642  00C6  28F3               	goto	L4
   643  00C7                     l1176:	
   644                           ;main.c: 191: }else{
   645                           
   646                           
   647                           ;main.c: 192: counter1 = 0;
   648  00C7  01BF               	clrf	_counter1	;volatile
   649  00C8  01C0               	clrf	_counter1+1	;volatile
   650                           
   651                           ;main.c: 194: }
   652                           ;main.c: 195: break;
   653  00C9  299D               	goto	l1246
   654  00CA                     l1178:	
   655                           ;main.c: 197: case TRANSITION_TO_FULL:
   656                           
   657                           
   658                           ;main.c: 199: if(levelSensor[0].sensorRead > 0){
   659  00CA  082C               	movf	main@levelSensor+1,w	;volatile
   660  00CB  1903               	btfsc	3,2
   661  00CC  28D1               	goto	l1184
   662  00CD                     L7:	
   663                           
   664                           ;main.c: 200: counter1 = 0;
   665  00CD  01BF               	clrf	_counter1	;volatile
   666  00CE  01C0               	clrf	_counter1+1	;volatile
   667                           
   668                           ;main.c: 201: levelSensor[0].levelState = EMPTY;
   669  00CF  3002               	movlw	2
   670  00D0  28F3               	goto	L4
   671  00D1                     l1184:	
   672                           ;main.c: 204: }else if(levelSensor[0].sensorRead == 0 && counter1 > FILTERTMR_ISEMPTY){
   673                           
   674  00D1  082C               	movf	main@levelSensor+1,w	;volatile
   675  00D2  1D03               	btfss	3,2
   676  00D3  299D               	goto	l1246
   677  00D4  3001               	movlw	low (_FILTERTMR_ISEMPTY-__stringbase)
   678  00D5  0084               	movwf	4
   679  00D6  120A  118A  234B  120A  118A  	fcall	stringdir
   680  00DB  00A5               	movwf	??_main
   681  00DC  120A  118A  234B  120A  118A  	fcall	stringdir
   682  00E1  00A6               	movwf	??_main+1
   683  00E2  0826               	movf	??_main+1,w
   684  00E3  3A80               	xorlw	128
   685  00E4  00A7               	movwf	??_main+2
   686  00E5  0840               	movf	_counter1+1,w	;volatile
   687  00E6  3A80               	xorlw	128
   688  00E7  0227               	subwf	??_main+2,w
   689  00E8  1D03               	skipz
   690  00E9  28EC               	goto	u1005
   691  00EA  083F               	movf	_counter1,w	;volatile
   692  00EB  0225               	subwf	??_main,w
   693  00EC                     u1005:	
   694  00EC  1803               	skipnc
   695  00ED  299D               	goto	l1246
   696                           
   697                           ;main.c: 206: counter1 = 0;
   698  00EE  1283               	bcf	3,5	;RP0=0, select bank0
   699  00EF  1303               	bcf	3,6	;RP1=0, select bank0
   700  00F0  01BF               	clrf	_counter1	;volatile
   701  00F1  01C0               	clrf	_counter1+1	;volatile
   702                           
   703                           ;main.c: 207: levelSensor[0].levelState = FULL;
   704  00F2  3004               	movlw	4
   705  00F3                     L4:	
   706  00F3  00A5               	movwf	??_main
   707  00F4  0825               	movf	??_main,w
   708  00F5  00AB               	movwf	main@levelSensor	;volatile
   709                           
   710                           ;main.c: 209: }
   711                           ;main.c: 210: break;
   712  00F6  299D               	goto	l1246
   713  00F7                     l1192:	
   714                           ;main.c: 213: case FULL :
   715                           
   716                           
   717                           ;main.c: 215: levelSensor[0].levelState = ALARM_ON;
   718  00F7  3005               	movlw	5
   719  00F8  00A5               	movwf	??_main
   720  00F9  0825               	movf	??_main,w
   721  00FA  00AB               	movwf	main@levelSensor	;volatile
   722                           
   723                           ;main.c: 216: blinkState = 4;
   724  00FB  3004               	movlw	4
   725  00FC  00A5               	movwf	??_main
   726  00FD  0825               	movf	??_main,w
   727  00FE  00C3               	movwf	_blinkState	;volatile
   728                           
   729                           ;main.c: 217: alarmState ++;
   730  00FF  3001               	movlw	1
   731  0100  00A5               	movwf	??_main
   732  0101  0825               	movf	??_main,w
   733  0102  07FD               	addwf	_alarmState,f	;volatile
   734                           
   735                           ;main.c: 220: }
   736                           
   737                           ;main.c: 219: break;
   738  0103  299D               	goto	l1246
   739  0104                     l1198:	
   740  0104  1283               	bcf	3,5	;RP0=0, select bank0
   741  0105  1303               	bcf	3,6	;RP1=0, select bank0
   742  0106  082B               	movf	main@levelSensor,w	;volatile
   743                           
   744                           ; Switch size 1, requested type "space"
   745                           ; Number of cases is 5, Range of values is 0 to 4
   746                           ; switch strategies available:
   747                           ; Name         Instructions Cycles
   748                           ; simple_byte           16     9 (average)
   749                           ; direct_byte           23     8 (fixed)
   750                           ; jumptable            260     6 (fixed)
   751                           ;	Chosen strategy is simple_byte
   752  0107  3A00               	xorlw	0	; case 0
   753  0108  1903               	skipnz
   754  0109  288C               	goto	l1152
   755  010A  3A01               	xorlw	1	; case 1
   756  010B  1903               	skipnz
   757  010C  2893               	goto	l1158
   758  010D  3A03               	xorlw	3	; case 2
   759  010E  1903               	skipnz
   760  010F  28BA               	goto	l1170
   761  0110  3A01               	xorlw	1	; case 3
   762  0111  1903               	skipnz
   763  0112  28CA               	goto	l1178
   764  0113  3A07               	xorlw	7	; case 4
   765  0114  1903               	skipnz
   766  0115  28F7               	goto	l1192
   767  0116  299D               	goto	l1246
   768                           
   769                           ;main.c: 279: switch (levelSensor[1].levelState)
   770  0117  299D               	goto	l1246
   771  0118                     l1200:	
   772                           ;main.c: 280: {
   773                           ;main.c: 282: case INITIAL_STATE :
   774                           
   775                           
   776                           ;main.c: 283: if(levelSensor[1].levelState > 0)
   777  0118  082F               	movf	main@levelSensor+4,w	;volatile
   778  0119  1903               	btfsc	3,2
   779  011A  2920               	goto	l1204
   780                           
   781                           ;main.c: 284: {
   782                           ;main.c: 285: levelSensor[1].levelState = TRANSITION_TO_EMPTY;
   783  011B  3001               	movlw	1
   784  011C  00A5               	movwf	??_main
   785  011D  0825               	movf	??_main,w
   786  011E  00AF               	movwf	main@levelSensor+4	;volatile
   787                           
   788                           ;main.c: 286: }else
   789  011F  2922               	goto	l1206
   790  0120                     l1204:	
   791                           
   792                           ;main.c: 287: {
   793                           ;main.c: 288: counter2 = 0;
   794  0120  01C1               	clrf	_counter2	;volatile
   795  0121  01C2               	clrf	_counter2+1	;volatile
   796  0122                     l1206:	
   797                           ;main.c: 289: }
   798                           ;main.c: 292: case TRANSITION_TO_EMPTY :
   799                           
   800                           
   801                           ;main.c: 294: if(levelSensor[1].levelState == 0)
   802  0122  082F               	movf	main@levelSensor+4,w	;volatile
   803  0123  1D03               	btfss	3,2
   804  0124  2929               	goto	l1210
   805                           
   806                           ;main.c: 295: {
   807                           ;main.c: 297: counter2 = 0;
   808  0125  01C1               	clrf	_counter2	;volatile
   809  0126  01C2               	clrf	_counter2+1	;volatile
   810                           
   811                           ;main.c: 298: levelSensor[1].levelState = INITIAL_STATE;
   812  0127  01AF               	clrf	main@levelSensor+4	;volatile
   813                           
   814                           ;main.c: 300: }else if(levelSensor[1].levelState > 0 && counter2 >= FILTERTMR_ISFULL)
   815  0128  294E               	goto	l1218
   816  0129                     l1210:	
   817  0129  082F               	movf	main@levelSensor+4,w	;volatile
   818  012A  1903               	btfsc	3,2
   819  012B  294E               	goto	l1218
   820  012C  3003               	movlw	low (_FILTERTMR_ISFULL-__stringbase)
   821  012D  0084               	movwf	4
   822  012E  120A  118A  234B  120A  118A  	fcall	stringdir
   823  0133  00A5               	movwf	??_main
   824  0134  120A  118A  234B  120A  118A  	fcall	stringdir
   825  0139  00A6               	movwf	??_main+1
   826  013A  0842               	movf	_counter2+1,w	;volatile
   827  013B  3A80               	xorlw	128
   828  013C  00A7               	movwf	??_main+2
   829  013D  0826               	movf	??_main+1,w
   830  013E  3A80               	xorlw	128
   831  013F  0227               	subwf	??_main+2,w
   832  0140  1D03               	skipz
   833  0141  2944               	goto	u1045
   834  0142  0825               	movf	??_main,w
   835  0143  0241               	subwf	_counter2,w	;volatile
   836  0144                     u1045:	
   837  0144  1C03               	skipc
   838  0145  294E               	goto	l1218
   839                           
   840                           ;main.c: 301: {
   841                           ;main.c: 302: counter2 = 0;
   842  0146  1283               	bcf	3,5	;RP0=0, select bank0
   843  0147  1303               	bcf	3,6	;RP1=0, select bank0
   844  0148  01C1               	clrf	_counter2	;volatile
   845  0149  01C2               	clrf	_counter2+1	;volatile
   846                           
   847                           ;main.c: 303: levelSensor[1].levelState = EMPTY;
   848  014A  3002               	movlw	2
   849  014B  00A5               	movwf	??_main
   850  014C  0825               	movf	??_main,w
   851  014D  00AF               	movwf	main@levelSensor+4	;volatile
   852  014E                     l1218:	
   853                           ;main.c: 305: }
   854                           ;main.c: 307: case EMPTY :
   855                           
   856                           
   857                           ;main.c: 309: if(levelSensor[1].levelState == 0 && counter2 == 0)
   858  014E  1283               	bcf	3,5	;RP0=0, select bank0
   859  014F  1303               	bcf	3,6	;RP1=0, select bank0
   860  0150  082F               	movf	main@levelSensor+4,w	;volatile
   861  0151  1D03               	btfss	3,2
   862  0152  2960               	goto	l1224
   863  0153  0841               	movf	_counter2,w	;volatile
   864  0154  0442               	iorwf	_counter2+1,w	;volatile
   865  0155  1D03               	btfss	3,2
   866  0156  2960               	goto	l1224
   867                           
   868                           ;main.c: 310: {
   869                           ;main.c: 311: counter2 = 1;
   870  0157  3001               	movlw	1
   871  0158  00C1               	movwf	_counter2	;volatile
   872  0159  3000               	movlw	0
   873  015A  00C2               	movwf	_counter2+1	;volatile
   874                           
   875                           ;main.c: 312: levelSensor[1].levelState = TRANSITION_TO_FULL;
   876  015B  3003               	movlw	3
   877  015C  00A5               	movwf	??_main
   878  015D  0825               	movf	??_main,w
   879  015E  00AF               	movwf	main@levelSensor+4	;volatile
   880                           
   881                           ;main.c: 313: }else
   882  015F  2962               	goto	l1226
   883  0160                     l1224:	
   884                           
   885                           ;main.c: 314: {
   886                           ;main.c: 315: counter2 = 0;
   887  0160  01C1               	clrf	_counter2	;volatile
   888  0161  01C2               	clrf	_counter2+1	;volatile
   889  0162                     l1226:	
   890                           ;main.c: 317: }
   891                           ;main.c: 319: case TRANSITION_TO_FULL :
   892                           
   893                           
   894                           ;main.c: 321: if(levelSensor[1].levelState > 0)
   895  0162  082F               	movf	main@levelSensor+4,w	;volatile
   896  0163  1903               	btfsc	3,2
   897  0164  2969               	goto	l1232
   898                           
   899                           ;main.c: 322: {
   900                           ;main.c: 323: counter2 = 0;
   901  0165  01C1               	clrf	_counter2	;volatile
   902  0166  01C2               	clrf	_counter2+1	;volatile
   903                           
   904                           ;main.c: 324: levelSensor[1].levelState = EMPTY;
   905  0167  3002               	movlw	2
   906  0168  298B               	goto	L5
   907  0169                     l1232:	
   908                           ;main.c: 325: }else if(levelSensor[1].levelState == 0 && counter2 > FILTERTMR_ISEMPTY)
   909                           
   910  0169  082F               	movf	main@levelSensor+4,w	;volatile
   911  016A  1D03               	btfss	3,2
   912  016B  298E               	goto	l1240
   913  016C  3001               	movlw	low (_FILTERTMR_ISEMPTY-__stringbase)
   914  016D  0084               	movwf	4
   915  016E  120A  118A  234B  120A  118A  	fcall	stringdir
   916  0173  00A5               	movwf	??_main
   917  0174  120A  118A  234B  120A  118A  	fcall	stringdir
   918  0179  00A6               	movwf	??_main+1
   919  017A  0826               	movf	??_main+1,w
   920  017B  3A80               	xorlw	128
   921  017C  00A7               	movwf	??_main+2
   922  017D  0842               	movf	_counter2+1,w	;volatile
   923  017E  3A80               	xorlw	128
   924  017F  0227               	subwf	??_main+2,w
   925  0180  1D03               	skipz
   926  0181  2984               	goto	u1095
   927  0182  0841               	movf	_counter2,w	;volatile
   928  0183  0225               	subwf	??_main,w
   929  0184                     u1095:	
   930  0184  1803               	skipnc
   931  0185  298E               	goto	l1240
   932                           
   933                           ;main.c: 326: {
   934                           ;main.c: 328: counter2 = 0;
   935  0186  1283               	bcf	3,5	;RP0=0, select bank0
   936  0187  1303               	bcf	3,6	;RP1=0, select bank0
   937  0188  01C1               	clrf	_counter2	;volatile
   938  0189  01C2               	clrf	_counter2+1	;volatile
   939                           
   940                           ;main.c: 329: levelSensor[1].levelState = FULL;
   941  018A  3004               	movlw	4
   942  018B                     L5:	
   943  018B  00A5               	movwf	??_main
   944  018C  0825               	movf	??_main,w
   945  018D  00AF               	movwf	main@levelSensor+4	;volatile
   946  018E                     l1240:	
   947                           ;main.c: 330: }
   948                           ;main.c: 332: case FULL :
   949                           
   950                           
   951                           ;main.c: 334: levelSensor[1].levelState = ALARM_ON;
   952  018E  3005               	movlw	5
   953  018F  1283               	bcf	3,5	;RP0=0, select bank0
   954  0190  1303               	bcf	3,6	;RP1=0, select bank0
   955  0191  00A5               	movwf	??_main
   956  0192  0825               	movf	??_main,w
   957  0193  00AF               	movwf	main@levelSensor+4	;volatile
   958                           
   959                           ;main.c: 335: blinkState = 4;
   960  0194  3004               	movlw	4
   961  0195  00A5               	movwf	??_main
   962  0196  0825               	movf	??_main,w
   963  0197  00C3               	movwf	_blinkState	;volatile
   964                           
   965                           ;main.c: 336: alarmState ++;
   966  0198  3001               	movlw	1
   967  0199  00A5               	movwf	??_main
   968  019A  0825               	movf	??_main,w
   969  019B  07FD               	addwf	_alarmState,f	;volatile
   970                           
   971                           ;main.c: 339: }
   972  019C  29B0               	goto	l1248
   973  019D                     l1246:	
   974  019D  1283               	bcf	3,5	;RP0=0, select bank0
   975  019E  1303               	bcf	3,6	;RP1=0, select bank0
   976  019F  082F               	movf	main@levelSensor+4,w	;volatile
   977                           
   978                           ; Switch size 1, requested type "space"
   979                           ; Number of cases is 5, Range of values is 0 to 4
   980                           ; switch strategies available:
   981                           ; Name         Instructions Cycles
   982                           ; simple_byte           16     9 (average)
   983                           ; direct_byte           23     8 (fixed)
   984                           ; jumptable            260     6 (fixed)
   985                           ;	Chosen strategy is simple_byte
   986  01A0  3A00               	xorlw	0	; case 0
   987  01A1  1903               	skipnz
   988  01A2  2918               	goto	l1200
   989  01A3  3A01               	xorlw	1	; case 1
   990  01A4  1903               	skipnz
   991  01A5  2922               	goto	l1206
   992  01A6  3A03               	xorlw	3	; case 2
   993  01A7  1903               	skipnz
   994  01A8  294E               	goto	l1218
   995  01A9  3A01               	xorlw	1	; case 3
   996  01AA  1903               	skipnz
   997  01AB  2962               	goto	l1226
   998  01AC  3A07               	xorlw	7	; case 4
   999  01AD  1903               	skipnz
  1000  01AE  298E               	goto	l1240
  1001  01AF  29B0               	goto	l1248
  1002  01B0                     l1248:	
  1003                           
  1004                           ;main.c: 341: if(alarmState >= 1)
  1005  01B0  087D               	movf	_alarmState,w	;volatile
  1006  01B1  1903               	btfsc	3,2
  1007  01B2  29EA               	goto	l1268
  1008                           
  1009                           ;main.c: 342: {
  1010                           ;main.c: 344: if(almCounter == 0)
  1011  01B3  083B               	movf	_almCounter,w	;volatile
  1012  01B4  043C               	iorwf	_almCounter+1,w	;volatile
  1013  01B5  1D03               	btfss	3,2
  1014  01B6  29C9               	goto	l1258
  1015                           
  1016                           ;main.c: 345: {
  1017                           ;main.c: 346: PORTB |= (1<<3);
  1018  01B7  1586               	bsf	6,3	;volatile
  1019                           
  1020                           ;main.c: 347: adc_start();
  1021  01B8  120A  118A  235F  120A  118A  	fcall	_adc_start
  1022                           
  1023                           ;main.c: 348: timer1_start();
  1024  01BD  120A  118A  2355  120A  118A  	fcall	_timer1_start
  1025                           
  1026                           ;main.c: 349: almCounter = 1;
  1027  01C2  3001               	movlw	1
  1028  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  1029  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  1030  01C5  00BB               	movwf	_almCounter	;volatile
  1031  01C6  3000               	movlw	0
  1032  01C7  00BC               	movwf	_almCounter+1	;volatile
  1033                           
  1034                           ;main.c: 351: }else if(almCounter > alarmTimer)
  1035  01C8  29EA               	goto	l1268
  1036  01C9                     l1258:	
  1037  01C9  0847               	movf	_alarmTimer+1,w	;volatile
  1038  01CA  3A80               	xorlw	128
  1039  01CB  00A5               	movwf	??_main
  1040  01CC  083C               	movf	_almCounter+1,w	;volatile
  1041  01CD  3A80               	xorlw	128
  1042  01CE  0225               	subwf	??_main,w
  1043  01CF  1D03               	skipz
  1044  01D0  29D3               	goto	u1125
  1045  01D1  083B               	movf	_almCounter,w	;volatile
  1046  01D2  0246               	subwf	_alarmTimer,w	;volatile
  1047  01D3                     u1125:	
  1048  01D3  1803               	skipnc
  1049  01D4  29EA               	goto	l1268
  1050                           
  1051                           ;main.c: 352: {
  1052                           ;main.c: 353: PORTB |= (1<<2) |(1<<3);
  1053  01D5  300C               	movlw	12
  1054  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  1055  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  1056  01D8  00A5               	movwf	??_main
  1057  01D9  0825               	movf	??_main,w
  1058  01DA  0486               	iorwf	6,f	;volatile
  1059                           
  1060                           ;main.c: 354: timer1_stop();
  1061  01DB  120A  118A  238C  120A  118A  	fcall	_timer1_stop
  1062                           
  1063                           ;main.c: 355: almCounter = 1;
  1064  01E0  3001               	movlw	1
  1065  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  1066  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  1067  01E3  00BB               	movwf	_almCounter	;volatile
  1068  01E4  3000               	movlw	0
  1069  01E5  00BC               	movwf	_almCounter+1	;volatile
  1070                           
  1071                           ;main.c: 356: alarmState = 3;
  1072  01E6  3003               	movlw	3
  1073  01E7  00A5               	movwf	??_main
  1074  01E8  0825               	movf	??_main,w
  1075  01E9  00FD               	movwf	_alarmState	;volatile
  1076  01EA                     l1268:	
  1077                           
  1078                           ;main.c: 357: }
  1079                           ;main.c: 358: }
  1080                           ;main.c: 361: blinkLed(levelSensor[0].levelState, levelSensor[1].levelState, alarmState,
      +                           &blinkState);
  1081  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  1082  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  1083  01EC  082F               	movf	main@levelSensor+4,w	;volatile
  1084  01ED  00A5               	movwf	??_main
  1085  01EE  0825               	movf	??_main,w
  1086  01EF  00A0               	movwf	blinkLed@stateTwo
  1087  01F0  087D               	movf	_alarmState,w	;volatile
  1088  01F1  00A6               	movwf	??_main+1
  1089  01F2  0826               	movf	??_main+1,w
  1090  01F3  00A1               	movwf	blinkLed@almState
  1091  01F4  3043               	movlw	(low (_blinkState| 0))& (0+255)
  1092  01F5  00A7               	movwf	??_main+2
  1093  01F6  0827               	movf	??_main+2,w
  1094  01F7  00A2               	movwf	blinkLed@blinkState
  1095  01F8  082B               	movf	main@levelSensor,w	;volatile
  1096  01F9  120A  118A  230A  120A  118A  	fcall	_blinkLed
  1097  01FE  2904               	goto	l1198
  1098  01FF                     l1270:	
  1099                           ;main.c: 363: }
  1100                           ;main.c: 368: while(1)
  1101                           
  1102                           
  1103                           ;main.c: 369: {
  1104                           ;main.c: 370: PORTC^=(1<<2);
  1105  01FF  3004               	movlw	4
  1106  0200  1283               	bcf	3,5	;RP0=0, select bank0
  1107  0201  1303               	bcf	3,6	;RP1=0, select bank0
  1108  0202  00A5               	movwf	??_main
  1109  0203  0825               	movf	??_main,w
  1110  0204  0687               	xorwf	7,f	;volatile
  1111                           
  1112                           ;main.c: 371: for(int i=0;i<10000;i++);
  1113  0205  01A8               	clrf	main@i
  1114  0206  01A9               	clrf	main@i+1
  1115  0207                     L6:	
  1116  0207  0829               	movf	main@i+1,w
  1117  0208  3A80               	xorlw	128
  1118  0209  00FF               	movwf	127
  1119  020A  30A7               	movlw	167
  1120  020B  027F               	subwf	127,w
  1121  020C  1D03               	skipz
  1122  020D  2A10               	goto	u1135
  1123  020E  3010               	movlw	16
  1124  020F  0228               	subwf	main@i,w
  1125  0210                     u1135:	
  1126  0210  1803               	btfsc	3,0
  1127  0211  29FF               	goto	l1270
  1128  0212  3001               	movlw	1
  1129  0213  1283               	bcf	3,5	;RP0=0, select bank0
  1130  0214  1303               	bcf	3,6	;RP1=0, select bank0
  1131  0215  07A8               	addwf	main@i,f
  1132  0216  1803               	skipnc
  1133  0217  0AA9               	incf	main@i+1,f
  1134  0218  3000               	movlw	0
  1135  0219  07A9               	addwf	main@i+1,f
  1136  021A  2A07               	goto	L6
  1137  021B                     __end_of_main:	
  1138                           ;main.c: 373: }
  1139                           ;main.c: 374: return (0);
  1140                           ;	Return value of _main is never used
  1141                           
  1142                           
  1143                           	psect	text1
  1144  0369                     __ptext1:	
  1145 ;; *************** function _timer2_start *****************
  1146 ;; Defined at:
  1147 ;;		line 43 in file "util.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;		None
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;		None
  1152 ;; Return value:  Size  Location     Type
  1153 ;;		None               void
  1154 ;; Registers used:
  1155 ;;		None
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1161 ;;      Params:         0       0       0       0       0
  1162 ;;      Locals:         0       0       0       0       0
  1163 ;;      Temps:          0       0       0       0       0
  1164 ;;      Totals:         0       0       0       0       0
  1165 ;;Total ram usage:        0 bytes
  1166 ;; Hardware stack levels used:    1
  1167 ;; Hardware stack levels required when called:    2
  1168 ;; This function calls:
  1169 ;;		Nothing
  1170 ;; This function is called by:
  1171 ;;		_main
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           
  1176                           ;psect for function _timer2_start
  1177  0369                     _timer2_start:	
  1178                           
  1179                           ;util.c: 44: PIE1bits.TMR2IE = 1;
  1180                           
  1181                           ;incstack = 0
  1182                           ; Regs used in _timer2_start: []
  1183  0369  1683               	bsf	3,5	;RP0=1, select bank1
  1184  036A  1303               	bcf	3,6	;RP1=0, select bank1
  1185  036B  148C               	bsf	12,1	;volatile
  1186                           
  1187                           ;util.c: 45: T2CONbits.TMR2ON = 1;
  1188  036C  1283               	bcf	3,5	;RP0=0, select bank0
  1189  036D  1303               	bcf	3,6	;RP1=0, select bank0
  1190  036E  1512               	bsf	18,2	;volatile
  1191                           
  1192                           ;util.c: 46: INTCONbits.GIE = 1;
  1193  036F  178B               	bsf	11,7	;volatile
  1194                           
  1195                           ;util.c: 47: INTCONbits.PEIE = 1;
  1196  0370  170B               	bsf	11,6	;volatile
  1197  0371  0008               	return
  1198  0372                     __end_of_timer2_start:	
  1199                           
  1200                           	psect	text2
  1201  0372                     __ptext2:	
  1202 ;; *************** function _timer2_init *****************
  1203 ;; Defined at:
  1204 ;;		line 38 in file "util.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;		None
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;		None
  1209 ;; Return value:  Size  Location     Type
  1210 ;;		None               void
  1211 ;; Registers used:
  1212 ;;		wreg, status,2, status,0
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1218 ;;      Params:         0       0       0       0       0
  1219 ;;      Locals:         0       0       0       0       0
  1220 ;;      Temps:          0       0       0       0       0
  1221 ;;      Totals:         0       0       0       0       0
  1222 ;;Total ram usage:        0 bytes
  1223 ;; Hardware stack levels used:    1
  1224 ;; Hardware stack levels required when called:    2
  1225 ;; This function calls:
  1226 ;;		Nothing
  1227 ;; This function is called by:
  1228 ;;		_main
  1229 ;; This function uses a non-reentrant model
  1230 ;;
  1231                           
  1232                           
  1233                           ;psect for function _timer2_init
  1234  0372                     _timer2_init:	
  1235                           
  1236                           ;util.c: 39: T2CONbits.T2CKPS = 0x02;
  1237                           
  1238                           ;incstack = 0
  1239                           ; Regs used in _timer2_init: [wreg+status,2+status,0]
  1240  0372  1283               	bcf	3,5	;RP0=0, select bank0
  1241  0373  1303               	bcf	3,6	;RP1=0, select bank0
  1242  0374  0812               	movf	18,w	;volatile
  1243  0375  39FC               	andlw	-4
  1244  0376  3802               	iorlw	2
  1245  0377  0092               	movwf	18	;volatile
  1246                           
  1247                           ;util.c: 40: T2CONbits.TOUTPS = 0x0F;
  1248  0378  3078               	movlw	120
  1249  0379  0492               	iorwf	18,f	;volatile
  1250  037A  0008               	return
  1251  037B                     __end_of_timer2_init:	
  1252                           
  1253                           	psect	text3
  1254  038C                     __ptext3:	
  1255 ;; *************** function _timer1_stop *****************
  1256 ;; Defined at:
  1257 ;;		line 30 in file "util.c"
  1258 ;; Parameters:    Size  Location     Type
  1259 ;;		None
  1260 ;; Auto vars:     Size  Location     Type
  1261 ;;		None
  1262 ;; Return value:  Size  Location     Type
  1263 ;;		None               void
  1264 ;; Registers used:
  1265 ;;		None
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1271 ;;      Params:         0       0       0       0       0
  1272 ;;      Locals:         0       0       0       0       0
  1273 ;;      Temps:          0       0       0       0       0
  1274 ;;      Totals:         0       0       0       0       0
  1275 ;;Total ram usage:        0 bytes
  1276 ;; Hardware stack levels used:    1
  1277 ;; Hardware stack levels required when called:    2
  1278 ;; This function calls:
  1279 ;;		Nothing
  1280 ;; This function is called by:
  1281 ;;		_main
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           
  1286                           ;psect for function _timer1_stop
  1287  038C                     _timer1_stop:	
  1288                           
  1289                           ;util.c: 31: T1CONbits.TMR1ON = 0;
  1290                           
  1291                           ;incstack = 0
  1292                           ; Regs used in _timer1_stop: []
  1293  038C  1283               	bcf	3,5	;RP0=0, select bank0
  1294  038D  1303               	bcf	3,6	;RP1=0, select bank0
  1295  038E  1010               	bcf	16,0	;volatile
  1296                           
  1297                           ;util.c: 32: T1CONbits.T1OSCEN =0;
  1298  038F  1190               	bcf	16,3	;volatile
  1299                           
  1300                           ;util.c: 33: PIE1bits.TMR1IE = 0;
  1301  0390  1683               	bsf	3,5	;RP0=1, select bank1
  1302  0391  1303               	bcf	3,6	;RP1=0, select bank1
  1303  0392  100C               	bcf	12,0	;volatile
  1304  0393  0008               	return
  1305  0394                     __end_of_timer1_stop:	
  1306                           
  1307                           	psect	text4
  1308  0355                     __ptext4:	
  1309 ;; *************** function _timer1_start *****************
  1310 ;; Defined at:
  1311 ;;		line 20 in file "util.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;		None
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;		None
  1316 ;; Return value:  Size  Location     Type
  1317 ;;		None               void
  1318 ;; Registers used:
  1319 ;;		None
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1325 ;;      Params:         0       0       0       0       0
  1326 ;;      Locals:         0       0       0       0       0
  1327 ;;      Temps:          0       0       0       0       0
  1328 ;;      Totals:         0       0       0       0       0
  1329 ;;Total ram usage:        0 bytes
  1330 ;; Hardware stack levels used:    1
  1331 ;; Hardware stack levels required when called:    2
  1332 ;; This function calls:
  1333 ;;		Nothing
  1334 ;; This function is called by:
  1335 ;;		_main
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           
  1340                           ;psect for function _timer1_start
  1341  0355                     _timer1_start:	
  1342                           
  1343                           ;util.c: 21: T1CONbits.T1OSCEN = 1;
  1344                           
  1345                           ;incstack = 0
  1346                           ; Regs used in _timer1_start: []
  1347  0355  1283               	bcf	3,5	;RP0=0, select bank0
  1348  0356  1303               	bcf	3,6	;RP1=0, select bank0
  1349  0357  1590               	bsf	16,3	;volatile
  1350                           
  1351                           ;util.c: 22: T1CONbits.TMR1ON = 1;
  1352  0358  1410               	bsf	16,0	;volatile
  1353                           
  1354                           ;util.c: 23: PIE1bits.TMR1IE = 1;
  1355  0359  1683               	bsf	3,5	;RP0=1, select bank1
  1356  035A  1303               	bcf	3,6	;RP1=0, select bank1
  1357  035B  140C               	bsf	12,0	;volatile
  1358                           
  1359                           ;util.c: 24: INTCONbits.GIE = 1;
  1360  035C  178B               	bsf	11,7	;volatile
  1361                           
  1362                           ;util.c: 25: INTCONbits.PEIE = 1;
  1363  035D  170B               	bsf	11,6	;volatile
  1364  035E  0008               	return
  1365  035F                     __end_of_timer1_start:	
  1366                           
  1367                           	psect	text5
  1368  0394                     __ptext5:	
  1369 ;; *************** function _timer1_init *****************
  1370 ;; Defined at:
  1371 ;;		line 9 in file "util.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;		None
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;		None
  1376 ;; Return value:  Size  Location     Type
  1377 ;;		None               void
  1378 ;; Registers used:
  1379 ;;		wreg, status,2, status,0
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1385 ;;      Params:         0       0       0       0       0
  1386 ;;      Locals:         0       0       0       0       0
  1387 ;;      Temps:          0       0       0       0       0
  1388 ;;      Totals:         0       0       0       0       0
  1389 ;;Total ram usage:        0 bytes
  1390 ;; Hardware stack levels used:    1
  1391 ;; Hardware stack levels required when called:    2
  1392 ;; This function calls:
  1393 ;;		Nothing
  1394 ;; This function is called by:
  1395 ;;		_main
  1396 ;; This function uses a non-reentrant model
  1397 ;;
  1398                           
  1399                           
  1400                           ;psect for function _timer1_init
  1401  0394                     _timer1_init:	
  1402                           
  1403                           ;util.c: 15: T1CONbits.T1CKPS = 0x03;
  1404                           
  1405                           ;incstack = 0
  1406                           ; Regs used in _timer1_init: [wreg+status,2+status,0]
  1407  0394  3030               	movlw	48
  1408  0395  1283               	bcf	3,5	;RP0=0, select bank0
  1409  0396  1303               	bcf	3,6	;RP1=0, select bank0
  1410  0397  0490               	iorwf	16,f	;volatile
  1411                           
  1412                           ;util.c: 16: T1CONbits.TMR1CS = 0;
  1413  0398  1090               	bcf	16,1	;volatile
  1414  0399  0008               	return
  1415  039A                     __end_of_timer1_init:	
  1416                           
  1417                           	psect	text6
  1418  039E                     __ptext6:	
  1419 ;; *************** function _timer0_start *****************
  1420 ;; Defined at:
  1421 ;;		line 63 in file "util.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;		None
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;		None
  1426 ;; Return value:  Size  Location     Type
  1427 ;;		None               void
  1428 ;; Registers used:
  1429 ;;		None
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1435 ;;      Params:         0       0       0       0       0
  1436 ;;      Locals:         0       0       0       0       0
  1437 ;;      Temps:          0       0       0       0       0
  1438 ;;      Totals:         0       0       0       0       0
  1439 ;;Total ram usage:        0 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; Hardware stack levels required when called:    2
  1442 ;; This function calls:
  1443 ;;		Nothing
  1444 ;; This function is called by:
  1445 ;;		_main
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           
  1450                           ;psect for function _timer0_start
  1451  039E                     _timer0_start:	
  1452                           
  1453                           ;util.c: 64: INTCONbits.TMR0IE = 1;
  1454                           
  1455                           ;incstack = 0
  1456                           ; Regs used in _timer0_start: []
  1457  039E  168B               	bsf	11,5	;volatile
  1458                           
  1459                           ;util.c: 65: INTCONbits.GIE = 1;
  1460  039F  178B               	bsf	11,7	;volatile
  1461                           
  1462                           ;util.c: 66: INTCONbits.PEIE = 1;
  1463  03A0  170B               	bsf	11,6	;volatile
  1464  03A1  0008               	return
  1465  03A2                     __end_of_timer0_start:	
  1466                           
  1467                           	psect	text7
  1468  037B                     __ptext7:	
  1469 ;; *************** function _timer0_init *****************
  1470 ;; Defined at:
  1471 ;;		line 56 in file "util.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;		None
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;		None
  1476 ;; Return value:  Size  Location     Type
  1477 ;;		None               void
  1478 ;; Registers used:
  1479 ;;		wreg, status,2, status,0
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1485 ;;      Params:         0       0       0       0       0
  1486 ;;      Locals:         0       0       0       0       0
  1487 ;;      Temps:          0       0       0       0       0
  1488 ;;      Totals:         0       0       0       0       0
  1489 ;;Total ram usage:        0 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; Hardware stack levels required when called:    2
  1492 ;; This function calls:
  1493 ;;		Nothing
  1494 ;; This function is called by:
  1495 ;;		_main
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           
  1500                           ;psect for function _timer0_init
  1501  037B                     _timer0_init:	
  1502                           
  1503                           ;util.c: 57: OPTION_REGbits.T0CS = 0;
  1504                           
  1505                           ;incstack = 0
  1506                           ; Regs used in _timer0_init: [wreg+status,2+status,0]
  1507  037B  1683               	bsf	3,5	;RP0=1, select bank1
  1508  037C  1303               	bcf	3,6	;RP1=0, select bank1
  1509  037D  1281               	bcf	1,5	;volatile
  1510                           
  1511                           ;util.c: 58: OPTION_REGbits.PSA = 0;
  1512  037E  1181               	bcf	1,3	;volatile
  1513                           
  1514                           ;util.c: 59: OPTION_REGbits.PS = 0x04;
  1515  037F  0801               	movf	1,w	;volatile
  1516  0380  39F8               	andlw	-8
  1517  0381  3804               	iorlw	4
  1518  0382  0081               	movwf	1	;volatile
  1519  0383  0008               	return
  1520  0384                     __end_of_timer0_init:	
  1521                           
  1522                           	psect	text8
  1523  030A                     __ptext8:	
  1524 ;; *************** function _blinkLed *****************
  1525 ;; Defined at:
  1526 ;;		line 94 in file "util.c"
  1527 ;; Parameters:    Size  Location     Type
  1528 ;;  stateOne        1    wreg     unsigned char 
  1529 ;;  stateTwo        1    0[BANK0 ] unsigned char 
  1530 ;;  almState        1    1[BANK0 ] unsigned char 
  1531 ;;  blinkState      1    2[BANK0 ] PTR unsigned char 
  1532 ;;		 -> blinkState(1), 
  1533 ;; Auto vars:     Size  Location     Type
  1534 ;;  stateOne        1    4[BANK0 ] unsigned char 
  1535 ;; Return value:  Size  Location     Type
  1536 ;;		None               void
  1537 ;; Registers used:
  1538 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1539 ;; Tracked objects:
  1540 ;;		On entry : 0/0
  1541 ;;		On exit  : 0/0
  1542 ;;		Unchanged: 0/0
  1543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1544 ;;      Params:         0       3       0       0       0
  1545 ;;      Locals:         0       1       0       0       0
  1546 ;;      Temps:          0       1       0       0       0
  1547 ;;      Totals:         0       5       0       0       0
  1548 ;;Total ram usage:        5 bytes
  1549 ;; Hardware stack levels used:    1
  1550 ;; Hardware stack levels required when called:    2
  1551 ;; This function calls:
  1552 ;;		Nothing
  1553 ;; This function is called by:
  1554 ;;		_main
  1555 ;; This function uses a non-reentrant model
  1556 ;;
  1557                           
  1558                           
  1559                           ;psect for function _blinkLed
  1560  030A                     _blinkLed:	
  1561                           
  1562                           ;incstack = 0
  1563                           ; Regs used in _blinkLed: [wreg-fsr0h+status,2+status,0]
  1564                           ;blinkLed@stateOne stored from wreg
  1565  030A  1283               	bcf	3,5	;RP0=0, select bank0
  1566  030B  1303               	bcf	3,6	;RP1=0, select bank0
  1567  030C  00A4               	movwf	blinkLed@stateOne
  1568                           
  1569                           ;util.c: 95: if(stateOne == TRANSITION_TO_EMPTY || stateOne == TRANSITION_TO_FULL || sta
      +                          teTwo == TRANSITION_TO_EMPTY || stateTwo == TRANSITION_TO_FULL){
  1570  030D  0324               	decf	blinkLed@stateOne,w
  1571  030E  1903               	btfsc	3,2
  1572  030F  2B1B               	goto	l1006
  1573  0310  3003               	movlw	3
  1574  0311  0624               	xorwf	blinkLed@stateOne,w
  1575  0312  1903               	btfsc	3,2
  1576  0313  2B1B               	goto	l1006
  1577  0314  0320               	decf	blinkLed@stateTwo,w
  1578  0315  1903               	btfsc	3,2
  1579  0316  2B1B               	goto	l1006
  1580  0317  3003               	movlw	3
  1581  0318  0620               	xorwf	blinkLed@stateTwo,w
  1582  0319  1D03               	btfss	3,2
  1583  031A  2B20               	goto	l1008
  1584  031B                     l1006:	
  1585                           
  1586                           ;util.c: 96: *blinkState |= 0x01;
  1587  031B  0822               	movf	blinkLed@blinkState,w
  1588  031C  0084               	movwf	4
  1589  031D  1383               	bcf	3,7	;select IRP bank0
  1590  031E  1400               	bsf	0,0
  1591                           
  1592                           ;util.c: 97: }else if(almState >= 1 && almState < 3){
  1593  031F  0008               	return
  1594  0320                     l1008:	
  1595  0320  0821               	movf	blinkLed@almState,w
  1596  0321  1903               	btfsc	3,2
  1597  0322  2B2C               	goto	l1014
  1598  0323  3003               	movlw	3
  1599  0324  0221               	subwf	blinkLed@almState,w
  1600  0325  1803               	skipnc
  1601  0326  2B2C               	goto	l1014
  1602                           
  1603                           ;util.c: 98: *blinkState |= 0x04;
  1604  0327  0822               	movf	blinkLed@blinkState,w
  1605  0328  0084               	movwf	4
  1606  0329  1383               	bcf	3,7	;select IRP bank0
  1607  032A  1500               	bsf	0,2
  1608                           
  1609                           ;util.c: 99: }else if (almState >= 3){
  1610  032B  0008               	return
  1611  032C                     l1014:	
  1612  032C  3003               	movlw	3
  1613  032D  0221               	subwf	blinkLed@almState,w
  1614  032E  1C03               	skipc
  1615  032F  2B36               	goto	l1020
  1616                           
  1617                           ;util.c: 100: *blinkState |= 0x08;
  1618  0330  0822               	movf	blinkLed@blinkState,w
  1619  0331  0084               	movwf	4
  1620  0332  1383               	bcf	3,7	;select IRP bank0
  1621  0333  1580               	bsf	0,3
  1622                           
  1623                           ;util.c: 101: PORTC |= (1<<3);
  1624  0334  1587               	bsf	7,3	;volatile
  1625                           
  1626                           ;util.c: 102: }else{
  1627  0335  0008               	return
  1628  0336                     l1020:	
  1629                           
  1630                           ;util.c: 103: *blinkState = 0;
  1631  0336  0822               	movf	blinkLed@blinkState,w
  1632  0337  0084               	movwf	4
  1633  0338  1383               	bcf	3,7	;select IRP bank0
  1634  0339  0180               	clrf	0
  1635                           
  1636                           ;util.c: 104: PORTC &= ~(1<<3);
  1637  033A  30F7               	movlw	247
  1638  033B  00A3               	movwf	??_blinkLed
  1639  033C  0823               	movf	??_blinkLed,w
  1640  033D  0587               	andwf	7,f	;volatile
  1641  033E  0008               	return
  1642  033F                     __end_of_blinkLed:	
  1643                           
  1644                           	psect	text9
  1645  035F                     __ptext9:	
  1646 ;; *************** function _adc_start *****************
  1647 ;; Defined at:
  1648 ;;		line 86 in file "util.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;		None
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;		None
  1653 ;; Return value:  Size  Location     Type
  1654 ;;		None               void
  1655 ;; Registers used:
  1656 ;;		None
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1662 ;;      Params:         0       0       0       0       0
  1663 ;;      Locals:         0       0       0       0       0
  1664 ;;      Temps:          0       0       0       0       0
  1665 ;;      Totals:         0       0       0       0       0
  1666 ;;Total ram usage:        0 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; Hardware stack levels required when called:    2
  1669 ;; This function calls:
  1670 ;;		Nothing
  1671 ;; This function is called by:
  1672 ;;		_main
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           
  1677                           ;psect for function _adc_start
  1678  035F                     _adc_start:	
  1679                           
  1680                           ;util.c: 87: ADCON0bits.ADON =1;
  1681                           
  1682                           ;incstack = 0
  1683                           ; Regs used in _adc_start: []
  1684  035F  1283               	bcf	3,5	;RP0=0, select bank0
  1685  0360  1303               	bcf	3,6	;RP1=0, select bank0
  1686  0361  141F               	bsf	31,0	;volatile
  1687                           
  1688                           ;util.c: 88: ADCON0bits.GO_nDONE = 1;
  1689  0362  151F               	bsf	31,2	;volatile
  1690                           
  1691                           ;util.c: 89: PIE1bits.ADIE =1;
  1692  0363  1683               	bsf	3,5	;RP0=1, select bank1
  1693  0364  1303               	bcf	3,6	;RP1=0, select bank1
  1694  0365  170C               	bsf	12,6	;volatile
  1695                           
  1696                           ;util.c: 90: INTCONbits.GIE =1;
  1697  0366  178B               	bsf	11,7	;volatile
  1698                           
  1699                           ;util.c: 91: INTCONbits.PEIE = 1;
  1700  0367  170B               	bsf	11,6	;volatile
  1701  0368  0008               	return
  1702  0369                     __end_of_adc_start:	
  1703                           
  1704                           	psect	text10
  1705  033F                     __ptext10:	
  1706 ;; *************** function _adc_init_CH0 *****************
  1707 ;; Defined at:
  1708 ;;		line 76 in file "util.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;		None
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;		None
  1713 ;; Return value:  Size  Location     Type
  1714 ;;		None               void
  1715 ;; Registers used:
  1716 ;;		wreg, status,2, status,0
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1722 ;;      Params:         0       0       0       0       0
  1723 ;;      Locals:         0       0       0       0       0
  1724 ;;      Temps:          0       0       0       0       0
  1725 ;;      Totals:         0       0       0       0       0
  1726 ;;Total ram usage:        0 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    2
  1729 ;; This function calls:
  1730 ;;		Nothing
  1731 ;; This function is called by:
  1732 ;;		_main
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           
  1737                           ;psect for function _adc_init_CH0
  1738  033F                     _adc_init_CH0:	
  1739                           
  1740                           ;util.c: 77: ADCON0bits.ADCS = 0x00;
  1741                           
  1742                           ;incstack = 0
  1743                           ; Regs used in _adc_init_CH0: [wreg+status,2+status,0]
  1744  033F  303F               	movlw	-193
  1745  0340  1283               	bcf	3,5	;RP0=0, select bank0
  1746  0341  1303               	bcf	3,6	;RP1=0, select bank0
  1747  0342  059F               	andwf	31,f	;volatile
  1748                           
  1749                           ;util.c: 78: ADCON0bits.CHS = 0x00;
  1750  0343  30C7               	movlw	-57
  1751  0344  059F               	andwf	31,f	;volatile
  1752                           
  1753                           ;util.c: 80: ADCON1bits.ADFM = 1;
  1754  0345  1683               	bsf	3,5	;RP0=1, select bank1
  1755  0346  1303               	bcf	3,6	;RP1=0, select bank1
  1756  0347  179F               	bsf	31,7	;volatile
  1757                           
  1758                           ;util.c: 81: ADCON1bits.PCFG = 0x00;
  1759  0348  30F0               	movlw	-16
  1760  0349  059F               	andwf	31,f	;volatile
  1761  034A  0008               	return
  1762  034B                     __end_of_adc_init_CH0:	
  1763                           
  1764                           	psect	text11
  1765  021B                     __ptext11:	
  1766 ;; *************** function _ISR *****************
  1767 ;; Defined at:
  1768 ;;		line 65 in file "main.c"
  1769 ;; Parameters:    Size  Location     Type
  1770 ;;		None
  1771 ;; Auto vars:     Size  Location     Type
  1772 ;;		None
  1773 ;; Return value:  Size  Location     Type
  1774 ;;		None               void
  1775 ;; Registers used:
  1776 ;;		wreg, status,2, status,0, pclath, cstack
  1777 ;; Tracked objects:
  1778 ;;		On entry : 0/0
  1779 ;;		On exit  : 0/0
  1780 ;;		Unchanged: 0/0
  1781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1782 ;;      Params:         0       0       0       0       0
  1783 ;;      Locals:         0       0       0       0       0
  1784 ;;      Temps:          6       0       0       0       0
  1785 ;;      Totals:         6       0       0       0       0
  1786 ;;Total ram usage:        6 bytes
  1787 ;; Hardware stack levels used:    1
  1788 ;; Hardware stack levels required when called:    1
  1789 ;; This function calls:
  1790 ;;		___awmod
  1791 ;; This function is called by:
  1792 ;;		Interrupt level 1
  1793 ;; This function uses a non-reentrant model
  1794 ;;
  1795                           
  1796                           
  1797                           ;psect for function _ISR
  1798  021B                     _ISR:	
  1799                           
  1800                           ;main.c: 70: if(TMR0IF && TMR0IE){
  1801  021B  190B               	btfsc	11,2	;volatile
  1802  021C  1E8B               	btfss	11,5	;volatile
  1803  021D  2A57               	goto	i1l1082
  1804                           
  1805                           ;main.c: 71: if((blinkState & (0x01)== 1) && (blinkCounter % 5 == 0)){
  1806  021E  1C43               	btfss	_blinkState,0	;volatile
  1807  021F  2A31               	goto	i1l1072
  1808  0220  3005               	movlw	5
  1809  0221  00F0               	movwf	___awmod@divisor
  1810  0222  3000               	movlw	0
  1811  0223  00F1               	movwf	___awmod@divisor+1
  1812  0224  083E               	movf	_blinkCounter+1,w	;volatile
  1813  0225  00F3               	movwf	___awmod@dividend+1
  1814  0226  083D               	movf	_blinkCounter,w	;volatile
  1815  0227  00F2               	movwf	___awmod@dividend
  1816  0228  120A  118A  22BF  120A  118A  	fcall	___awmod
  1817  022D  0870               	movf	?___awmod,w
  1818  022E  0471               	iorwf	?___awmod+1,w
  1819  022F  1903               	btfsc	3,2
  1820  0230  2A48               	goto	i1l1076
  1821  0231                     i1l1072:	
  1822                           ;main.c: 73: }else if((blinkState == 4) && (blinkCounter % 20 == 0)){
  1823                           
  1824                           ;main.c: 72: PORTC ^= (1<<3);
  1825                           
  1826  0231  3004               	movlw	4
  1827  0232  1283               	bcf	3,5	;RP0=0, select bank0
  1828  0233  1303               	bcf	3,6	;RP1=0, select bank0
  1829  0234  0643               	xorwf	_blinkState,w	;volatile
  1830  0235  1D03               	btfss	3,2
  1831  0236  2A4E               	goto	i1l1078
  1832  0237  3014               	movlw	20
  1833  0238  00F0               	movwf	___awmod@divisor
  1834  0239  3000               	movlw	0
  1835  023A  00F1               	movwf	___awmod@divisor+1
  1836  023B  083E               	movf	_blinkCounter+1,w	;volatile
  1837  023C  00F3               	movwf	___awmod@dividend+1
  1838  023D  083D               	movf	_blinkCounter,w	;volatile
  1839  023E  00F2               	movwf	___awmod@dividend
  1840  023F  120A  118A  22BF  120A  118A  	fcall	___awmod
  1841  0244  0870               	movf	?___awmod,w
  1842  0245  0471               	iorwf	?___awmod+1,w
  1843  0246  1D03               	btfss	3,2
  1844  0247  2A4E               	goto	i1l1078
  1845  0248                     i1l1076:	
  1846                           
  1847                           ;main.c: 74: PORTC ^= (1<<3);
  1848  0248  3008               	movlw	8
  1849  0249  00F7               	movwf	??_ISR
  1850  024A  0877               	movf	??_ISR,w
  1851  024B  1283               	bcf	3,5	;RP0=0, select bank0
  1852  024C  1303               	bcf	3,6	;RP1=0, select bank0
  1853  024D  0687               	xorwf	7,f	;volatile
  1854  024E                     i1l1078:	
  1855                           
  1856                           ;main.c: 75: }
  1857                           ;main.c: 76: blinkCounter ++;
  1858  024E  3001               	movlw	1
  1859  024F  1283               	bcf	3,5	;RP0=0, select bank0
  1860  0250  1303               	bcf	3,6	;RP1=0, select bank0
  1861  0251  07BD               	addwf	_blinkCounter,f	;volatile
  1862  0252  1803               	skipnc
  1863  0253  0ABE               	incf	_blinkCounter+1,f	;volatile
  1864  0254  3000               	movlw	0
  1865  0255  07BE               	addwf	_blinkCounter+1,f	;volatile
  1866                           
  1867                           ;main.c: 77: TMR0IF = 0;
  1868  0256  110B               	bcf	11,2	;volatile
  1869  0257                     i1l1082:	
  1870                           
  1871                           ;main.c: 78: }
  1872                           ;main.c: 81: if(TMR1IE && TMR1IF){
  1873  0257  1683               	bsf	3,5	;RP0=1, select bank1
  1874  0258  1303               	bcf	3,6	;RP1=0, select bank1
  1875  0259  1C0C               	btfss	12,0	;volatile
  1876  025A  2A6F               	goto	i1l79
  1877  025B  1283               	bcf	3,5	;RP0=0, select bank0
  1878  025C  1303               	bcf	3,6	;RP1=0, select bank0
  1879  025D  1C0C               	btfss	12,0	;volatile
  1880  025E  2A6F               	goto	i1l79
  1881                           
  1882                           ;main.c: 84: if(alarmState == 1){
  1883  025F  037D               	decf	_alarmState,w	;volatile
  1884  0260  1D03               	btfss	3,2
  1885  0261  2A64               	goto	i1l1090
  1886                           
  1887                           ;main.c: 85: almCounter ++;
  1888  0262  3001               	movlw	1
  1889  0263  2A69               	goto	L8
  1890  0264                     i1l1090:	
  1891                           ;main.c: 86: }else if(alarmState == 2){
  1892                           
  1893  0264  3002               	movlw	2
  1894  0265  067D               	xorwf	_alarmState,w	;volatile
  1895  0266  1D03               	btfss	3,2
  1896  0267  2A6E               	goto	i1l81
  1897                           
  1898                           ;main.c: 87: almCounter += 3;
  1899  0268  3003               	movlw	3
  1900  0269                     L8:	
  1901  0269  07BB               	addwf	_almCounter,f	;volatile
  1902  026A  1803               	skipnc
  1903  026B  0ABC               	incf	_almCounter+1,f	;volatile
  1904  026C  3000               	movlw	0
  1905  026D  07BC               	addwf	_almCounter+1,f	;volatile
  1906  026E                     i1l81:	
  1907                           ;main.c: 88: }else if(alarmState >= 3){
  1908                           
  1909                           
  1910                           ;main.c: 90: }
  1911                           ;main.c: 92: TMR1IF = 0;
  1912  026E  100C               	bcf	12,0	;volatile
  1913  026F                     i1l79:	
  1914                           
  1915                           ;main.c: 93: }
  1916                           ;main.c: 96: if(TMR2IF && TMR2IE){
  1917  026F  1283               	bcf	3,5	;RP0=0, select bank0
  1918  0270  1C8C               	btfss	12,1	;volatile
  1919  0271  2A93               	goto	i1l1112
  1920  0272  1683               	bsf	3,5	;RP0=1, select bank1
  1921  0273  1303               	bcf	3,6	;RP1=0, select bank1
  1922  0274  1C8C               	btfss	12,1	;volatile
  1923  0275  2A93               	goto	i1l1112
  1924                           
  1925                           ;main.c: 97: if(levelSensor[0].levelState == TRANSITION_TO_EMPTY || levelSensor[0].level
      +                          State == TRANSITION_TO_FULL){
  1926  0276  1283               	bcf	3,5	;RP0=0, select bank0
  1927  0277  1303               	bcf	3,6	;RP1=0, select bank0
  1928  0278  0333               	decf	_levelSensor,w	;volatile
  1929  0279  1903               	btfsc	3,2
  1930  027A  2A7F               	goto	i1l1102
  1931  027B  3003               	movlw	3
  1932  027C  0633               	xorwf	_levelSensor,w	;volatile
  1933  027D  1D03               	btfss	3,2
  1934  027E  2A85               	goto	i1l1104
  1935  027F                     i1l1102:	
  1936                           
  1937                           ;main.c: 98: counter1++;
  1938  027F  3001               	movlw	1
  1939  0280  07BF               	addwf	_counter1,f	;volatile
  1940  0281  1803               	skipnc
  1941  0282  0AC0               	incf	_counter1+1,f	;volatile
  1942  0283  3000               	movlw	0
  1943  0284  07C0               	addwf	_counter1+1,f	;volatile
  1944  0285                     i1l1104:	
  1945                           
  1946                           ;main.c: 99: }
  1947                           ;main.c: 101: if(levelSensor[1].levelState == TRANSITION_TO_EMPTY || levelSensor[1].leve
      +                          lState == TRANSITION_TO_FULL){
  1948  0285  0337               	decf	_levelSensor+4,w	;volatile
  1949  0286  1903               	btfsc	3,2
  1950  0287  2A8C               	goto	i1l1108
  1951  0288  3003               	movlw	3
  1952  0289  0637               	xorwf	_levelSensor+4,w	;volatile
  1953  028A  1D03               	btfss	3,2
  1954  028B  2A92               	goto	i1l1110
  1955  028C                     i1l1108:	
  1956                           
  1957                           ;main.c: 102: counter2++;
  1958  028C  3001               	movlw	1
  1959  028D  07C1               	addwf	_counter2,f	;volatile
  1960  028E  1803               	skipnc
  1961  028F  0AC2               	incf	_counter2+1,f	;volatile
  1962  0290  3000               	movlw	0
  1963  0291  07C2               	addwf	_counter2+1,f	;volatile
  1964  0292                     i1l1110:	
  1965                           
  1966                           ;main.c: 103: }
  1967                           ;main.c: 104: TMR2IF = 0;
  1968  0292  108C               	bcf	12,1	;volatile
  1969  0293                     i1l1112:	
  1970                           
  1971                           ;main.c: 105: }
  1972                           ;main.c: 108: if(ADIF && ADIE){
  1973  0293  1283               	bcf	3,5	;RP0=0, select bank0
  1974  0294  1F0C               	btfss	12,6	;volatile
  1975  0295  2AB3               	goto	i1l93
  1976  0296  1683               	bsf	3,5	;RP0=1, select bank1
  1977  0297  1303               	bcf	3,6	;RP1=0, select bank1
  1978  0298  1F0C               	btfss	12,6	;volatile
  1979  0299  2AB3               	goto	i1l93
  1980                           
  1981                           ;main.c: 109: adcResult = (ADRESH <<8) | (ADRESL);
  1982  029A  1283               	bcf	3,5	;RP0=0, select bank0
  1983  029B  1303               	bcf	3,6	;RP1=0, select bank0
  1984  029C  081E               	movf	30,w	;volatile
  1985  029D  00C5               	movwf	_adcResult+1	;volatile
  1986  029E  1683               	bsf	3,5	;RP0=1, select bank1
  1987  029F  1303               	bcf	3,6	;RP1=0, select bank1
  1988  02A0  081E               	movf	30,w	;volatile
  1989  02A1  1283               	bcf	3,5	;RP0=0, select bank0
  1990  02A2  1303               	bcf	3,6	;RP1=0, select bank0
  1991  02A3  00C4               	movwf	_adcResult	;volatile
  1992                           
  1993                           ;main.c: 110: alarmTimer = adcResult >> 2;
  1994  02A4  0845               	movf	_adcResult+1,w	;volatile
  1995  02A5  00F8               	movwf	??_ISR+1
  1996  02A6  0844               	movf	_adcResult,w	;volatile
  1997  02A7  00F7               	movwf	??_ISR
  1998  02A8  0D78               	rlf	??_ISR+1,w
  1999  02A9  0CF8               	rrf	??_ISR+1,f
  2000  02AA  0CF7               	rrf	??_ISR,f
  2001  02AB  0D78               	rlf	??_ISR+1,w
  2002  02AC  0CF8               	rrf	??_ISR+1,f
  2003  02AD  0CF7               	rrf	??_ISR,f
  2004  02AE  0877               	movf	??_ISR,w
  2005  02AF  00C6               	movwf	_alarmTimer	;volatile
  2006  02B0  0878               	movf	??_ISR+1,w
  2007  02B1  00C7               	movwf	_alarmTimer+1	;volatile
  2008                           
  2009                           ;main.c: 112: ADIF = 0;
  2010  02B2  130C               	bcf	12,6	;volatile
  2011  02B3                     i1l93:	
  2012  02B3  087C               	movf	??_ISR+5,w
  2013  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  2014  02B5  00FF               	movwf	127
  2015  02B6  087B               	movf	??_ISR+4,w
  2016  02B7  008A               	movwf	10
  2017  02B8  087A               	movf	??_ISR+3,w
  2018  02B9  0084               	movwf	4
  2019  02BA  0E79               	swapf	(??_ISR+2)^(0+-128),w
  2020  02BB  0083               	movwf	3
  2021  02BC  0EFE               	swapf	126,f
  2022  02BD  0E7E               	swapf	126,w
  2023  02BE  0009               	retfie
  2024  02BF                     __end_of_ISR:	
  2025                           
  2026                           	psect	intentry
  2027  0004                     __pintentry:	
  2028                           ;incstack = 0
  2029                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  2030                           
  2031  0004                     interrupt_function:	
  2032  007E                     saved_w	set	btemp
  2033  0004  00FE               	movwf	btemp
  2034  0005  0E03               	swapf	3,w
  2035  0006  00F9               	movwf	??_ISR+2
  2036  0007  0804               	movf	4,w
  2037  0008  00FA               	movwf	??_ISR+3
  2038  0009  080A               	movf	10,w
  2039  000A  00FB               	movwf	??_ISR+4
  2040  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2041  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2042  000D  087F               	movf	btemp+1,w
  2043  000E  00FC               	movwf	??_ISR+5
  2044  000F  120A  118A  2A1B   	ljmp	_ISR
  2045                           
  2046                           	psect	text12
  2047  02BF                     __ptext12:	
  2048 ;; *************** function ___awmod *****************
  2049 ;; Defined at:
  2050 ;;		line 6 in file "/opt/microchip/xc8/v1.34/sources/common/awmod.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;  divisor         2    0[COMMON] int 
  2053 ;;  dividend        2    2[COMMON] int 
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;  sign            1    6[COMMON] unsigned char 
  2056 ;;  counter         1    5[COMMON] unsigned char 
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  2    0[COMMON] int 
  2059 ;; Registers used:
  2060 ;;		wreg, status,2, status,0
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2066 ;;      Params:         4       0       0       0       0
  2067 ;;      Locals:         2       0       0       0       0
  2068 ;;      Temps:          1       0       0       0       0
  2069 ;;      Totals:         7       0       0       0       0
  2070 ;;Total ram usage:        7 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; This function calls:
  2073 ;;		Nothing
  2074 ;; This function is called by:
  2075 ;;		_ISR
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           
  2080                           ;psect for function ___awmod
  2081  02BF                     ___awmod:	
  2082                           
  2083                           ;incstack = 0
  2084                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2085  02BF  01F6               	clrf	___awmod@sign
  2086  02C0  1FF3               	btfss	___awmod@dividend+1,7
  2087  02C1  2AC9               	goto	i1l1032
  2088  02C2  09F2               	comf	___awmod@dividend,f
  2089  02C3  09F3               	comf	___awmod@dividend+1,f
  2090  02C4  0AF2               	incf	___awmod@dividend,f
  2091  02C5  1903               	skipnz
  2092  02C6  0AF3               	incf	___awmod@dividend+1,f
  2093  02C7  01F6               	clrf	___awmod@sign
  2094  02C8  0AF6               	incf	___awmod@sign,f
  2095  02C9                     i1l1032:	
  2096  02C9  1FF1               	btfss	___awmod@divisor+1,7
  2097  02CA  2AD0               	goto	i1l1036
  2098  02CB  09F0               	comf	___awmod@divisor,f
  2099  02CC  09F1               	comf	___awmod@divisor+1,f
  2100  02CD  0AF0               	incf	___awmod@divisor,f
  2101  02CE  1903               	skipnz
  2102  02CF  0AF1               	incf	___awmod@divisor+1,f
  2103  02D0                     i1l1036:	
  2104  02D0  0870               	movf	___awmod@divisor,w
  2105  02D1  0471               	iorwf	___awmod@divisor+1,w
  2106  02D2  1903               	btfsc	3,2
  2107  02D3  2AFD               	goto	i1l1054
  2108  02D4  01F5               	clrf	___awmod@counter
  2109  02D5  0AF5               	incf	___awmod@counter,f
  2110  02D6                     i1l1044:	
  2111  02D6  1BF1               	btfsc	___awmod@divisor+1,7
  2112  02D7  2AE4               	goto	i1l1046
  2113  02D8  3001               	movlw	1
  2114  02D9                     u68_25:	
  2115  02D9  1003               	clrc
  2116  02DA  0DF0               	rlf	___awmod@divisor,f
  2117  02DB  0DF1               	rlf	___awmod@divisor+1,f
  2118  02DC  3EFF               	addlw	-1
  2119  02DD  1D03               	skipz
  2120  02DE  2AD9               	goto	u68_25
  2121  02DF  3001               	movlw	1
  2122  02E0  00F4               	movwf	??___awmod
  2123  02E1  0874               	movf	??___awmod,w
  2124  02E2  07F5               	addwf	___awmod@counter,f
  2125  02E3  2AD6               	goto	i1l1044
  2126  02E4                     i1l1046:	
  2127  02E4  0871               	movf	___awmod@divisor+1,w
  2128  02E5  0273               	subwf	___awmod@dividend+1,w
  2129  02E6  1D03               	skipz
  2130  02E7  2AEA               	goto	u70_25
  2131  02E8  0870               	movf	___awmod@divisor,w
  2132  02E9  0272               	subwf	___awmod@dividend,w
  2133  02EA                     u70_25:	
  2134  02EA  1C03               	skipc
  2135  02EB  2AF2               	goto	i1l1050
  2136  02EC  0870               	movf	___awmod@divisor,w
  2137  02ED  02F2               	subwf	___awmod@dividend,f
  2138  02EE  0871               	movf	___awmod@divisor+1,w
  2139  02EF  1C03               	skipc
  2140  02F0  03F3               	decf	___awmod@dividend+1,f
  2141  02F1  02F3               	subwf	___awmod@dividend+1,f
  2142  02F2                     i1l1050:	
  2143  02F2  3001               	movlw	1
  2144  02F3                     u71_25:	
  2145  02F3  1003               	clrc
  2146  02F4  0CF1               	rrf	___awmod@divisor+1,f
  2147  02F5  0CF0               	rrf	___awmod@divisor,f
  2148  02F6  3EFF               	addlw	-1
  2149  02F7  1D03               	skipz
  2150  02F8  2AF3               	goto	u71_25
  2151  02F9  3001               	movlw	1
  2152  02FA  02F5               	subwf	___awmod@counter,f
  2153  02FB  1D03               	btfss	3,2
  2154  02FC  2AE4               	goto	i1l1046
  2155  02FD                     i1l1054:	
  2156  02FD  0876               	movf	___awmod@sign,w
  2157  02FE  1903               	btfsc	3,2
  2158  02FF  2B05               	goto	i1l1058
  2159  0300  09F2               	comf	___awmod@dividend,f
  2160  0301  09F3               	comf	___awmod@dividend+1,f
  2161  0302  0AF2               	incf	___awmod@dividend,f
  2162  0303  1903               	skipnz
  2163  0304  0AF3               	incf	___awmod@dividend+1,f
  2164  0305                     i1l1058:	
  2165  0305  0873               	movf	___awmod@dividend+1,w
  2166  0306  00F1               	movwf	?___awmod+1
  2167  0307  0872               	movf	___awmod@dividend,w
  2168  0308  00F0               	movwf	?___awmod
  2169  0309  0008               	return
  2170  030A                     __end_of___awmod:	
  2171  007E                     btemp	set	126	;btemp
  2172  007E                     wtemp	set	126
  2173  007E                     wtemp0	set	126
  2174  0080                     wtemp1	set	128
  2175  0082                     wtemp2	set	130
  2176  0084                     wtemp3	set	132
  2177  0086                     wtemp4	set	134
  2178  0088                     wtemp5	set	136
  2179  007F                     wtemp6	set	127
  2180  007E                     ttemp	set	126
  2181  007E                     ttemp0	set	126
  2182  0081                     ttemp1	set	129
  2183  0084                     ttemp2	set	132
  2184  0087                     ttemp3	set	135
  2185  007F                     ttemp4	set	127
  2186  007E                     ltemp	set	126
  2187  007E                     ltemp0	set	126
  2188  0082                     ltemp1	set	130
  2189  0086                     ltemp2	set	134
  2190  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    4
    Data        4
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     19      40
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    blinkLed@blinkState	PTR unsigned char  size(1) Largest target is 1
		 -> blinkState(BANK0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awmod

Critical Paths under _main in BANK0

    _main->_blinkLed

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0    1083
                                              5 BANK0     14    14      0
                       _adc_init_CH0
                          _adc_start
                           _blinkLed
                        _timer0_init
                       _timer0_start
                        _timer1_init
                       _timer1_start
                        _timer1_stop
                        _timer2_init
                       _timer2_start
 ---------------------------------------------------------------------------------
 (1) _timer2_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _blinkLed                                             5     2      3     401
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _adc_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_init_CH0                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  6     6      0     508
                                              7 COMMON     6     6      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     508
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc_init_CH0
   _adc_start
   _blinkLed
   _timer0_init
   _timer0_start
   _timer1_init
   _timer1_start
   _timer1_stop
   _timer2_init
   _timer2_start

 _ISR (ROOT)
   ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     13      28       5       50.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      36      12        0.0%
ABS                  0      0      36       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Jun 16 01:13:07 2015

                        pc 0002                __CFG_CP$OFF 0000                         fsr 0004  
             __CFG_CPD$OFF 0000                        _ISR 021B                        u955 00B5  
              __CFG_WRT$ON 0000                        fsr0 0004                        indf 0000  
             ___awmod@sign 0076               __CFG_FOSC$HS 0000               __CFG_LVP$OFF 0000  
                     ?_ISR 0070                       l1020 0336                       l1014 032C  
                     l1006 031B                       l1008 0320                       l1200 0118  
                     l1210 0129                       l1204 0120                       l1206 0122  
                     l1240 018E                       l1232 0169                       l1224 0160  
                     l1152 008C                       l1226 0162                       l1218 014E  
                     l1170 00BA                       l1162 009A                       l1270 01FF  
                     l1158 0093                       l1246 019D                       l1248 01B0  
                     l1192 00F7                       l1184 00D1                       l1176 00C7  
                     l1258 01C9                       l1178 00CA                       l1268 01EA  
                     l1198 0104                       _ADIE 0466                       _ADIF 0066  
                     u1005 00EC                       u1125 01D3                       u1045 0144  
                     u1135 0210                       u1095 0184                       i1l81 026E  
                     i1l93 02B3                       i1l79 026F      __size_of_adc_init_CH0 000C  
                     _main 0039                       btemp 007E              __CFG_BOREN$ON 0000  
                     ltemp 007E                       start 0012                       ttemp 007E  
                     wtemp 007E                      ??_ISR 0077           blinkLed@almState 0021  
                    ?_main 0070              __CFG_WDTE$OFF 0000            __end_of___awmod 030A  
                    _PORTB 0006                      _PORTC 0007                      u70_25 02EA  
                    u71_25 02F3                      _TRISA 0085                      _TRISB 0086  
                    _TRISC 0087                      u68_25 02D9               _adc_init_CH0 033F  
                    main@i 0028                      pclath 000A                      ltemp0 007E  
                    ltemp1 0082                      ltemp2 0086                      ltemp3 0080  
                    ttemp0 007E                      ttemp1 0081                      ttemp2 0084  
                    ttemp3 0087                      ttemp4 007F                      status 0003  
                    wtemp0 007E                      wtemp1 0080                      wtemp2 0082  
                    wtemp3 0084                      wtemp4 0086                      wtemp5 0088  
                    wtemp6 007F           blinkLed@stateOne 0024           blinkLed@stateTwo 0020  
          __initialization 0015               __end_of_main 021B                     ??_main 0025  
                   _ADRESH 001E                     _ADRESL 009E                     i1l1110 0292  
                   i1l1102 027F                     i1l1032 02C9                     i1l1104 0285  
                   i1l1112 0293                     i1l1050 02F2                     i1l1044 02D6  
                   i1l1036 02D0                     i1l1108 028C                     i1l1046 02E4  
                   i1l1054 02FD                     i1l1072 0231                     i1l1058 0305  
                   i1l1090 0264                     i1l1082 0257                     i1l1076 0248  
                   i1l1078 024E                     _TMR0IE 005D                     _TMR0IF 005A  
                   _TMR1IE 0460                     _TMR1IF 0060                     _TMR2IE 0461  
                   _TMR2IF 0061           __end_of_blinkLed 033F             __CFG_PWRTE$OFF 0000  
                ??___awmod 0074               ?_timer0_init 0070               ?_timer1_init 0070  
             ?_timer2_init 0070               ?_timer1_stop 0070            ___awmod@divisor 0070  
          ___awmod@counter 0075                     saved_w 007E    __end_of__initialization 0035  
       __size_of_adc_start 000A             __pcstackCOMMON 0070               __pidataBANK0 039A  
           _OPTION_REGbits 0081                 _almCounter 003B                 __pbssBANK0 0033  
               _alarmTimer 0046                 _alarmState 007D                 __pmaintext 0039  
       blinkLed@blinkState 0022                 _blinkState 0043                 __pintentry 0004  
             _blinkCounter 003D          __end_of_adc_start 0369                  ?_blinkLed 0020  
               __stringtab 034B                    ___awmod 02BF          _FILTERTMR_ISEMPTY 0351  
     __size_of_timer0_init 0009       __size_of_timer1_init 0006                    __ptext1 0369  
                  __ptext2 0372                    __ptext3 038C                    __ptext4 0355  
                  __ptext5 0394                    __ptext6 039E                    __ptext7 037B  
                  __ptext8 030A                    __ptext9 035F       __size_of_timer2_init 0009  
            ?_timer0_start 0070       __size_of_timer1_stop 0008              ?_timer1_start 0070  
            ?_timer2_start 0070               __size_of_ISR 00A4                  _T1CONbits 0010  
                _T2CONbits 0012           ___awmod@dividend 0072                 ??_blinkLed 0023  
                  clrloop0 0385             main@sensorRead 002A       end_of_initialization 0035  
__end_of_FILTERTMR_ISEMPTY 0353             ??_timer0_start 0020             ??_timer1_start 0020  
           ??_timer2_start 0020        start_initialization 0015                __end_of_ISR 02BF  
              __pdataBANK0 0044              ?_adc_init_CH0 0070                __pbssCOMMON 007D  
                ___latbits 0002                  _adcResult 0044              __pcstackBANK0 0020  
                _adc_start 035F          __size_of_blinkLed 0035       __end_of_timer0_start 03A2  
     __end_of_timer1_start 035F       __end_of_timer2_start 0372                   ?___awmod 0070  
                __pstrings 034B             ??_adc_init_CH0 0020           _FILTERTMR_ISFULL 0353  
               ?_adc_start 0070          interrupt_function 0004                  clear_ram0 0384  
                 _PIE1bits 008C              ??_timer0_init 0020              ??_timer1_init 0020  
            ??_timer2_init 0020              ??_timer1_stop 0020                 _ADCON0bits 001F  
              __stringbase 0350                 _ADCON1bits 009F            main@levelSensor 002B  
         __size_of___awmod 004B         __end_of__stringtab 0351        __end_of_timer0_init 0384  
      __end_of_timer1_init 039A        __end_of_timer2_init 037B                _levelSensor 0033  
      __end_of_timer1_stop 0394                   _blinkLed 030A                   __ptext10 033F  
                 __ptext11 021B                   __ptext12 02BF      __size_of_timer0_start 0004  
              ??_adc_start 0020      __size_of_timer1_start 000A      __size_of_timer2_start 0009  
                 _counter1 003F                   _counter2 0041              __size_of_main 01E2  
     __end_of_adc_init_CH0 034B               _timer0_start 039E               _timer1_start 0355  
             _timer2_start 0369                 _INTCONbits 000B                   intlevel1 0000  
                stringcode 034B   __end_of_FILTERTMR_ISFULL 0355                _timer0_init 037B  
              _timer1_init 0394                _timer2_init 0372                _timer1_stop 038C  
                 stringdir 034B                   stringtab 034B  
