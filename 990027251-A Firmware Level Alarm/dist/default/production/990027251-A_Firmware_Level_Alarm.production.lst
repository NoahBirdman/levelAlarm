

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Jun 21 20:05:59 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F876
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     	;# 
    34  0001                     	;# 
    35  0002                     	;# 
    36  0003                     	;# 
    37  0004                     	;# 
    38  0005                     	;# 
    39  0006                     	;# 
    40  0007                     	;# 
    41  000A                     	;# 
    42  000B                     	;# 
    43  000C                     	;# 
    44  000D                     	;# 
    45  000E                     	;# 
    46  000E                     	;# 
    47  000F                     	;# 
    48  0010                     	;# 
    49  0011                     	;# 
    50  0012                     	;# 
    51  0013                     	;# 
    52  0014                     	;# 
    53  0015                     	;# 
    54  0015                     	;# 
    55  0016                     	;# 
    56  0017                     	;# 
    57  0018                     	;# 
    58  0019                     	;# 
    59  001A                     	;# 
    60  001B                     	;# 
    61  001B                     	;# 
    62  001C                     	;# 
    63  001D                     	;# 
    64  001E                     	;# 
    65  001F                     	;# 
    66  0081                     	;# 
    67  0085                     	;# 
    68  0086                     	;# 
    69  0087                     	;# 
    70  008C                     	;# 
    71  008D                     	;# 
    72  008E                     	;# 
    73  0091                     	;# 
    74  0092                     	;# 
    75  0093                     	;# 
    76  0094                     	;# 
    77  0098                     	;# 
    78  0099                     	;# 
    79  009E                     	;# 
    80  009F                     	;# 
    81  010C                     	;# 
    82  010D                     	;# 
    83  010E                     	;# 
    84  010F                     	;# 
    85  018C                     	;# 
    86  018D                     	;# 
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  0007                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000D                     	;# 
    99  000E                     	;# 
   100  000E                     	;# 
   101  000F                     	;# 
   102  0010                     	;# 
   103  0011                     	;# 
   104  0012                     	;# 
   105  0013                     	;# 
   106  0014                     	;# 
   107  0015                     	;# 
   108  0015                     	;# 
   109  0016                     	;# 
   110  0017                     	;# 
   111  0018                     	;# 
   112  0019                     	;# 
   113  001A                     	;# 
   114  001B                     	;# 
   115  001B                     	;# 
   116  001C                     	;# 
   117  001D                     	;# 
   118  001E                     	;# 
   119  001F                     	;# 
   120  0081                     	;# 
   121  0085                     	;# 
   122  0086                     	;# 
   123  0087                     	;# 
   124  008C                     	;# 
   125  008D                     	;# 
   126  008E                     	;# 
   127  0091                     	;# 
   128  0092                     	;# 
   129  0093                     	;# 
   130  0094                     	;# 
   131  0098                     	;# 
   132  0099                     	;# 
   133  009E                     	;# 
   134  009F                     	;# 
   135  010C                     	;# 
   136  010D                     	;# 
   137  010E                     	;# 
   138  010F                     	;# 
   139  018C                     	;# 
   140  018D                     	;# 
   141  0000                     	;# 
   142  0001                     	;# 
   143  0002                     	;# 
   144  0003                     	;# 
   145  0004                     	;# 
   146  0005                     	;# 
   147  0006                     	;# 
   148  0007                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  008C                     	;# 
   179  008D                     	;# 
   180  008E                     	;# 
   181  0091                     	;# 
   182  0092                     	;# 
   183  0093                     	;# 
   184  0094                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009E                     	;# 
   188  009F                     	;# 
   189  010C                     	;# 
   190  010D                     	;# 
   191  010E                     	;# 
   192  010F                     	;# 
   193  018C                     	;# 
   194  018D                     	;# 
   195                           
   196                           	psect	strings
   197  03D7                     __pstrings:	
   198  03D7                     stringtab:	
   199  03D7                     __stringtab:	
   200  03D7                     stringcode:	
   201                           ;	String table - string pointers are 1 byte each
   202                           
   203  03D7                     stringdir:	
   204  03D7  3003               	movlw	high stringdir
   205  03D8  008A               	movwf	10
   206  03D9  0804               	movf	4,w
   207  03DA  0A84               	incf	4,f
   208  03DB  0782               	addwf	2,f
   209  03DC                     __stringbase:	
   210  03DC  3400               	retlw	0
   211  03DD                     __end_of__stringtab:	
   212  03DD                     _FILTERTMR_TO_EMPTY:	
   213  03DD  3432               	retlw	50
   214  03DE  3400               	retlw	0
   215  03DF                     __end_of_FILTERTMR_TO_EMPTY:	
   216  03DF                     _FILTERTMR_TO_FULL:	
   217  03DF  3432               	retlw	50
   218  03E0  3400               	retlw	0
   219  03E1                     __end_of_FILTERTMR_TO_FULL:	
   220  001F                     _ADCON0bits	set	31
   221  001E                     _ADRESH	set	30
   222  000B                     _INTCONbits	set	11
   223  0006                     _PORTB	set	6
   224  0007                     _PORTC	set	7
   225  0010                     _T1CONbits	set	16
   226  0012                     _T2CONbits	set	18
   227  0066                     _ADIF	set	102
   228  005D                     _TMR0IE	set	93
   229  005A                     _TMR0IF	set	90
   230  0060                     _TMR1IF	set	96
   231  0061                     _TMR2IF	set	97
   232  009F                     _ADCON1bits	set	159
   233  0081                     _OPTION_REGbits	set	129
   234  008C                     _PIE1bits	set	140
   235  0085                     _TRISA	set	133
   236  0086                     _TRISB	set	134
   237  0087                     _TRISC	set	135
   238  0466                     _ADIE	set	1126
   239  0460                     _TMR1IE	set	1120
   240  0461                     _TMR2IE	set	1121
   241                           
   242                           ; #config settings
   243  0000                     
   244                           	psect	cinit
   245  0015                     start_initialization:	
   246  0015                     __initialization:	
   247                           
   248                           ; Clear objects allocated to COMMON
   249  0015  01FC               	clrf	__pbssCOMMON& (0+127)
   250                           
   251                           ; Clear objects allocated to BANK0
   252  0016  1383               	bcf	3,7	;select IRP bank0
   253  0017  3020               	movlw	low __pbssBANK0
   254  0018  0084               	movwf	4
   255  0019  3031               	movlw	low (__pbssBANK0+17)
   256  001A  120A  118A  2410   	fcall	clear_ram0
   257  001D                     end_of_initialization:	
   258                           ;End of C runtime variable initialization code
   259                           
   260  001D                     __end_of__initialization:	
   261  001D  0183               	clrf	3
   262  001E  120A  118A  290C   	ljmp	_main	;jump to C main() function
   263                           
   264                           	psect	bssCOMMON
   265  007C                     __pbssCOMMON:	
   266  007C                     _blinkState:	
   267  007C                     	ds	1
   268                           
   269                           	psect	bssBANK0
   270  0020                     __pbssBANK0:	
   271  0020                     ISR@adcResult:	
   272  0020                     	ds	2
   273  0022                     ISR@blinkCounter:	
   274  0022                     	ds	2
   275  0024                     _levelSensors:	
   276  0024                     	ds	10
   277  002E                     _theAlarm:	
   278  002E                     	ds	3
   279                           
   280                           	psect	clrtext
   281  0410                     clear_ram0:	
   282                           ;	Called with FSR containing the base address, and
   283                           ;	W with the last address+1
   284                           
   285  0410  0064               	clrwdt	;clear the watchdog before getting into this loop
   286  0411                     clrloop0:	
   287  0411  0180               	clrf	0	;clear RAM location pointed to by FSR
   288  0412  0A84               	incf	4,f	;increment pointer
   289  0413  0604               	xorwf	4,w	;XOR with final address
   290  0414  1903               	btfsc	3,2	;have we reached the end yet?
   291  0415  3400               	retlw	0	;all done for this memory range, return
   292  0416  0604               	xorwf	4,w	;XOR again to restore value
   293  0417  2C11               	goto	clrloop0	;do the next byte
   294                           
   295                           	psect	cstackCOMMON
   296  0070                     __pcstackCOMMON:	
   297  0070                     ?_timer1_stop:	
   298  0070                     ?_init_sensor:	
   299                           ; 0 bytes @ 0x0
   300                           
   301  0070                     ?_timer0_init:	
   302                           ; 0 bytes @ 0x0
   303                           
   304  0070                     ?_timer1_init:	
   305                           ; 0 bytes @ 0x0
   306                           
   307  0070                     ?_timer2_init:	
   308                           ; 0 bytes @ 0x0
   309                           
   310  0070                     ?_adc_init_CH0:	
   311                           ; 0 bytes @ 0x0
   312                           
   313  0070                     ?_timer0_start:	
   314                           ; 0 bytes @ 0x0
   315                           
   316  0070                     ?_timer2_start:	
   317                           ; 0 bytes @ 0x0
   318                           
   319  0070                     ?_checkTankStatus:	
   320                           ; 0 bytes @ 0x0
   321                           
   322  0070                     ?_checkSensorState:	
   323                           ; 0 bytes @ 0x0
   324                           
   325  0070                     ?_turnAlarmOn:	
   326                           ; 0 bytes @ 0x0
   327                           
   328  0070                     ?_ISR:	
   329                           ; 0 bytes @ 0x0
   330                           
   331  0070                     ?_timer1_start:	
   332                           ; 0 bytes @ 0x0
   333                           
   334  0070                     ?_adc_start:	
   335                           ; 0 bytes @ 0x0
   336                           
   337  0070                     ?i1_timer1_stop:	
   338                           ; 0 bytes @ 0x0
   339                           
   340  0070                     ??i1_timer1_stop:	
   341                           ; 0 bytes @ 0x0
   342                           
   343  0070                     ?_main:	
   344                           ; 0 bytes @ 0x0
   345                           
   346  0070                     ?___awmod:	
   347                           ; 2 bytes @ 0x0
   348                           
   349  0070                     ___awmod@divisor:	
   350                           ; 2 bytes @ 0x0
   351                           
   352                           
   353                           ; 2 bytes @ 0x0
   354  0070                     	ds	2
   355  0072                     ___awmod@dividend:	
   356                           
   357                           ; 2 bytes @ 0x2
   358  0072                     	ds	2
   359  0074                     ??___awmod:	
   360                           
   361                           ; 0 bytes @ 0x4
   362  0074                     	ds	1
   363  0075                     ___awmod@counter:	
   364                           
   365                           ; 1 bytes @ 0x5
   366  0075                     	ds	1
   367  0076                     ___awmod@sign:	
   368                           
   369                           ; 1 bytes @ 0x6
   370  0076                     	ds	1
   371  0077                     ??_ISR:	
   372                           
   373                           ; 0 bytes @ 0x7
   374  0077                     	ds	5
   375                           
   376                           	psect	cstackBANK0
   377  0031                     __pcstackBANK0:	
   378  0031                     ??_timer1_stop:	
   379  0031                     ??_init_sensor:	
   380                           ; 0 bytes @ 0x0
   381                           
   382  0031                     ??_timer0_init:	
   383                           ; 0 bytes @ 0x0
   384                           
   385  0031                     ??_timer1_init:	
   386                           ; 0 bytes @ 0x0
   387                           
   388  0031                     ??_timer2_init:	
   389                           ; 0 bytes @ 0x0
   390                           
   391  0031                     ??_adc_init_CH0:	
   392                           ; 0 bytes @ 0x0
   393                           
   394  0031                     ??_timer0_start:	
   395                           ; 0 bytes @ 0x0
   396                           
   397  0031                     ??_timer2_start:	
   398                           ; 0 bytes @ 0x0
   399                           
   400  0031                     ??_checkTankStatus:	
   401                           ; 0 bytes @ 0x0
   402                           
   403  0031                     ??_checkSensorState:	
   404                           ; 0 bytes @ 0x0
   405                           
   406  0031                     ?_blinkLed:	
   407                           ; 0 bytes @ 0x0
   408                           
   409  0031                     ??_turnAlarmOn:	
   410                           ; 0 bytes @ 0x0
   411                           
   412  0031                     ??_timer1_start:	
   413                           ; 0 bytes @ 0x0
   414                           
   415  0031                     ??_adc_start:	
   416                           ; 0 bytes @ 0x0
   417                           
   418  0031                     ?___bmul:	
   419                           ; 0 bytes @ 0x0
   420                           
   421  0031                     blinkLed@stateTwo:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0031                     ___bmul@multiplicand:	
   425                           ; 1 bytes @ 0x0
   426                           
   427                           
   428                           ; 1 bytes @ 0x0
   429  0031                     	ds	1
   430  0032                     ??___bmul:	
   431  0032                     checkTankStatus@theSensor:	
   432                           ; 0 bytes @ 0x1
   433                           
   434  0032                     init_sensor@theSensor_init:	
   435                           ; 1 bytes @ 0x1
   436                           
   437  0032                     blinkLed@almState:	
   438                           ; 1 bytes @ 0x1
   439                           
   440  0032                     turnAlarmOn@theAlarm:	
   441                           ; 1 bytes @ 0x1
   442                           
   443                           
   444                           ; 1 bytes @ 0x1
   445  0032                     	ds	1
   446  0033                     blinkLed@blinkState:	
   447  0033                     ___bmul@product:	
   448                           ; 1 bytes @ 0x2
   449                           
   450                           
   451                           ; 1 bytes @ 0x2
   452  0033                     	ds	1
   453  0034                     ??_blinkLed:	
   454  0034                     ___bmul@multiplier:	
   455                           ; 0 bytes @ 0x3
   456                           
   457                           
   458                           ; 1 bytes @ 0x3
   459  0034                     	ds	1
   460  0035                     ?_checkAlarmState:	
   461  0035                     blinkLed@stateOne:	
   462                           ; 0 bytes @ 0x4
   463                           
   464  0035                     checkAlarmState@theAlarm:	
   465                           ; 1 bytes @ 0x4
   466                           
   467                           
   468                           ; 1 bytes @ 0x4
   469  0035                     	ds	1
   470  0036                     ??_checkAlarmState:	
   471  0036                     checkSensorState@theSensor:	
   472                           ; 0 bytes @ 0x5
   473                           
   474                           
   475                           ; 1 bytes @ 0x5
   476  0036                     	ds	2
   477  0038                     checkAlarmState@theSensor:	
   478                           
   479                           ; 1 bytes @ 0x7
   480  0038                     	ds	1
   481  0039                     ??_main:	
   482                           
   483                           ; 0 bytes @ 0x8
   484  0039                     	ds	3
   485  003C                     main@i_138:	
   486                           
   487                           ; 2 bytes @ 0xB
   488  003C                     	ds	2
   489  003E                     main@i:	
   490                           
   491                           ; 1 bytes @ 0xD
   492  003E                     	ds	1
   493                           
   494                           	psect	maintext
   495  010C                     __pmaintext:	
   496 ;;
   497 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   498 ;;
   499 ;; *************** function _main *****************
   500 ;; Defined at:
   501 ;;		line 123 in file "main.c"
   502 ;; Parameters:    Size  Location     Type
   503 ;;		None
   504 ;; Auto vars:     Size  Location     Type
   505 ;;  i               2   11[BANK0 ] int 
   506 ;;  i               1   13[BANK0 ] unsigned char 
   507 ;; Return value:  Size  Location     Type
   508 ;;                  2   96[None  ] int 
   509 ;; Registers used:
   510 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   511 ;; Tracked objects:
   512 ;;		On entry : B00/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   516 ;;      Params:         0       0       0       0       0
   517 ;;      Locals:         0       3       0       0       0
   518 ;;      Temps:          0       3       0       0       0
   519 ;;      Totals:         0       6       0       0       0
   520 ;;Total ram usage:        6 bytes
   521 ;; Hardware stack levels required when called:    5
   522 ;; This function calls:
   523 ;;		___bmul
   524 ;;		_adc_init_CH0
   525 ;;		_blinkLed
   526 ;;		_checkAlarmState
   527 ;;		_checkSensorState
   528 ;;		_checkTankStatus
   529 ;;		_init_sensor
   530 ;;		_timer0_init
   531 ;;		_timer0_start
   532 ;;		_timer1_init
   533 ;;		_timer2_init
   534 ;;		_timer2_start
   535 ;; This function is called by:
   536 ;;		Startup code after reset
   537 ;; This function uses a non-reentrant model
   538 ;;
   539                           
   540                           
   541                           ;psect for function _main
   542  010C                     _main:	
   543                           
   544                           ;main.c: 125: char i = 0x00;
   545                           
   546                           ;incstack = 0
   547                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   548  010C  1283               	bcf	3,5	;RP0=0, select bank0
   549  010D  1303               	bcf	3,6	;RP1=0, select bank0
   550  010E  01BE               	clrf	main@i
   551                           
   552                           ;main.c: 127: TRISA |= (1<<0);
   553  010F  1683               	bsf	3,5	;RP0=1, select bank1
   554  0110  1303               	bcf	3,6	;RP1=0, select bank1
   555  0111  1405               	bsf	5,0	;volatile
   556                           
   557                           ;main.c: 128: i = 0;
   558  0112  1283               	bcf	3,5	;RP0=0, select bank0
   559  0113  1303               	bcf	3,6	;RP1=0, select bank0
   560  0114  01BE               	clrf	main@i
   561                           
   562                           ;main.c: 129: TRISB |= (1<<4)|(1<<5);
   563  0115  3030               	movlw	48
   564  0116  00B9               	movwf	??_main
   565  0117  0839               	movf	??_main,w
   566  0118  1683               	bsf	3,5	;RP0=1, select bank1
   567  0119  1303               	bcf	3,6	;RP1=0, select bank1
   568  011A  0486               	iorwf	6,f	;volatile
   569                           
   570                           ;main.c: 130: TRISC &= ~((1<<2)|(1<<3));
   571  011B  30F3               	movlw	243
   572  011C  1283               	bcf	3,5	;RP0=0, select bank0
   573  011D  1303               	bcf	3,6	;RP1=0, select bank0
   574  011E  00B9               	movwf	??_main
   575  011F  0839               	movf	??_main,w
   576  0120  1683               	bsf	3,5	;RP0=1, select bank1
   577  0121  1303               	bcf	3,6	;RP1=0, select bank1
   578  0122  0587               	andwf	7,f	;volatile
   579                           
   580                           ;main.c: 131: TRISB &= ~((1<<3)|(1<<2));
   581  0123  30F3               	movlw	243
   582  0124  1283               	bcf	3,5	;RP0=0, select bank0
   583  0125  1303               	bcf	3,6	;RP1=0, select bank0
   584  0126  00B9               	movwf	??_main
   585  0127  0839               	movf	??_main,w
   586  0128  1683               	bsf	3,5	;RP0=1, select bank1
   587  0129  1303               	bcf	3,6	;RP1=0, select bank1
   588  012A  0586               	andwf	6,f	;volatile
   589                           
   590                           ;main.c: 134: init_sensor(&levelSensors[0]);
   591  012B  3024               	movlw	(low (_levelSensors| 0))& (0+255)
   592  012C  120A  118A  238A  120A  118A  	fcall	_init_sensor
   593                           
   594                           ;main.c: 135: init_sensor(&levelSensors[1]);
   595  0131  3029               	movlw	(low ((_levelSensors| 0+5)))& (0+255)
   596  0132  120A  118A  238A  120A  118A  	fcall	_init_sensor
   597                           
   598                           ;main.c: 139: timer0_init();
   599  0137  120A  118A  2407  120A  118A  	fcall	_timer0_init
   600                           
   601                           ;main.c: 140: timer1_init();
   602  013C  120A  118A  2428  120A  118A  	fcall	_timer1_init
   603                           
   604                           ;main.c: 141: timer2_init();
   605  0141  120A  118A  23FE  120A  118A  	fcall	_timer2_init
   606                           
   607                           ;main.c: 142: adc_init_CH0();
   608  0146  120A  118A  23CB  120A  118A  	fcall	_adc_init_CH0
   609                           
   610                           ;main.c: 144: PORTC |= (1<<2);
   611  014B  1283               	bcf	3,5	;RP0=0, select bank0
   612  014C  1303               	bcf	3,6	;RP1=0, select bank0
   613  014D  1507               	bsf	7,2	;volatile
   614                           
   615                           ;main.c: 145: PORTB &= ~((1<<2)|(1<<3));
   616  014E  30F3               	movlw	243
   617  014F  00B9               	movwf	??_main
   618  0150  0839               	movf	??_main,w
   619  0151  0586               	andwf	6,f	;volatile
   620                           
   621                           ;main.c: 147: timer0_start();
   622  0152  120A  118A  242E  120A  118A  	fcall	_timer0_start
   623                           
   624                           ;main.c: 148: timer2_start();
   625  0157  120A  118A  23F5  120A  118A  	fcall	_timer2_start
   626  015C                     l1304:	
   627                           ;main.c: 151: while(1)
   628                           
   629                           
   630                           ;main.c: 152: {
   631                           ;main.c: 153: levelSensors[0].sensorRead = (PORTB & (1<<4));
   632  015C  1283               	bcf	3,5	;RP0=0, select bank0
   633  015D  1303               	bcf	3,6	;RP1=0, select bank0
   634  015E  0806               	movf	6,w	;volatile
   635  015F  3910               	andlw	16
   636  0160  00B9               	movwf	??_main
   637  0161  0839               	movf	??_main,w
   638  0162  00A5               	movwf	_levelSensors+1	;volatile
   639                           
   640                           ;main.c: 154: levelSensors[1].sensorRead = (PORTB & (1<<5));
   641  0163  0806               	movf	6,w	;volatile
   642  0164  3920               	andlw	32
   643  0165  00B9               	movwf	??_main
   644  0166  0839               	movf	??_main,w
   645  0167  00AA               	movwf	_levelSensors+6	;volatile
   646                           
   647                           ;main.c: 156: for(i = 0; i < 2;i++)
   648  0168  01BE               	clrf	main@i
   649  0169  3002               	movlw	2
   650  016A  023E               	subwf	main@i,w
   651  016B  1803               	btfsc	3,0
   652  016C  29AF               	goto	l1322
   653  016D                     l1312:	
   654                           
   655                           ;main.c: 157: {
   656                           ;main.c: 158: checkTankStatus(&levelSensors[i]);
   657  016D  3005               	movlw	5
   658  016E  00B9               	movwf	??_main
   659  016F  0839               	movf	??_main,w
   660  0170  00B1               	movwf	___bmul@multiplicand
   661  0171  083E               	movf	main@i,w
   662  0172  120A  118A  23B8  120A  118A  	fcall	___bmul
   663  0177  3E24               	addlw	(low (_levelSensors| 0))& (0+255)
   664  0178  120A  118A  23A2  120A  118A  	fcall	_checkTankStatus
   665                           
   666                           ;main.c: 160: checkSensorState(&levelSensors[i]);
   667  017D  3005               	movlw	5
   668  017E  1283               	bcf	3,5	;RP0=0, select bank0
   669  017F  1303               	bcf	3,6	;RP1=0, select bank0
   670  0180  00B9               	movwf	??_main
   671  0181  0839               	movf	??_main,w
   672  0182  00B1               	movwf	___bmul@multiplicand
   673  0183  083E               	movf	main@i,w
   674  0184  120A  118A  23B8  120A  118A  	fcall	___bmul
   675  0189  3E24               	addlw	(low (_levelSensors| 0))& (0+255)
   676  018A  120A  118A  2021  120A  118A  	fcall	_checkSensorState
   677                           
   678                           ;main.c: 162: checkAlarmState(&levelSensors[i], &theAlarm);
   679  018F  302E               	movlw	(low (_theAlarm| 0))& (0+255)
   680  0190  1283               	bcf	3,5	;RP0=0, select bank0
   681  0191  1303               	bcf	3,6	;RP1=0, select bank0
   682  0192  00B9               	movwf	??_main
   683  0193  0839               	movf	??_main,w
   684  0194  00B5               	movwf	checkAlarmState@theAlarm
   685  0195  3005               	movlw	5
   686  0196  00BA               	movwf	??_main+1
   687  0197  083A               	movf	??_main+1,w
   688  0198  00B1               	movwf	___bmul@multiplicand
   689  0199  083E               	movf	main@i,w
   690  019A  120A  118A  23B8  120A  118A  	fcall	___bmul
   691  019F  3E24               	addlw	(low (_levelSensors| 0))& (0+255)
   692  01A0  120A  118A  2360  120A  118A  	fcall	_checkAlarmState
   693  01A5  3001               	movlw	1
   694  01A6  1283               	bcf	3,5	;RP0=0, select bank0
   695  01A7  1303               	bcf	3,6	;RP1=0, select bank0
   696  01A8  00B9               	movwf	??_main
   697  01A9  0839               	movf	??_main,w
   698  01AA  07BE               	addwf	main@i,f
   699  01AB  3002               	movlw	2
   700  01AC  023E               	subwf	main@i,w
   701  01AD  1C03               	skipc
   702  01AE  296D               	goto	l1312
   703  01AF                     l1322:	
   704                           
   705                           ;main.c: 163: }
   706                           ;main.c: 175: blinkLed(&(levelSensors[0].LEVEL_STATE), &(levelSensors[1].LEVEL_STATE), &
      +                          (theAlarm.ALARM_STATE), &blinkState);
   707  01AF  3029               	movlw	(low ((_levelSensors| 0+5)))& (0+255)
   708  01B0  00B9               	movwf	??_main
   709  01B1  0839               	movf	??_main,w
   710  01B2  00B1               	movwf	blinkLed@stateTwo
   711  01B3  302E               	movlw	(low (_theAlarm| 0))& (0+255)
   712  01B4  00BA               	movwf	??_main+1
   713  01B5  083A               	movf	??_main+1,w
   714  01B6  00B2               	movwf	blinkLed@almState
   715  01B7  307C               	movlw	(low (_blinkState| 0))& (0+255)
   716  01B8  00BB               	movwf	??_main+2
   717  01B9  083B               	movf	??_main+2,w
   718  01BA  00B3               	movwf	blinkLed@blinkState
   719  01BB  3024               	movlw	(low (_levelSensors| 0))& (0+255)
   720  01BC  120A  118A  22DD  120A  118A  	fcall	_blinkLed
   721  01C1  295C               	goto	l1304
   722  01C2                     l1324:	
   723                           ;main.c: 177: }
   724                           ;main.c: 182: while(1)
   725                           
   726                           
   727                           ;main.c: 183: {
   728                           ;main.c: 184: PORTC^=(1<<2);
   729  01C2  3004               	movlw	4
   730  01C3  1283               	bcf	3,5	;RP0=0, select bank0
   731  01C4  1303               	bcf	3,6	;RP1=0, select bank0
   732  01C5  00B9               	movwf	??_main
   733  01C6  0839               	movf	??_main,w
   734  01C7  0687               	xorwf	7,f	;volatile
   735                           
   736                           ;main.c: 185: for(int i=0;i<10000;i++);
   737  01C8  01BC               	clrf	main@i_138
   738  01C9  01BD               	clrf	main@i_138+1
   739  01CA                     L1:	
   740  01CA  083D               	movf	main@i_138+1,w
   741  01CB  3A80               	xorlw	128
   742  01CC  00FF               	movwf	127
   743  01CD  30A7               	movlw	167
   744  01CE  027F               	subwf	127,w
   745  01CF  1D03               	skipz
   746  01D0  29D3               	goto	u975
   747  01D1  3010               	movlw	16
   748  01D2  023C               	subwf	main@i_138,w
   749  01D3                     u975:	
   750  01D3  1803               	btfsc	3,0
   751  01D4  29C2               	goto	l1324
   752  01D5  3001               	movlw	1
   753  01D6  1283               	bcf	3,5	;RP0=0, select bank0
   754  01D7  1303               	bcf	3,6	;RP1=0, select bank0
   755  01D8  07BC               	addwf	main@i_138,f
   756  01D9  1803               	skipnc
   757  01DA  0ABD               	incf	main@i_138+1,f
   758  01DB  3000               	movlw	0
   759  01DC  07BD               	addwf	main@i_138+1,f
   760  01DD  29CA               	goto	L1
   761  01DE                     __end_of_main:	
   762                           ;main.c: 187: }
   763                           ;main.c: 188: return (0);
   764                           ;	Return value of _main is never used
   765                           
   766                           
   767                           	psect	text1
   768  03F5                     __ptext1:	
   769 ;; *************** function _timer2_start *****************
   770 ;; Defined at:
   771 ;;		line 162 in file "util.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;		None
   774 ;; Auto vars:     Size  Location     Type
   775 ;;		None
   776 ;; Return value:  Size  Location     Type
   777 ;;		None               void
   778 ;; Registers used:
   779 ;;		None
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   785 ;;      Params:         0       0       0       0       0
   786 ;;      Locals:         0       0       0       0       0
   787 ;;      Temps:          0       0       0       0       0
   788 ;;      Totals:         0       0       0       0       0
   789 ;;Total ram usage:        0 bytes
   790 ;; Hardware stack levels used:    1
   791 ;; Hardware stack levels required when called:    2
   792 ;; This function calls:
   793 ;;		Nothing
   794 ;; This function is called by:
   795 ;;		_main
   796 ;; This function uses a non-reentrant model
   797 ;;
   798                           
   799                           
   800                           ;psect for function _timer2_start
   801  03F5                     _timer2_start:	
   802                           
   803                           ;util.c: 163: PIE1bits.TMR2IE = 1;
   804                           
   805                           ;incstack = 0
   806                           ; Regs used in _timer2_start: []
   807  03F5  1683               	bsf	3,5	;RP0=1, select bank1
   808  03F6  1303               	bcf	3,6	;RP1=0, select bank1
   809  03F7  148C               	bsf	12,1	;volatile
   810                           
   811                           ;util.c: 164: T2CONbits.TMR2ON = 1;
   812  03F8  1283               	bcf	3,5	;RP0=0, select bank0
   813  03F9  1303               	bcf	3,6	;RP1=0, select bank0
   814  03FA  1512               	bsf	18,2	;volatile
   815                           
   816                           ;util.c: 165: INTCONbits.GIE = 1;
   817  03FB  178B               	bsf	11,7	;volatile
   818                           
   819                           ;util.c: 166: INTCONbits.PEIE = 1;
   820  03FC  170B               	bsf	11,6	;volatile
   821  03FD  0008               	return
   822  03FE                     __end_of_timer2_start:	
   823                           
   824                           	psect	text2
   825  03FE                     __ptext2:	
   826 ;; *************** function _timer2_init *****************
   827 ;; Defined at:
   828 ;;		line 157 in file "util.c"
   829 ;; Parameters:    Size  Location     Type
   830 ;;		None
   831 ;; Auto vars:     Size  Location     Type
   832 ;;		None
   833 ;; Return value:  Size  Location     Type
   834 ;;		None               void
   835 ;; Registers used:
   836 ;;		wreg, status,2, status,0
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   842 ;;      Params:         0       0       0       0       0
   843 ;;      Locals:         0       0       0       0       0
   844 ;;      Temps:          0       0       0       0       0
   845 ;;      Totals:         0       0       0       0       0
   846 ;;Total ram usage:        0 bytes
   847 ;; Hardware stack levels used:    1
   848 ;; Hardware stack levels required when called:    2
   849 ;; This function calls:
   850 ;;		Nothing
   851 ;; This function is called by:
   852 ;;		_main
   853 ;; This function uses a non-reentrant model
   854 ;;
   855                           
   856                           
   857                           ;psect for function _timer2_init
   858  03FE                     _timer2_init:	
   859                           
   860                           ;util.c: 158: T2CONbits.T2CKPS = 0x02;
   861                           
   862                           ;incstack = 0
   863                           ; Regs used in _timer2_init: [wreg+status,2+status,0]
   864  03FE  1283               	bcf	3,5	;RP0=0, select bank0
   865  03FF  1303               	bcf	3,6	;RP1=0, select bank0
   866  0400  0812               	movf	18,w	;volatile
   867  0401  39FC               	andlw	-4
   868  0402  3802               	iorlw	2
   869  0403  0092               	movwf	18	;volatile
   870                           
   871                           ;util.c: 159: T2CONbits.TOUTPS = 0x0F;
   872  0404  3078               	movlw	120
   873  0405  0492               	iorwf	18,f	;volatile
   874  0406  0008               	return
   875  0407                     __end_of_timer2_init:	
   876                           
   877                           	psect	text3
   878  0428                     __ptext3:	
   879 ;; *************** function _timer1_init *****************
   880 ;; Defined at:
   881 ;;		line 128 in file "util.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;		None
   886 ;; Return value:  Size  Location     Type
   887 ;;		None               void
   888 ;; Registers used:
   889 ;;		wreg, status,2, status,0
   890 ;; Tracked objects:
   891 ;;		On entry : 0/0
   892 ;;		On exit  : 0/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   895 ;;      Params:         0       0       0       0       0
   896 ;;      Locals:         0       0       0       0       0
   897 ;;      Temps:          0       0       0       0       0
   898 ;;      Totals:         0       0       0       0       0
   899 ;;Total ram usage:        0 bytes
   900 ;; Hardware stack levels used:    1
   901 ;; Hardware stack levels required when called:    2
   902 ;; This function calls:
   903 ;;		Nothing
   904 ;; This function is called by:
   905 ;;		_main
   906 ;; This function uses a non-reentrant model
   907 ;;
   908                           
   909                           
   910                           ;psect for function _timer1_init
   911  0428                     _timer1_init:	
   912                           
   913                           ;util.c: 134: T1CONbits.T1CKPS = 0x03;
   914                           
   915                           ;incstack = 0
   916                           ; Regs used in _timer1_init: [wreg+status,2+status,0]
   917  0428  3030               	movlw	48
   918  0429  1283               	bcf	3,5	;RP0=0, select bank0
   919  042A  1303               	bcf	3,6	;RP1=0, select bank0
   920  042B  0490               	iorwf	16,f	;volatile
   921                           
   922                           ;util.c: 135: T1CONbits.TMR1CS = 0;
   923  042C  1090               	bcf	16,1	;volatile
   924  042D  0008               	return
   925  042E                     __end_of_timer1_init:	
   926                           
   927                           	psect	text4
   928  042E                     __ptext4:	
   929 ;; *************** function _timer0_start *****************
   930 ;; Defined at:
   931 ;;		line 182 in file "util.c"
   932 ;; Parameters:    Size  Location     Type
   933 ;;		None
   934 ;; Auto vars:     Size  Location     Type
   935 ;;		None
   936 ;; Return value:  Size  Location     Type
   937 ;;		None               void
   938 ;; Registers used:
   939 ;;		None
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   945 ;;      Params:         0       0       0       0       0
   946 ;;      Locals:         0       0       0       0       0
   947 ;;      Temps:          0       0       0       0       0
   948 ;;      Totals:         0       0       0       0       0
   949 ;;Total ram usage:        0 bytes
   950 ;; Hardware stack levels used:    1
   951 ;; Hardware stack levels required when called:    2
   952 ;; This function calls:
   953 ;;		Nothing
   954 ;; This function is called by:
   955 ;;		_main
   956 ;; This function uses a non-reentrant model
   957 ;;
   958                           
   959                           
   960                           ;psect for function _timer0_start
   961  042E                     _timer0_start:	
   962                           
   963                           ;util.c: 183: INTCONbits.TMR0IE = 1;
   964                           
   965                           ;incstack = 0
   966                           ; Regs used in _timer0_start: []
   967  042E  168B               	bsf	11,5	;volatile
   968                           
   969                           ;util.c: 184: INTCONbits.GIE = 1;
   970  042F  178B               	bsf	11,7	;volatile
   971                           
   972                           ;util.c: 185: INTCONbits.PEIE = 1;
   973  0430  170B               	bsf	11,6	;volatile
   974  0431  0008               	return
   975  0432                     __end_of_timer0_start:	
   976                           
   977                           	psect	text5
   978  0407                     __ptext5:	
   979 ;; *************** function _timer0_init *****************
   980 ;; Defined at:
   981 ;;		line 175 in file "util.c"
   982 ;; Parameters:    Size  Location     Type
   983 ;;		None
   984 ;; Auto vars:     Size  Location     Type
   985 ;;		None
   986 ;; Return value:  Size  Location     Type
   987 ;;		None               void
   988 ;; Registers used:
   989 ;;		wreg, status,2, status,0
   990 ;; Tracked objects:
   991 ;;		On entry : 0/0
   992 ;;		On exit  : 0/0
   993 ;;		Unchanged: 0/0
   994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   995 ;;      Params:         0       0       0       0       0
   996 ;;      Locals:         0       0       0       0       0
   997 ;;      Temps:          0       0       0       0       0
   998 ;;      Totals:         0       0       0       0       0
   999 ;;Total ram usage:        0 bytes
  1000 ;; Hardware stack levels used:    1
  1001 ;; Hardware stack levels required when called:    2
  1002 ;; This function calls:
  1003 ;;		Nothing
  1004 ;; This function is called by:
  1005 ;;		_main
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           
  1010                           ;psect for function _timer0_init
  1011  0407                     _timer0_init:	
  1012                           
  1013                           ;util.c: 176: OPTION_REGbits.T0CS = 0;
  1014                           
  1015                           ;incstack = 0
  1016                           ; Regs used in _timer0_init: [wreg+status,2+status,0]
  1017  0407  1683               	bsf	3,5	;RP0=1, select bank1
  1018  0408  1303               	bcf	3,6	;RP1=0, select bank1
  1019  0409  1281               	bcf	1,5	;volatile
  1020                           
  1021                           ;util.c: 177: OPTION_REGbits.PSA = 0;
  1022  040A  1181               	bcf	1,3	;volatile
  1023                           
  1024                           ;util.c: 178: OPTION_REGbits.PS = 0x04;
  1025  040B  0801               	movf	1,w	;volatile
  1026  040C  39F8               	andlw	-8
  1027  040D  3804               	iorlw	4
  1028  040E  0081               	movwf	1	;volatile
  1029  040F  0008               	return
  1030  0410                     __end_of_timer0_init:	
  1031                           
  1032                           	psect	text6
  1033  038A                     __ptext6:	
  1034 ;; *************** function _init_sensor *****************
  1035 ;; Defined at:
  1036 ;;		line 95 in file "util.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;  theSensor_in    1    wreg     PTR volatile struct leve
  1039 ;;		 -> levelSensors(10), 
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;  theSensor_in    1    1[BANK0 ] PTR volatile struct leve
  1042 ;;		 -> levelSensors(10), 
  1043 ;; Return value:  Size  Location     Type
  1044 ;;		None               void
  1045 ;; Registers used:
  1046 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1047 ;; Tracked objects:
  1048 ;;		On entry : 0/0
  1049 ;;		On exit  : 0/0
  1050 ;;		Unchanged: 0/0
  1051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1052 ;;      Params:         0       0       0       0       0
  1053 ;;      Locals:         0       1       0       0       0
  1054 ;;      Temps:          0       1       0       0       0
  1055 ;;      Totals:         0       2       0       0       0
  1056 ;;Total ram usage:        2 bytes
  1057 ;; Hardware stack levels used:    1
  1058 ;; Hardware stack levels required when called:    2
  1059 ;; This function calls:
  1060 ;;		Nothing
  1061 ;; This function is called by:
  1062 ;;		_main
  1063 ;; This function uses a non-reentrant model
  1064 ;;
  1065                           
  1066                           
  1067                           ;psect for function _init_sensor
  1068  038A                     _init_sensor:	
  1069                           
  1070                           ;incstack = 0
  1071                           ; Regs used in _init_sensor: [wreg-fsr0h+status,2+status,0]
  1072                           ;init_sensor@theSensor_init stored from wreg
  1073  038A  1283               	bcf	3,5	;RP0=0, select bank0
  1074  038B  1303               	bcf	3,6	;RP1=0, select bank0
  1075  038C  00B2               	movwf	init_sensor@theSensor_init
  1076                           
  1077                           ;util.c: 97: theSensor_init->counter = 0;
  1078  038D  0832               	movf	init_sensor@theSensor_init,w
  1079  038E  3E03               	addlw	3
  1080  038F  0084               	movwf	4
  1081  0390  1383               	bcf	3,7	;select IRP bank0
  1082  0391  0180               	clrf	0
  1083  0392  0A84               	incf	4,f
  1084  0393  0180               	clrf	0
  1085                           
  1086                           ;util.c: 98: theSensor_init->LEVEL_STATE = INITIAL_STATE;
  1087  0394  0832               	movf	init_sensor@theSensor_init,w
  1088  0395  0084               	movwf	4
  1089  0396  0180               	clrf	0
  1090                           
  1091                           ;util.c: 99: theSensor_init->sensorRead = 0;
  1092  0397  0A32               	incf	init_sensor@theSensor_init,w
  1093  0398  0084               	movwf	4
  1094  0399  0180               	clrf	0
  1095                           
  1096                           ;util.c: 100: theSensor_init->TANK_STATE = TANK_IS_EMPTY;
  1097  039A  3001               	movlw	1
  1098  039B  00B1               	movwf	??_init_sensor
  1099  039C  0832               	movf	init_sensor@theSensor_init,w
  1100  039D  3E02               	addlw	2
  1101  039E  0084               	movwf	4
  1102  039F  0831               	movf	??_init_sensor,w
  1103  03A0  0080               	movwf	0
  1104  03A1  0008               	return
  1105  03A2                     __end_of_init_sensor:	
  1106                           
  1107                           	psect	text7
  1108  03A2                     __ptext7:	
  1109 ;; *************** function _checkTankStatus *****************
  1110 ;; Defined at:
  1111 ;;		line 4 in file "util.c"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;  theSensor       1    wreg     PTR volatile struct leve
  1114 ;;		 -> levelSensors(10), 
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;  theSensor       1    1[BANK0 ] PTR volatile struct leve
  1117 ;;		 -> levelSensors(10), 
  1118 ;; Return value:  Size  Location     Type
  1119 ;;		None               void
  1120 ;; Registers used:
  1121 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1127 ;;      Params:         0       0       0       0       0
  1128 ;;      Locals:         0       1       0       0       0
  1129 ;;      Temps:          0       1       0       0       0
  1130 ;;      Totals:         0       2       0       0       0
  1131 ;;Total ram usage:        2 bytes
  1132 ;; Hardware stack levels used:    1
  1133 ;; Hardware stack levels required when called:    2
  1134 ;; This function calls:
  1135 ;;		Nothing
  1136 ;; This function is called by:
  1137 ;;		_main
  1138 ;; This function uses a non-reentrant model
  1139 ;;
  1140                           
  1141                           
  1142                           ;psect for function _checkTankStatus
  1143  03A2                     _checkTankStatus:	
  1144                           
  1145                           ;incstack = 0
  1146                           ; Regs used in _checkTankStatus: [wreg-fsr0h+status,2+status,0]
  1147                           ;checkTankStatus@theSensor stored from wreg
  1148  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  1149  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  1150  03A4  00B2               	movwf	checkTankStatus@theSensor
  1151                           
  1152                           ;util.c: 8: if (theSensor->sensorRead > 0)
  1153  03A5  0A32               	incf	checkTankStatus@theSensor,w
  1154  03A6  0084               	movwf	4
  1155  03A7  1383               	bcf	3,7	;select IRP bank0
  1156  03A8  0800               	movf	0,w
  1157  03A9  1903               	btfsc	3,2
  1158  03AA  2BB3               	goto	l1074
  1159                           
  1160                           ;util.c: 9: {
  1161                           ;util.c: 10: theSensor->TANK_STATE = TANK_IS_EMPTY;
  1162  03AB  3001               	movlw	1
  1163  03AC  00B1               	movwf	??_checkTankStatus
  1164  03AD  0832               	movf	checkTankStatus@theSensor,w
  1165  03AE  3E02               	addlw	2
  1166  03AF  0084               	movwf	4
  1167  03B0  0831               	movf	??_checkTankStatus,w
  1168  03B1  0080               	movwf	0
  1169                           
  1170                           ;util.c: 12: }else
  1171  03B2  0008               	return
  1172  03B3                     l1074:	
  1173                           
  1174                           ;util.c: 13: {
  1175                           ;util.c: 14: theSensor->TANK_STATE = TANK_IS_FULL;
  1176  03B3  0832               	movf	checkTankStatus@theSensor,w
  1177  03B4  3E02               	addlw	2
  1178  03B5  0084               	movwf	4
  1179  03B6  0180               	clrf	0
  1180  03B7  0008               	return
  1181  03B8                     __end_of_checkTankStatus:	
  1182                           
  1183                           	psect	text8
  1184  0021                     __ptext8:	
  1185 ;; *************** function _checkSensorState *****************
  1186 ;; Defined at:
  1187 ;;		line 20 in file "util.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;  theSensor       1    wreg     PTR volatile struct leve
  1190 ;;		 -> levelSensors(10), 
  1191 ;; Auto vars:     Size  Location     Type
  1192 ;;  theSensor       1    5[BANK0 ] PTR volatile struct leve
  1193 ;;		 -> levelSensors(10), 
  1194 ;; Return value:  Size  Location     Type
  1195 ;;		None               void
  1196 ;; Registers used:
  1197 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1203 ;;      Params:         0       0       0       0       0
  1204 ;;      Locals:         0       1       0       0       0
  1205 ;;      Temps:          0       5       0       0       0
  1206 ;;      Totals:         0       6       0       0       0
  1207 ;;Total ram usage:        6 bytes
  1208 ;; Hardware stack levels used:    1
  1209 ;; Hardware stack levels required when called:    2
  1210 ;; This function calls:
  1211 ;;		Nothing
  1212 ;; This function is called by:
  1213 ;;		_main
  1214 ;; This function uses a non-reentrant model
  1215 ;;
  1216                           
  1217                           
  1218                           ;psect for function _checkSensorState
  1219  0021                     _checkSensorState:	
  1220                           
  1221                           ;incstack = 0
  1222                           ; Regs used in _checkSensorState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1223                           ;checkSensorState@theSensor stored from wreg
  1224  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1225  0022  1303               	bcf	3,6	;RP1=0, select bank0
  1226  0023  00B6               	movwf	checkSensorState@theSensor
  1227                           
  1228                           ;util.c: 22: switch(theSensor->LEVEL_STATE){
  1229  0024  28F4               	goto	l1124
  1230  0025                     l1078:	
  1231                           ;util.c: 23: case INITIAL_STATE :
  1232                           
  1233                           
  1234                           ;util.c: 26: if(theSensor->TANK_STATE == TANK_IS_EMPTY)
  1235  0025  0836               	movf	checkSensorState@theSensor,w
  1236  0026  3E02               	addlw	2
  1237  0027  0084               	movwf	4
  1238  0028  1383               	bcf	3,7	;select IRP bank0
  1239  0029  0300               	decf	0,w
  1240  002A  1D03               	btfss	3,2
  1241  002B  2833               	goto	l1082
  1242                           
  1243                           ;util.c: 27: {
  1244                           ;util.c: 28: theSensor->LEVEL_STATE = TRANSITION_TO_EMPTY;
  1245  002C  3001               	movlw	1
  1246  002D  00B1               	movwf	??_checkSensorState
  1247  002E  0836               	movf	checkSensorState@theSensor,w
  1248  002F  0084               	movwf	4
  1249  0030  0831               	movf	??_checkSensorState,w
  1250  0031  0080               	movwf	0
  1251                           
  1252                           ;util.c: 29: }else
  1253  0032  0008               	return
  1254  0033                     l1082:	
  1255                           
  1256                           ;util.c: 30: {
  1257                           ;util.c: 31: theSensor->counter = 0;
  1258  0033  0836               	movf	checkSensorState@theSensor,w
  1259  0034  3E03               	addlw	3
  1260  0035  0084               	movwf	4
  1261  0036  0180               	clrf	0
  1262  0037  0A84               	incf	4,f
  1263  0038  0180               	clrf	0
  1264                           
  1265                           ;util.c: 32: }
  1266                           ;util.c: 33: break;
  1267  0039  0008               	return
  1268  003A                     l1084:	
  1269                           ;util.c: 35: case TRANSITION_TO_EMPTY :
  1270                           
  1271                           
  1272                           ;util.c: 39: if(theSensor->TANK_STATE == TANK_IS_FULL)
  1273  003A  0836               	movf	checkSensorState@theSensor,w
  1274  003B  3E02               	addlw	2
  1275  003C  0084               	movwf	4
  1276  003D  0800               	movf	0,w
  1277  003E  1D03               	btfss	3,2
  1278  003F  284A               	goto	l1090
  1279                           
  1280                           ;util.c: 40: {
  1281                           ;util.c: 41: theSensor->counter = 0;
  1282  0040  0836               	movf	checkSensorState@theSensor,w
  1283  0041  3E03               	addlw	3
  1284  0042  0084               	movwf	4
  1285  0043  0180               	clrf	0
  1286  0044  0A84               	incf	4,f
  1287  0045  0180               	clrf	0
  1288                           
  1289                           ;util.c: 42: theSensor->LEVEL_STATE = INITIAL_STATE;
  1290  0046  0836               	movf	checkSensorState@theSensor,w
  1291  0047  0084               	movwf	4
  1292  0048  0180               	clrf	0
  1293                           
  1294                           ;util.c: 44: }else if(theSensor->TANK_STATE == TANK_IS_EMPTY && theSensor->counter >= FI
      +                          LTERTMR_TO_EMPTY)
  1295  0049  0008               	return
  1296  004A                     l1090:	
  1297  004A  0836               	movf	checkSensorState@theSensor,w
  1298  004B  3E02               	addlw	2
  1299  004C  0084               	movwf	4
  1300  004D  0300               	decf	0,w
  1301  004E  1D03               	btfss	3,2
  1302  004F  0008               	return
  1303  0050  3001               	movlw	low (_FILTERTMR_TO_EMPTY-__stringbase)
  1304  0051  0084               	movwf	4
  1305  0052  120A  118A  23D7  120A  118A  	fcall	stringdir
  1306  0057  00B1               	movwf	??_checkSensorState
  1307  0058  120A  118A  23D7  120A  118A  	fcall	stringdir
  1308  005D  00B2               	movwf	??_checkSensorState+1
  1309  005E  0836               	movf	checkSensorState@theSensor,w
  1310  005F  3E03               	addlw	3
  1311  0060  0084               	movwf	4
  1312  0061  0800               	movf	0,w
  1313  0062  00B3               	movwf	??_checkSensorState+2
  1314  0063  0A84               	incf	4,f
  1315  0064  0800               	movf	0,w
  1316  0065  00B4               	movwf	??_checkSensorState+3
  1317  0066  0834               	movf	??_checkSensorState+3,w
  1318  0067  3A80               	xorlw	128
  1319  0068  00B5               	movwf	??_checkSensorState+4
  1320  0069  0832               	movf	??_checkSensorState+1,w
  1321  006A  3A80               	xorlw	128
  1322  006B  0235               	subwf	??_checkSensorState+4,w
  1323  006C  1D03               	skipz
  1324  006D  2870               	goto	u555
  1325  006E  0831               	movf	??_checkSensorState,w
  1326  006F  0233               	subwf	??_checkSensorState+2,w
  1327  0070                     u555:	
  1328  0070  1C03               	skipc
  1329  0071  0008               	return
  1330                           
  1331                           ;util.c: 45: {
  1332                           ;util.c: 46: theSensor->counter = 0;
  1333  0072  1283               	bcf	3,5	;RP0=0, select bank0
  1334  0073  1303               	bcf	3,6	;RP1=0, select bank0
  1335  0074  0836               	movf	checkSensorState@theSensor,w
  1336  0075  3E03               	addlw	3
  1337  0076  0084               	movwf	4
  1338  0077  1383               	bcf	3,7	;select IRP bank0
  1339  0078  0180               	clrf	0
  1340  0079  0A84               	incf	4,f
  1341  007A  0180               	clrf	0
  1342                           
  1343                           ;util.c: 47: theSensor->LEVEL_STATE = EMPTY;
  1344  007B  3002               	movlw	2
  1345  007C  00B1               	movwf	??_checkSensorState
  1346  007D  0836               	movf	checkSensorState@theSensor,w
  1347  007E  0084               	movwf	4
  1348  007F  0831               	movf	??_checkSensorState,w
  1349  0080  0080               	movwf	0
  1350                           
  1351                           ;util.c: 49: }
  1352                           ;util.c: 50: break;
  1353  0081  0008               	return
  1354  0082                     l1098:	
  1355                           ;util.c: 52: case EMPTY:
  1356                           
  1357                           
  1358                           ;util.c: 54: if(theSensor->TANK_STATE == TANK_IS_FULL && theSensor->counter == 0){
  1359  0082  0836               	movf	checkSensorState@theSensor,w
  1360  0083  3E02               	addlw	2
  1361  0084  0084               	movwf	4
  1362  0085  0800               	movf	0,w
  1363  0086  1D03               	btfss	3,2
  1364  0087  289B               	goto	l1104
  1365  0088  0836               	movf	checkSensorState@theSensor,w
  1366  0089  3E03               	addlw	3
  1367  008A  0084               	movwf	4
  1368  008B  0800               	movf	0,w
  1369  008C  00B1               	movwf	??_checkSensorState
  1370  008D  0A84               	incf	4,f
  1371  008E  0800               	movf	0,w
  1372  008F  00B2               	movwf	??_checkSensorState+1
  1373  0090  0831               	movf	??_checkSensorState,w
  1374  0091  0432               	iorwf	??_checkSensorState+1,w
  1375  0092  1D03               	btfss	3,2
  1376  0093  289B               	goto	l1104
  1377                           
  1378                           ;util.c: 55: theSensor->LEVEL_STATE = TRANSITION_TO_FULL;
  1379  0094  3003               	movlw	3
  1380  0095  00B1               	movwf	??_checkSensorState
  1381  0096  0836               	movf	checkSensorState@theSensor,w
  1382  0097  0084               	movwf	4
  1383  0098  0831               	movf	??_checkSensorState,w
  1384  0099  0080               	movwf	0
  1385                           
  1386                           ;util.c: 57: }else{
  1387  009A  0008               	return
  1388  009B                     l1104:	
  1389                           
  1390                           ;util.c: 58: theSensor->counter = 0;
  1391  009B  0836               	movf	checkSensorState@theSensor,w
  1392  009C  3E03               	addlw	3
  1393  009D  0084               	movwf	4
  1394  009E  0180               	clrf	0
  1395  009F  0A84               	incf	4,f
  1396  00A0  0180               	clrf	0
  1397                           
  1398                           ;util.c: 60: }
  1399                           ;util.c: 61: break;
  1400  00A1  0008               	return
  1401  00A2                     l1106:	
  1402                           ;util.c: 63: case TRANSITION_TO_FULL:
  1403                           
  1404                           
  1405                           ;util.c: 65: if(theSensor->TANK_STATE == TANK_IS_EMPTY){
  1406  00A2  0836               	movf	checkSensorState@theSensor,w
  1407  00A3  3E02               	addlw	2
  1408  00A4  0084               	movwf	4
  1409  00A5  0300               	decf	0,w
  1410  00A6  1D03               	btfss	3,2
  1411  00A7  28B5               	goto	l1112
  1412                           
  1413                           ;util.c: 66: theSensor->counter = 0;
  1414  00A8  0836               	movf	checkSensorState@theSensor,w
  1415  00A9  3E03               	addlw	3
  1416  00AA  0084               	movwf	4
  1417  00AB  0180               	clrf	0
  1418  00AC  0A84               	incf	4,f
  1419  00AD  0180               	clrf	0
  1420                           
  1421                           ;util.c: 67: theSensor->LEVEL_STATE = EMPTY;
  1422  00AE  3002               	movlw	2
  1423  00AF  00B1               	movwf	??_checkSensorState
  1424  00B0  0836               	movf	checkSensorState@theSensor,w
  1425  00B1  0084               	movwf	4
  1426  00B2  0831               	movf	??_checkSensorState,w
  1427  00B3  0080               	movwf	0
  1428                           
  1429                           ;util.c: 70: }else if(theSensor->TANK_STATE == TANK_IS_FULL && theSensor->counter > FILT
      +                          ERTMR_TO_FULL){
  1430  00B4  0008               	return
  1431  00B5                     l1112:	
  1432  00B5  0836               	movf	checkSensorState@theSensor,w
  1433  00B6  3E02               	addlw	2
  1434  00B7  0084               	movwf	4
  1435  00B8  0800               	movf	0,w
  1436  00B9  1D03               	btfss	3,2
  1437  00BA  0008               	return
  1438  00BB  0836               	movf	checkSensorState@theSensor,w
  1439  00BC  3E03               	addlw	3
  1440  00BD  0084               	movwf	4
  1441  00BE  0800               	movf	0,w
  1442  00BF  00B1               	movwf	??_checkSensorState
  1443  00C0  0A84               	incf	4,f
  1444  00C1  0800               	movf	0,w
  1445  00C2  00B2               	movwf	??_checkSensorState+1
  1446  00C3  3003               	movlw	low (_FILTERTMR_TO_FULL-__stringbase)
  1447  00C4  0084               	movwf	4
  1448  00C5  120A  118A  23D7  120A  118A  	fcall	stringdir
  1449  00CA  00B3               	movwf	??_checkSensorState+2
  1450  00CB  120A  118A  23D7  120A  118A  	fcall	stringdir
  1451  00D0  00B4               	movwf	??_checkSensorState+3
  1452  00D1  0834               	movf	??_checkSensorState+3,w
  1453  00D2  3A80               	xorlw	128
  1454  00D3  00B5               	movwf	??_checkSensorState+4
  1455  00D4  0832               	movf	??_checkSensorState+1,w
  1456  00D5  3A80               	xorlw	128
  1457  00D6  0235               	subwf	??_checkSensorState+4,w
  1458  00D7  1D03               	skipz
  1459  00D8  28DB               	goto	u605
  1460  00D9  0831               	movf	??_checkSensorState,w
  1461  00DA  0233               	subwf	??_checkSensorState+2,w
  1462  00DB                     u605:	
  1463  00DB  1803               	skipnc
  1464  00DC  0008               	return
  1465                           
  1466                           ;util.c: 72: theSensor->counter = 0;
  1467  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  1468  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  1469  00DF  0836               	movf	checkSensorState@theSensor,w
  1470  00E0  3E03               	addlw	3
  1471  00E1  0084               	movwf	4
  1472  00E2  1383               	bcf	3,7	;select IRP bank0
  1473  00E3  0180               	clrf	0
  1474  00E4  0A84               	incf	4,f
  1475  00E5  0180               	clrf	0
  1476                           
  1477                           ;util.c: 73: theSensor->LEVEL_STATE = TURN_ON_ALARM;
  1478  00E6  3004               	movlw	4
  1479  00E7  00B1               	movwf	??_checkSensorState
  1480  00E8  0836               	movf	checkSensorState@theSensor,w
  1481  00E9  0084               	movwf	4
  1482  00EA  0831               	movf	??_checkSensorState,w
  1483  00EB  0080               	movwf	0
  1484                           
  1485                           ;util.c: 75: }
  1486                           ;util.c: 76: break;
  1487  00EC  0008               	return
  1488  00ED                     l1120:	
  1489                           ;util.c: 79: case TURN_ON_ALARM :
  1490                           
  1491                           
  1492                           ;util.c: 82: theSensor->LEVEL_STATE = FINAL_STATE;
  1493  00ED  3005               	movlw	5
  1494  00EE  00B1               	movwf	??_checkSensorState
  1495  00EF  0836               	movf	checkSensorState@theSensor,w
  1496  00F0  0084               	movwf	4
  1497  00F1  0831               	movf	??_checkSensorState,w
  1498  00F2  0080               	movwf	0
  1499                           
  1500                           ;util.c: 89: }
  1501                           
  1502                           ;util.c: 88: break;
  1503                           
  1504                           ;util.c: 86: default:
  1505                           
  1506                           ;util.c: 85: case FINAL_STATE:
  1507                           
  1508                           ;util.c: 83: break;
  1509  00F3  0008               	return
  1510  00F4                     l1124:	
  1511  00F4  0836               	movf	checkSensorState@theSensor,w
  1512  00F5  0084               	movwf	4
  1513  00F6  1383               	bcf	3,7	;select IRP bank0
  1514  00F7  0800               	movf	0,w
  1515                           
  1516                           ; Switch size 1, requested type "space"
  1517                           ; Number of cases is 6, Range of values is 0 to 5
  1518                           ; switch strategies available:
  1519                           ; Name         Instructions Cycles
  1520                           ; simple_byte           19    10 (average)
  1521                           ; direct_byte           26     8 (fixed)
  1522                           ; jumptable            260     6 (fixed)
  1523                           ;	Chosen strategy is simple_byte
  1524  00F8  3A00               	xorlw	0	; case 0
  1525  00F9  1903               	skipnz
  1526  00FA  2825               	goto	l1078
  1527  00FB  3A01               	xorlw	1	; case 1
  1528  00FC  1903               	skipnz
  1529  00FD  283A               	goto	l1084
  1530  00FE  3A03               	xorlw	3	; case 2
  1531  00FF  1903               	skipnz
  1532  0100  2882               	goto	l1098
  1533  0101  3A01               	xorlw	1	; case 3
  1534  0102  1903               	skipnz
  1535  0103  28A2               	goto	l1106
  1536  0104  3A07               	xorlw	7	; case 4
  1537  0105  1903               	skipnz
  1538  0106  28ED               	goto	l1120
  1539  0107  3A01               	xorlw	1	; case 5
  1540  0108  1903               	skipnz
  1541  0109  290B               	goto	l152
  1542  010A  290B               	goto	l152
  1543  010B                     l152:	
  1544  010B  0008               	return
  1545  010C                     __end_of_checkSensorState:	
  1546                           
  1547                           	psect	text9
  1548  0360                     __ptext9:	
  1549 ;; *************** function _checkAlarmState *****************
  1550 ;; Defined at:
  1551 ;;		line 4 in file "alarm_source.c"
  1552 ;; Parameters:    Size  Location     Type
  1553 ;;  theSensor       1    wreg     PTR volatile struct leve
  1554 ;;		 -> levelSensors(10), 
  1555 ;;  theAlarm        1    4[BANK0 ] PTR volatile struct Alar
  1556 ;;		 -> theAlarm(3), 
  1557 ;; Auto vars:     Size  Location     Type
  1558 ;;  theSensor       1    7[BANK0 ] PTR volatile struct leve
  1559 ;;		 -> levelSensors(10), 
  1560 ;; Return value:  Size  Location     Type
  1561 ;;		None               void
  1562 ;; Registers used:
  1563 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1564 ;; Tracked objects:
  1565 ;;		On entry : 0/0
  1566 ;;		On exit  : 0/0
  1567 ;;		Unchanged: 0/0
  1568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1569 ;;      Params:         0       1       0       0       0
  1570 ;;      Locals:         0       1       0       0       0
  1571 ;;      Temps:          0       2       0       0       0
  1572 ;;      Totals:         0       4       0       0       0
  1573 ;;Total ram usage:        4 bytes
  1574 ;; Hardware stack levels used:    1
  1575 ;; Hardware stack levels required when called:    4
  1576 ;; This function calls:
  1577 ;;		_timer1_stop
  1578 ;;		_turnAlarmOn
  1579 ;; This function is called by:
  1580 ;;		_main
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           
  1585                           ;psect for function _checkAlarmState
  1586  0360                     _checkAlarmState:	
  1587                           
  1588                           ;incstack = 0
  1589                           ; Regs used in _checkAlarmState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1590                           ;checkAlarmState@theSensor stored from wreg
  1591  0360  1283               	bcf	3,5	;RP0=0, select bank0
  1592  0361  1303               	bcf	3,6	;RP1=0, select bank0
  1593  0362  00B8               	movwf	checkAlarmState@theSensor
  1594                           
  1595                           ;alarm_source.c: 6: if(theSensor->LEVEL_STATE == TURN_ON_ALARM)
  1596  0363  0838               	movf	checkAlarmState@theSensor,w
  1597  0364  0084               	movwf	4
  1598  0365  3004               	movlw	4
  1599  0366  1383               	bcf	3,7	;select IRP bank0
  1600  0367  0600               	xorwf	0,w
  1601  0368  1D03               	btfss	3,2
  1602  0369  2B70               	goto	l1130
  1603                           
  1604                           ;alarm_source.c: 7: {
  1605                           ;alarm_source.c: 8: turnAlarmOn(theAlarm);
  1606  036A  0835               	movf	checkAlarmState@theAlarm,w
  1607  036B  120A  118A  2321  120A  118A  	fcall	_turnAlarmOn
  1608  0370                     l1130:	
  1609                           
  1610                           ;alarm_source.c: 9: }
  1611                           ;alarm_source.c: 11: if(theAlarm->current_value > theAlarm->trigger_value)
  1612  0370  1283               	bcf	3,5	;RP0=0, select bank0
  1613  0371  1303               	bcf	3,6	;RP1=0, select bank0
  1614  0372  0A35               	incf	checkAlarmState@theAlarm,w
  1615  0373  0084               	movwf	4
  1616  0374  1383               	bcf	3,7	;select IRP bank0
  1617  0375  0800               	movf	0,w
  1618  0376  00B6               	movwf	??_checkAlarmState
  1619  0377  0835               	movf	checkAlarmState@theAlarm,w
  1620  0378  3E02               	addlw	2
  1621  0379  0084               	movwf	4
  1622  037A  0800               	movf	0,w
  1623  037B  00B7               	movwf	??_checkAlarmState+1
  1624  037C  0836               	movf	??_checkAlarmState,w
  1625  037D  0237               	subwf	??_checkAlarmState+1,w
  1626  037E  1803               	skipnc
  1627  037F  0008               	return
  1628                           
  1629                           ;alarm_source.c: 12: {
  1630                           ;alarm_source.c: 14: theAlarm->ALARM_STATE = ALARM_FINAL_STATE;
  1631  0380  3003               	movlw	3
  1632  0381  00B6               	movwf	??_checkAlarmState
  1633  0382  0835               	movf	checkAlarmState@theAlarm,w
  1634  0383  0084               	movwf	4
  1635  0384  0836               	movf	??_checkAlarmState,w
  1636  0385  0080               	movwf	0
  1637                           
  1638                           ;alarm_source.c: 15: timer1_stop();
  1639  0386  120A  118A  2418   	fcall	_timer1_stop
  1640  0389  0008               	return
  1641  038A                     __end_of_checkAlarmState:	
  1642                           
  1643                           	psect	text10
  1644  0321                     __ptext10:	
  1645 ;; *************** function _turnAlarmOn *****************
  1646 ;; Defined at:
  1647 ;;		line 21 in file "alarm_source.c"
  1648 ;; Parameters:    Size  Location     Type
  1649 ;;  theAlarm        1    wreg     PTR volatile struct Alar
  1650 ;;		 -> theAlarm(3), 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;  theAlarm        1    1[BANK0 ] PTR volatile struct Alar
  1653 ;;		 -> theAlarm(3), 
  1654 ;; Return value:  Size  Location     Type
  1655 ;;		None               void
  1656 ;; Registers used:
  1657 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1663 ;;      Params:         0       0       0       0       0
  1664 ;;      Locals:         0       1       0       0       0
  1665 ;;      Temps:          0       1       0       0       0
  1666 ;;      Totals:         0       2       0       0       0
  1667 ;;Total ram usage:        2 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    3
  1670 ;; This function calls:
  1671 ;;		_adc_start
  1672 ;;		_timer1_start
  1673 ;; This function is called by:
  1674 ;;		_checkAlarmState
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           
  1679                           ;psect for function _turnAlarmOn
  1680  0321                     _turnAlarmOn:	
  1681                           
  1682                           ;incstack = 0
  1683                           ; Regs used in _turnAlarmOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1684                           ;turnAlarmOn@theAlarm stored from wreg
  1685  0321  1283               	bcf	3,5	;RP0=0, select bank0
  1686  0322  1303               	bcf	3,6	;RP1=0, select bank0
  1687  0323  00B2               	movwf	turnAlarmOn@theAlarm
  1688                           
  1689                           ;alarm_source.c: 23: switch(theAlarm->ALARM_STATE)
  1690  0324  2B3E               	goto	l1038
  1691  0325                     l1028:	
  1692                           ;alarm_source.c: 24: {
  1693                           ;alarm_source.c: 25: case ALARM_OFF:
  1694                           
  1695                           
  1696                           ;alarm_source.c: 26: adc_start();
  1697  0325  120A  118A  23EB  120A  118A  	fcall	_adc_start
  1698                           
  1699                           ;alarm_source.c: 27: timer1_start();
  1700  032A  120A  118A  23E1  120A  118A  	fcall	_timer1_start
  1701                           
  1702                           ;alarm_source.c: 28: theAlarm->current_value = 0;
  1703  032F  1283               	bcf	3,5	;RP0=0, select bank0
  1704  0330  1303               	bcf	3,6	;RP1=0, select bank0
  1705  0331  0A32               	incf	turnAlarmOn@theAlarm,w
  1706  0332  0084               	movwf	4
  1707  0333  1383               	bcf	3,7	;select IRP bank0
  1708  0334  0180               	clrf	0
  1709                           
  1710                           ;alarm_source.c: 29: theAlarm->ALARM_STATE = ALARM_ON;
  1711  0335  3001               	movlw	1
  1712  0336  2B38               	goto	L2
  1713  0337                     l1034:	
  1714                           ;alarm_source.c: 32: case ALARM_DOUBLE_TIME:
  1715                           ;alarm_source.c: 33: default:
  1716                           
  1717                           ;alarm_source.c: 31: case ALARM_ON:
  1718                           
  1719                           ;alarm_source.c: 30: break;
  1720                           
  1721                           
  1722                           ;alarm_source.c: 34: theAlarm->ALARM_STATE = ALARM_DOUBLE_TIME;
  1723  0337  3002               	movlw	2
  1724  0338                     L2:	
  1725  0338  00B1               	movwf	??_turnAlarmOn
  1726  0339  0832               	movf	turnAlarmOn@theAlarm,w
  1727  033A  0084               	movwf	4
  1728  033B  0831               	movf	??_turnAlarmOn,w
  1729  033C  0080               	movwf	0
  1730                           
  1731                           ;alarm_source.c: 36: }
  1732                           
  1733                           ;alarm_source.c: 35: break;
  1734  033D  2B4C               	goto	l1040
  1735  033E                     l1038:	
  1736  033E  0832               	movf	turnAlarmOn@theAlarm,w
  1737  033F  0084               	movwf	4
  1738  0340  1383               	bcf	3,7	;select IRP bank0
  1739  0341  0800               	movf	0,w
  1740                           
  1741                           ; Switch size 1, requested type "space"
  1742                           ; Number of cases is 3, Range of values is 0 to 2
  1743                           ; switch strategies available:
  1744                           ; Name         Instructions Cycles
  1745                           ; simple_byte           10     6 (average)
  1746                           ; direct_byte           17     8 (fixed)
  1747                           ; jumptable            260     6 (fixed)
  1748                           ;	Chosen strategy is simple_byte
  1749  0342  3A00               	xorlw	0	; case 0
  1750  0343  1903               	skipnz
  1751  0344  2B25               	goto	l1028
  1752  0345  3A01               	xorlw	1	; case 1
  1753  0346  1903               	skipnz
  1754  0347  2B37               	goto	l1034
  1755  0348  3A03               	xorlw	3	; case 2
  1756  0349  1903               	skipnz
  1757  034A  2B37               	goto	l1034
  1758  034B  2B37               	goto	l1034
  1759  034C                     l1040:	
  1760                           
  1761                           ;alarm_source.c: 37: if(theAlarm->ALARM_STATE == ALARM_OFF)
  1762  034C  0832               	movf	turnAlarmOn@theAlarm,w
  1763  034D  0084               	movwf	4
  1764  034E  0800               	movf	0,w
  1765  034F  1D03               	btfss	3,2
  1766  0350  0008               	return
  1767                           
  1768                           ;alarm_source.c: 38: {
  1769                           ;alarm_source.c: 39: adc_start();
  1770  0351  120A  118A  23EB  120A  118A  	fcall	_adc_start
  1771                           
  1772                           ;alarm_source.c: 40: timer1_start();
  1773  0356  120A  118A  23E1   	fcall	_timer1_start
  1774                           
  1775                           ;alarm_source.c: 41: theAlarm->current_value = 0;
  1776  0359  1283               	bcf	3,5	;RP0=0, select bank0
  1777  035A  1303               	bcf	3,6	;RP1=0, select bank0
  1778  035B  0A32               	incf	turnAlarmOn@theAlarm,w
  1779  035C  0084               	movwf	4
  1780  035D  1383               	bcf	3,7	;select IRP bank0
  1781  035E  0180               	clrf	0
  1782  035F  0008               	return
  1783  0360                     __end_of_turnAlarmOn:	
  1784                           
  1785                           	psect	text11
  1786  03E1                     __ptext11:	
  1787 ;; *************** function _timer1_start *****************
  1788 ;; Defined at:
  1789 ;;		line 139 in file "util.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;		None
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;		None
  1794 ;; Return value:  Size  Location     Type
  1795 ;;		None               void
  1796 ;; Registers used:
  1797 ;;		None
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1803 ;;      Params:         0       0       0       0       0
  1804 ;;      Locals:         0       0       0       0       0
  1805 ;;      Temps:          0       0       0       0       0
  1806 ;;      Totals:         0       0       0       0       0
  1807 ;;Total ram usage:        0 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; Hardware stack levels required when called:    2
  1810 ;; This function calls:
  1811 ;;		Nothing
  1812 ;; This function is called by:
  1813 ;;		_turnAlarmOn
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           
  1818                           ;psect for function _timer1_start
  1819  03E1                     _timer1_start:	
  1820                           
  1821                           ;util.c: 140: T1CONbits.T1OSCEN = 1;
  1822                           
  1823                           ;incstack = 0
  1824                           ; Regs used in _timer1_start: []
  1825  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  1826  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  1827  03E3  1590               	bsf	16,3	;volatile
  1828                           
  1829                           ;util.c: 141: T1CONbits.TMR1ON = 1;
  1830  03E4  1410               	bsf	16,0	;volatile
  1831                           
  1832                           ;util.c: 142: PIE1bits.TMR1IE = 1;
  1833  03E5  1683               	bsf	3,5	;RP0=1, select bank1
  1834  03E6  1303               	bcf	3,6	;RP1=0, select bank1
  1835  03E7  140C               	bsf	12,0	;volatile
  1836                           
  1837                           ;util.c: 143: INTCONbits.GIE = 1;
  1838  03E8  178B               	bsf	11,7	;volatile
  1839                           
  1840                           ;util.c: 144: INTCONbits.PEIE = 1;
  1841  03E9  170B               	bsf	11,6	;volatile
  1842  03EA  0008               	return
  1843  03EB                     __end_of_timer1_start:	
  1844                           
  1845                           	psect	text12
  1846  03EB                     __ptext12:	
  1847 ;; *************** function _adc_start *****************
  1848 ;; Defined at:
  1849 ;;		line 205 in file "util.c"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;		None
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;		None
  1854 ;; Return value:  Size  Location     Type
  1855 ;;		None               void
  1856 ;; Registers used:
  1857 ;;		None
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1863 ;;      Params:         0       0       0       0       0
  1864 ;;      Locals:         0       0       0       0       0
  1865 ;;      Temps:          0       0       0       0       0
  1866 ;;      Totals:         0       0       0       0       0
  1867 ;;Total ram usage:        0 bytes
  1868 ;; Hardware stack levels used:    1
  1869 ;; Hardware stack levels required when called:    2
  1870 ;; This function calls:
  1871 ;;		Nothing
  1872 ;; This function is called by:
  1873 ;;		_turnAlarmOn
  1874 ;; This function uses a non-reentrant model
  1875 ;;
  1876                           
  1877                           
  1878                           ;psect for function _adc_start
  1879  03EB                     _adc_start:	
  1880                           
  1881                           ;util.c: 206: ADCON0bits.ADON =1;
  1882                           
  1883                           ;incstack = 0
  1884                           ; Regs used in _adc_start: []
  1885  03EB  1283               	bcf	3,5	;RP0=0, select bank0
  1886  03EC  1303               	bcf	3,6	;RP1=0, select bank0
  1887  03ED  141F               	bsf	31,0	;volatile
  1888                           
  1889                           ;util.c: 207: ADCON0bits.GO_nDONE = 1;
  1890  03EE  151F               	bsf	31,2	;volatile
  1891                           
  1892                           ;util.c: 208: PIE1bits.ADIE =1;
  1893  03EF  1683               	bsf	3,5	;RP0=1, select bank1
  1894  03F0  1303               	bcf	3,6	;RP1=0, select bank1
  1895  03F1  170C               	bsf	12,6	;volatile
  1896                           
  1897                           ;util.c: 209: INTCONbits.GIE =1;
  1898  03F2  178B               	bsf	11,7	;volatile
  1899                           
  1900                           ;util.c: 210: INTCONbits.PEIE = 1;
  1901  03F3  170B               	bsf	11,6	;volatile
  1902  03F4  0008               	return
  1903  03F5                     __end_of_adc_start:	
  1904                           
  1905                           	psect	text13
  1906  0418                     __ptext13:	
  1907 ;; *************** function _timer1_stop *****************
  1908 ;; Defined at:
  1909 ;;		line 149 in file "util.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;		None
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;		None
  1914 ;; Return value:  Size  Location     Type
  1915 ;;		None               void
  1916 ;; Registers used:
  1917 ;;		None
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1923 ;;      Params:         0       0       0       0       0
  1924 ;;      Locals:         0       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0
  1926 ;;      Totals:         0       0       0       0       0
  1927 ;;Total ram usage:        0 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    2
  1930 ;; This function calls:
  1931 ;;		Nothing
  1932 ;; This function is called by:
  1933 ;;		_checkAlarmState
  1934 ;;		_turnAlarmOff
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938                           
  1939                           ;psect for function _timer1_stop
  1940  0418                     _timer1_stop:	
  1941                           
  1942                           ;util.c: 150: T1CONbits.TMR1ON = 0;
  1943                           
  1944                           ;incstack = 0
  1945                           ; Regs used in _timer1_stop: []
  1946  0418  1283               	bcf	3,5	;RP0=0, select bank0
  1947  0419  1303               	bcf	3,6	;RP1=0, select bank0
  1948  041A  1010               	bcf	16,0	;volatile
  1949                           
  1950                           ;util.c: 151: T1CONbits.T1OSCEN =0;
  1951  041B  1190               	bcf	16,3	;volatile
  1952                           
  1953                           ;util.c: 152: PIE1bits.TMR1IE = 0;
  1954  041C  1683               	bsf	3,5	;RP0=1, select bank1
  1955  041D  1303               	bcf	3,6	;RP1=0, select bank1
  1956  041E  100C               	bcf	12,0	;volatile
  1957  041F  0008               	return
  1958  0420                     __end_of_timer1_stop:	
  1959                           
  1960                           	psect	text14
  1961  02DD                     __ptext14:	
  1962 ;; *************** function _blinkLed *****************
  1963 ;; Defined at:
  1964 ;;		line 104 in file "util.c"
  1965 ;; Parameters:    Size  Location     Type
  1966 ;;  stateOne        1    wreg     PTR enum E1033
  1967 ;;		 -> levelSensors(10), 
  1968 ;;  stateTwo        1    0[BANK0 ] PTR enum E1033
  1969 ;;		 -> levelSensors(10), 
  1970 ;;  almState        1    1[BANK0 ] PTR enum E1005
  1971 ;;		 -> theAlarm(3), 
  1972 ;;  blinkState      1    2[BANK0 ] PTR enum E1026
  1973 ;;		 -> blinkState(1), 
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;  stateOne        1    4[BANK0 ] PTR enum E1033
  1976 ;;		 -> levelSensors(10), 
  1977 ;; Return value:  Size  Location     Type
  1978 ;;		None               void
  1979 ;; Registers used:
  1980 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1986 ;;      Params:         0       3       0       0       0
  1987 ;;      Locals:         0       1       0       0       0
  1988 ;;      Temps:          0       1       0       0       0
  1989 ;;      Totals:         0       5       0       0       0
  1990 ;;Total ram usage:        5 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; Hardware stack levels required when called:    2
  1993 ;; This function calls:
  1994 ;;		Nothing
  1995 ;; This function is called by:
  1996 ;;		_main
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           
  2001                           ;psect for function _blinkLed
  2002  02DD                     _blinkLed:	
  2003                           
  2004                           ;incstack = 0
  2005                           ; Regs used in _blinkLed: [wreg-fsr0h+status,2+status,0]
  2006                           ;blinkLed@stateOne stored from wreg
  2007  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  2008  02DE  1303               	bcf	3,6	;RP1=0, select bank0
  2009  02DF  00B5               	movwf	blinkLed@stateOne
  2010                           
  2011                           ;util.c: 106: if(*stateOne == TRANSITION_TO_EMPTY || *stateOne == TRANSITION_TO_FULL || 
      +                          *stateTwo == TRANSITION_TO_EMPTY || *stateTwo == TRANSITION_TO_FULL)
  2012  02E0  0835               	movf	blinkLed@stateOne,w
  2013  02E1  0084               	movwf	4
  2014  02E2  1383               	bcf	3,7	;select IRP bank0
  2015  02E3  0300               	decf	0,w
  2016  02E4  1903               	btfsc	3,2
  2017  02E5  2AF7               	goto	l1144
  2018  02E6  0835               	movf	blinkLed@stateOne,w
  2019  02E7  0084               	movwf	4
  2020  02E8  3003               	movlw	3
  2021  02E9  0600               	xorwf	0,w
  2022  02EA  1903               	btfsc	3,2
  2023  02EB  2AF7               	goto	l1144
  2024  02EC  0831               	movf	blinkLed@stateTwo,w
  2025  02ED  0084               	movwf	4
  2026  02EE  0300               	decf	0,w
  2027  02EF  1903               	btfsc	3,2
  2028  02F0  2AF7               	goto	l1144
  2029  02F1  0831               	movf	blinkLed@stateTwo,w
  2030  02F2  0084               	movwf	4
  2031  02F3  3003               	movlw	3
  2032  02F4  0600               	xorwf	0,w
  2033  02F5  1D03               	btfss	3,2
  2034  02F6  2AFE               	goto	l1146
  2035  02F7                     l1144:	
  2036                           
  2037                           ;util.c: 107: {
  2038                           ;util.c: 108: *blinkState = FILTER_BLINK_FAST ;
  2039  02F7  3002               	movlw	2
  2040  02F8  00B4               	movwf	??_blinkLed
  2041  02F9  0833               	movf	blinkLed@blinkState,w
  2042  02FA  0084               	movwf	4
  2043  02FB  0834               	movf	??_blinkLed,w
  2044  02FC  0080               	movwf	0
  2045                           
  2046                           ;util.c: 110: }
  2047  02FD  0008               	return
  2048  02FE                     l1146:	
  2049                           
  2050                           ;util.c: 111: else if(*almState == ALARM_ON || *almState == ALARM_DOUBLE_TIME)
  2051  02FE  0832               	movf	blinkLed@almState,w
  2052  02FF  0084               	movwf	4
  2053  0300  0300               	decf	0,w
  2054  0301  1903               	btfsc	3,2
  2055  0302  2B09               	goto	l1150
  2056  0303  0832               	movf	blinkLed@almState,w
  2057  0304  0084               	movwf	4
  2058  0305  3002               	movlw	2
  2059  0306  0600               	xorwf	0,w
  2060  0307  1D03               	btfss	3,2
  2061  0308  2B10               	goto	l1152
  2062  0309                     l1150:	
  2063                           
  2064                           ;util.c: 112: {
  2065                           ;util.c: 113: *blinkState = ALARM_BLINK_SLOW;
  2066  0309  3003               	movlw	3
  2067  030A  00B4               	movwf	??_blinkLed
  2068  030B  0833               	movf	blinkLed@blinkState,w
  2069  030C  0084               	movwf	4
  2070  030D  0834               	movf	??_blinkLed,w
  2071  030E  0080               	movwf	0
  2072                           
  2073                           ;util.c: 115: }else if (*almState == ALARM_FINAL_STATE)
  2074  030F  0008               	return
  2075  0310                     l1152:	
  2076  0310  0832               	movf	blinkLed@almState,w
  2077  0311  0084               	movwf	4
  2078  0312  3003               	movlw	3
  2079  0313  0600               	xorwf	0,w
  2080  0314  1D03               	btfss	3,2
  2081  0315  2B1D               	goto	l1156
  2082                           
  2083                           ;util.c: 116: {
  2084                           ;util.c: 117: *blinkState = ALARM_SOLID_ON;
  2085  0316  3004               	movlw	4
  2086  0317  00B4               	movwf	??_blinkLed
  2087  0318  0833               	movf	blinkLed@blinkState,w
  2088  0319  0084               	movwf	4
  2089  031A  0834               	movf	??_blinkLed,w
  2090  031B  0080               	movwf	0
  2091                           
  2092                           ;util.c: 119: }else
  2093  031C  0008               	return
  2094  031D                     l1156:	
  2095                           
  2096                           ;util.c: 120: {
  2097                           ;util.c: 121: *blinkState = LIGHTS_OFF;
  2098  031D  0833               	movf	blinkLed@blinkState,w
  2099  031E  0084               	movwf	4
  2100  031F  0180               	clrf	0
  2101  0320  0008               	return
  2102  0321                     __end_of_blinkLed:	
  2103                           
  2104                           	psect	text15
  2105  03CB                     __ptext15:	
  2106 ;; *************** function _adc_init_CH0 *****************
  2107 ;; Defined at:
  2108 ;;		line 195 in file "util.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;		None
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;		None
  2113 ;; Return value:  Size  Location     Type
  2114 ;;		None               void
  2115 ;; Registers used:
  2116 ;;		wreg, status,2, status,0
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2122 ;;      Params:         0       0       0       0       0
  2123 ;;      Locals:         0       0       0       0       0
  2124 ;;      Temps:          0       0       0       0       0
  2125 ;;      Totals:         0       0       0       0       0
  2126 ;;Total ram usage:        0 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    2
  2129 ;; This function calls:
  2130 ;;		Nothing
  2131 ;; This function is called by:
  2132 ;;		_main
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           
  2137                           ;psect for function _adc_init_CH0
  2138  03CB                     _adc_init_CH0:	
  2139                           
  2140                           ;util.c: 196: ADCON0bits.ADCS = 0x00;
  2141                           
  2142                           ;incstack = 0
  2143                           ; Regs used in _adc_init_CH0: [wreg+status,2+status,0]
  2144  03CB  303F               	movlw	-193
  2145  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  2146  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  2147  03CE  059F               	andwf	31,f	;volatile
  2148                           
  2149                           ;util.c: 197: ADCON0bits.CHS = 0x00;
  2150  03CF  30C7               	movlw	-57
  2151  03D0  059F               	andwf	31,f	;volatile
  2152                           
  2153                           ;util.c: 199: ADCON1bits.ADFM = 0;
  2154  03D1  1683               	bsf	3,5	;RP0=1, select bank1
  2155  03D2  1303               	bcf	3,6	;RP1=0, select bank1
  2156  03D3  139F               	bcf	31,7	;volatile
  2157                           
  2158                           ;util.c: 200: ADCON1bits.PCFG = 0x00;
  2159  03D4  30F0               	movlw	-16
  2160  03D5  059F               	andwf	31,f	;volatile
  2161  03D6  0008               	return
  2162  03D7                     __end_of_adc_init_CH0:	
  2163                           
  2164                           	psect	text16
  2165  03B8                     __ptext16:	
  2166 ;; *************** function ___bmul *****************
  2167 ;; Defined at:
  2168 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/Umul8.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;  multiplier      1    wreg     unsigned char 
  2171 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2172 ;; Auto vars:     Size  Location     Type
  2173 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2174 ;;  product         1    2[BANK0 ] unsigned char 
  2175 ;; Return value:  Size  Location     Type
  2176 ;;                  1    wreg      unsigned char 
  2177 ;; Registers used:
  2178 ;;		wreg, status,2, status,0
  2179 ;; Tracked objects:
  2180 ;;		On entry : 0/0
  2181 ;;		On exit  : 0/0
  2182 ;;		Unchanged: 0/0
  2183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2184 ;;      Params:         0       1       0       0       0
  2185 ;;      Locals:         0       2       0       0       0
  2186 ;;      Temps:          0       1       0       0       0
  2187 ;;      Totals:         0       4       0       0       0
  2188 ;;Total ram usage:        4 bytes
  2189 ;; Hardware stack levels used:    1
  2190 ;; Hardware stack levels required when called:    2
  2191 ;; This function calls:
  2192 ;;		Nothing
  2193 ;; This function is called by:
  2194 ;;		_main
  2195 ;; This function uses a non-reentrant model
  2196 ;;
  2197                           
  2198                           
  2199                           ;psect for function ___bmul
  2200  03B8                     ___bmul:	
  2201                           
  2202                           ;incstack = 0
  2203                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2204                           ;___bmul@multiplier stored from wreg
  2205  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  2206  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  2207  03BA  00B4               	movwf	___bmul@multiplier
  2208  03BB  01B3               	clrf	___bmul@product
  2209  03BC                     l1160:	
  2210  03BC  1C34               	btfss	___bmul@multiplier,0
  2211  03BD  2BC2               	goto	l1164
  2212  03BE  0831               	movf	___bmul@multiplicand,w
  2213  03BF  00B2               	movwf	??___bmul
  2214  03C0  0832               	movf	??___bmul,w
  2215  03C1  07B3               	addwf	___bmul@product,f
  2216  03C2                     l1164:	
  2217  03C2  1003               	clrc
  2218  03C3  0DB1               	rlf	___bmul@multiplicand,f
  2219  03C4  1003               	clrc
  2220  03C5  0CB4               	rrf	___bmul@multiplier,f
  2221  03C6  0834               	movf	___bmul@multiplier,w
  2222  03C7  1D03               	btfss	3,2
  2223  03C8  2BBC               	goto	l1160
  2224  03C9  0833               	movf	___bmul@product,w
  2225  03CA  0008               	return
  2226  03CB                     __end_of___bmul:	
  2227                           
  2228                           	psect	text17
  2229  01DE                     __ptext17:	
  2230 ;; *************** function _ISR *****************
  2231 ;; Defined at:
  2232 ;;		line 43 in file "main.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;		None
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;		None
  2237 ;; Return value:  Size  Location     Type
  2238 ;;		None               void
  2239 ;; Registers used:
  2240 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2246 ;;      Params:         0       0       0       0       0
  2247 ;;      Locals:         0       0       0       0       0
  2248 ;;      Temps:          5       0       0       0       0
  2249 ;;      Totals:         5       0       0       0       0
  2250 ;;Total ram usage:        5 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:    1
  2253 ;; This function calls:
  2254 ;;		___awmod
  2255 ;;		i1_timer1_stop
  2256 ;; This function is called by:
  2257 ;;		Interrupt level 1
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           
  2262                           ;psect for function _ISR
  2263  01DE                     _ISR:	
  2264                           
  2265                           ;main.c: 44: static int adcResult = 0;
  2266                           ;main.c: 45: static int blinkCounter =0;
  2267                           ;main.c: 49: if(TMR0IF && TMR0IE){
  2268  01DE  1D0B               	btfss	11,2	;volatile
  2269  01DF  2A2E               	goto	i1l1236
  2270  01E0  1A8B               	btfsc	11,5	;volatile
  2271  01E1  2A04               	goto	i1l1228
  2272  01E2  2A2E               	goto	i1l1236
  2273  01E3                     i1l1218:	
  2274                           ;main.c: 52: {
  2275                           ;main.c: 53: case FILTER_BLINK_FAST:
  2276                           
  2277                           ;main.c: 51: switch(blinkState)
  2278                           
  2279                           
  2280                           ;main.c: 54: if((blinkCounter % 5) == 0)
  2281  01E3  3005               	movlw	5
  2282  01E4  29E6               	goto	L4
  2283  01E5                     i1l1222:	
  2284                           ;main.c: 60: case ALARM_BLINK_SLOW:
  2285                           
  2286                           ;main.c: 57: }
  2287                           ;main.c: 58: break;
  2288                           
  2289                           ;main.c: 55: {
  2290                           ;main.c: 56: PORTC ^= (1<<3);
  2291                           
  2292                           
  2293                           ;main.c: 61: if((blinkCounter % 15) == 0)
  2294  01E5  300F               	movlw	15
  2295  01E6                     L4:	
  2296  01E6  00F0               	movwf	___awmod@divisor
  2297  01E7  3000               	movlw	0
  2298  01E8  00F1               	movwf	___awmod@divisor+1
  2299  01E9  0823               	movf	ISR@blinkCounter+1,w
  2300  01EA  00F3               	movwf	___awmod@dividend+1
  2301  01EB  0822               	movf	ISR@blinkCounter,w
  2302  01EC  00F2               	movwf	___awmod@dividend
  2303  01ED  120A  118A  2292  120A  118A  	fcall	___awmod
  2304  01F2  0870               	movf	?___awmod,w
  2305  01F3  0471               	iorwf	?___awmod+1,w
  2306  01F4  1D03               	btfss	3,2
  2307  01F5  2A12               	goto	i1l1230
  2308                           
  2309                           ;main.c: 62: {
  2310                           ;main.c: 63: PORTC ^= (1<<3);
  2311  01F6  3008               	movlw	8
  2312  01F7  00F7               	movwf	??_ISR
  2313  01F8  0877               	movf	??_ISR,w
  2314  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  2315  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  2316  01FB  0687               	xorwf	7,f	;volatile
  2317                           
  2318                           ;main.c: 64: }
  2319                           ;main.c: 65: break;
  2320  01FC  2A12               	goto	i1l1230
  2321  01FD                     i1l76:	
  2322                           ;main.c: 67: case ALARM_SOLID_ON:
  2323                           
  2324                           
  2325                           ;main.c: 68: PORTC |= (1<<3);
  2326  01FD  1587               	bsf	7,3	;volatile
  2327                           
  2328                           ;main.c: 69: break;
  2329  01FE  2A12               	goto	i1l1230
  2330  01FF                     i1l1226:	
  2331                           ;main.c: 72: default:
  2332                           
  2333                           ;main.c: 71: case LIGHTS_OFF:
  2334                           
  2335                           
  2336                           ;main.c: 73: PORTC &= ~((1<<3));
  2337  01FF  30F7               	movlw	247
  2338  0200  00F7               	movwf	??_ISR
  2339  0201  0877               	movf	??_ISR,w
  2340  0202  0587               	andwf	7,f	;volatile
  2341                           
  2342                           ;main.c: 74: }
  2343  0203  2A12               	goto	i1l1230
  2344  0204                     i1l1228:	
  2345  0204  087C               	movf	_blinkState,w
  2346                           
  2347                           ; Switch size 1, requested type "space"
  2348                           ; Number of cases is 4, Range of values is 0 to 4
  2349                           ; switch strategies available:
  2350                           ; Name         Instructions Cycles
  2351                           ; simple_byte           13     7 (average)
  2352                           ; direct_byte           23     8 (fixed)
  2353                           ; jumptable            260     6 (fixed)
  2354                           ;	Chosen strategy is simple_byte
  2355  0205  3A00               	xorlw	0	; case 0
  2356  0206  1903               	skipnz
  2357  0207  29FF               	goto	i1l1226
  2358  0208  3A02               	xorlw	2	; case 2
  2359  0209  1903               	skipnz
  2360  020A  29E3               	goto	i1l1218
  2361  020B  3A01               	xorlw	1	; case 3
  2362  020C  1903               	skipnz
  2363  020D  29E5               	goto	i1l1222
  2364  020E  3A07               	xorlw	7	; case 4
  2365  020F  1903               	skipnz
  2366  0210  29FD               	goto	i1l76
  2367  0211  29FF               	goto	i1l1226
  2368  0212                     i1l1230:	
  2369                           
  2370                           ;main.c: 75: blinkCounter ++;
  2371  0212  3001               	movlw	1
  2372  0213  1283               	bcf	3,5	;RP0=0, select bank0
  2373  0214  1303               	bcf	3,6	;RP1=0, select bank0
  2374  0215  07A2               	addwf	ISR@blinkCounter,f
  2375  0216  1803               	skipnc
  2376  0217  0AA3               	incf	ISR@blinkCounter+1,f
  2377  0218  3000               	movlw	0
  2378  0219  07A3               	addwf	ISR@blinkCounter+1,f
  2379                           
  2380                           ;main.c: 76: blinkCounter %= 1000;
  2381  021A  30E8               	movlw	232
  2382  021B  00F0               	movwf	___awmod@divisor
  2383  021C  3003               	movlw	3
  2384  021D  00F1               	movwf	___awmod@divisor+1
  2385  021E  0823               	movf	ISR@blinkCounter+1,w
  2386  021F  00F3               	movwf	___awmod@dividend+1
  2387  0220  0822               	movf	ISR@blinkCounter,w
  2388  0221  00F2               	movwf	___awmod@dividend
  2389  0222  120A  118A  2292  120A  118A  	fcall	___awmod
  2390  0227  0871               	movf	?___awmod+1,w
  2391  0228  1283               	bcf	3,5	;RP0=0, select bank0
  2392  0229  1303               	bcf	3,6	;RP1=0, select bank0
  2393  022A  00A3               	movwf	ISR@blinkCounter+1
  2394  022B  0870               	movf	?___awmod,w
  2395  022C  00A2               	movwf	ISR@blinkCounter
  2396                           
  2397                           ;main.c: 77: TMR0IF = 0;
  2398  022D  110B               	bcf	11,2	;volatile
  2399  022E                     i1l1236:	
  2400                           
  2401                           ;main.c: 78: }
  2402                           ;main.c: 81: if(TMR1IE && TMR1IF){
  2403  022E  1683               	bsf	3,5	;RP0=1, select bank1
  2404  022F  1303               	bcf	3,6	;RP1=0, select bank1
  2405  0230  1C0C               	btfss	12,0	;volatile
  2406  0231  2A54               	goto	i1l79
  2407  0232  1283               	bcf	3,5	;RP0=0, select bank0
  2408  0233  1303               	bcf	3,6	;RP1=0, select bank0
  2409  0234  180C               	btfsc	12,0	;volatile
  2410  0235  2A44               	goto	i1l1248
  2411  0236  2A54               	goto	i1l79
  2412  0237                     i1l1242:	
  2413                           ;main.c: 84: case ALARM_ON:
  2414                           
  2415                           ;main.c: 83: switch(theAlarm.ALARM_STATE){
  2416                           
  2417                           
  2418                           ;main.c: 85: theAlarm.current_value += 1;
  2419  0237  3001               	movlw	1
  2420  0238  2A3A               	goto	L3
  2421  0239                     i1l1244:	
  2422                           ;main.c: 87: case ALARM_DOUBLE_TIME:
  2423                           
  2424                           ;main.c: 86: break;
  2425                           
  2426                           
  2427                           ;main.c: 88: theAlarm.current_value += 3;
  2428  0239  3003               	movlw	3
  2429  023A                     L3:	
  2430  023A  00F7               	movwf	??_ISR
  2431  023B  0877               	movf	??_ISR,w
  2432  023C  07AF               	addwf	_theAlarm+1,f	;volatile
  2433                           
  2434                           ;main.c: 89: break;
  2435  023D  2A51               	goto	i1l82
  2436  023E                     i1l1246:	
  2437                           ;main.c: 91: default:
  2438                           
  2439                           ;main.c: 90: case ALARM_FINAL_STATE:
  2440                           
  2441                           
  2442                           ;main.c: 92: timer1_stop();
  2443  023E  120A  118A  2420  120A  118A  	fcall	i1_timer1_stop
  2444                           
  2445                           ;main.c: 93: }
  2446  0243  2A51               	goto	i1l82
  2447  0244                     i1l1248:	
  2448  0244  1283               	bcf	3,5	;RP0=0, select bank0
  2449  0245  1303               	bcf	3,6	;RP1=0, select bank0
  2450  0246  082E               	movf	_theAlarm,w	;volatile
  2451                           
  2452                           ; Switch size 1, requested type "space"
  2453                           ; Number of cases is 3, Range of values is 1 to 3
  2454                           ; switch strategies available:
  2455                           ; Name         Instructions Cycles
  2456                           ; simple_byte           10     6 (average)
  2457                           ; direct_byte           20    11 (fixed)
  2458                           ; jumptable            263     9 (fixed)
  2459                           ;	Chosen strategy is simple_byte
  2460  0247  3A01               	xorlw	1	; case 1
  2461  0248  1903               	skipnz
  2462  0249  2A37               	goto	i1l1242
  2463  024A  3A03               	xorlw	3	; case 2
  2464  024B  1903               	skipnz
  2465  024C  2A39               	goto	i1l1244
  2466  024D  3A01               	xorlw	1	; case 3
  2467  024E  1903               	skipnz
  2468  024F  2A3E               	goto	i1l1246
  2469  0250  2A3E               	goto	i1l1246
  2470  0251                     i1l82:	
  2471                           
  2472                           ;main.c: 94: TMR1IF = 0;
  2473  0251  1283               	bcf	3,5	;RP0=0, select bank0
  2474  0252  1303               	bcf	3,6	;RP1=0, select bank0
  2475  0253  100C               	bcf	12,0	;volatile
  2476  0254                     i1l79:	
  2477                           
  2478                           ;main.c: 95: }
  2479                           ;main.c: 98: if(TMR2IF && TMR2IE){
  2480  0254  1283               	bcf	3,5	;RP0=0, select bank0
  2481  0255  1C8C               	btfss	12,1	;volatile
  2482  0256  2A78               	goto	i1l1266
  2483  0257  1683               	bsf	3,5	;RP0=1, select bank1
  2484  0258  1303               	bcf	3,6	;RP1=0, select bank1
  2485  0259  1C8C               	btfss	12,1	;volatile
  2486  025A  2A78               	goto	i1l1266
  2487                           
  2488                           ;main.c: 99: if(levelSensors[0].LEVEL_STATE == TRANSITION_TO_EMPTY || levelSensors[0].LE
      +                          VEL_STATE == TRANSITION_TO_FULL){
  2489  025B  1283               	bcf	3,5	;RP0=0, select bank0
  2490  025C  1303               	bcf	3,6	;RP1=0, select bank0
  2491  025D  0324               	decf	_levelSensors,w	;volatile
  2492  025E  1903               	btfsc	3,2
  2493  025F  2A64               	goto	i1l1256
  2494  0260  3003               	movlw	3
  2495  0261  0624               	xorwf	_levelSensors,w	;volatile
  2496  0262  1D03               	btfss	3,2
  2497  0263  2A6A               	goto	i1l1258
  2498  0264                     i1l1256:	
  2499                           
  2500                           ;main.c: 100: levelSensors[0].counter++;
  2501  0264  3001               	movlw	1
  2502  0265  07A7               	addwf	_levelSensors+3,f	;volatile
  2503  0266  1803               	skipnc
  2504  0267  0AA8               	incf	_levelSensors+4,f	;volatile
  2505  0268  3000               	movlw	0
  2506  0269  07A8               	addwf	_levelSensors+4,f	;volatile
  2507  026A                     i1l1258:	
  2508                           
  2509                           ;main.c: 101: }
  2510                           ;main.c: 103: if(levelSensors[1].LEVEL_STATE == TRANSITION_TO_EMPTY || levelSensors[1].L
      +                          EVEL_STATE == TRANSITION_TO_FULL){
  2511  026A  0329               	decf	_levelSensors+5,w	;volatile
  2512  026B  1903               	btfsc	3,2
  2513  026C  2A71               	goto	i1l1262
  2514  026D  3003               	movlw	3
  2515  026E  0629               	xorwf	_levelSensors+5,w	;volatile
  2516  026F  1D03               	btfss	3,2
  2517  0270  2A77               	goto	i1l1264
  2518  0271                     i1l1262:	
  2519                           
  2520                           ;main.c: 104: levelSensors[1].counter++;
  2521  0271  3001               	movlw	1
  2522  0272  07AC               	addwf	_levelSensors+8,f	;volatile
  2523  0273  1803               	skipnc
  2524  0274  0AAD               	incf	_levelSensors+9,f	;volatile
  2525  0275  3000               	movlw	0
  2526  0276  07AD               	addwf	_levelSensors+9,f	;volatile
  2527  0277                     i1l1264:	
  2528                           
  2529                           ;main.c: 105: }
  2530                           ;main.c: 106: TMR2IF = 0;
  2531  0277  108C               	bcf	12,1	;volatile
  2532  0278                     i1l1266:	
  2533                           
  2534                           ;main.c: 107: }
  2535                           ;main.c: 110: if(ADIF && ADIE){
  2536  0278  1283               	bcf	3,5	;RP0=0, select bank0
  2537  0279  1F0C               	btfss	12,6	;volatile
  2538  027A  2A86               	goto	i1l94
  2539  027B  1683               	bsf	3,5	;RP0=1, select bank1
  2540  027C  1303               	bcf	3,6	;RP1=0, select bank1
  2541  027D  1F0C               	btfss	12,6	;volatile
  2542  027E  2A86               	goto	i1l94
  2543                           
  2544                           ;main.c: 112: theAlarm.trigger_value = ADRESH;
  2545  027F  1283               	bcf	3,5	;RP0=0, select bank0
  2546  0280  1303               	bcf	3,6	;RP1=0, select bank0
  2547  0281  081E               	movf	30,w	;volatile
  2548  0282  00F7               	movwf	??_ISR
  2549  0283  0877               	movf	??_ISR,w
  2550  0284  00B0               	movwf	_theAlarm+2	;volatile
  2551                           
  2552                           ;main.c: 113: ADIF = 0;
  2553  0285  130C               	bcf	12,6	;volatile
  2554  0286                     i1l94:	
  2555  0286  087B               	movf	??_ISR+4,w
  2556  0287  1283               	bcf	3,5	;RP0=0, select bank0
  2557  0288  00FF               	movwf	127
  2558  0289  087A               	movf	??_ISR+3,w
  2559  028A  008A               	movwf	10
  2560  028B  0879               	movf	??_ISR+2,w
  2561  028C  0084               	movwf	4
  2562  028D  0E78               	swapf	(??_ISR+1)^(0+-128),w
  2563  028E  0083               	movwf	3
  2564  028F  0EFE               	swapf	126,f
  2565  0290  0E7E               	swapf	126,w
  2566  0291  0009               	retfie
  2567  0292                     __end_of_ISR:	
  2568                           
  2569                           	psect	intentry
  2570  0004                     __pintentry:	
  2571                           ;incstack = 0
  2572                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2573                           
  2574  0004                     interrupt_function:	
  2575  007E                     saved_w	set	btemp
  2576  0004  00FE               	movwf	btemp
  2577  0005  0E03               	swapf	3,w
  2578  0006  00F8               	movwf	??_ISR+1
  2579  0007  0804               	movf	4,w
  2580  0008  00F9               	movwf	??_ISR+2
  2581  0009  080A               	movf	10,w
  2582  000A  00FA               	movwf	??_ISR+3
  2583  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2584  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2585  000D  087F               	movf	btemp+1,w
  2586  000E  00FB               	movwf	??_ISR+4
  2587  000F  120A  118A  29DE   	ljmp	_ISR
  2588                           
  2589                           	psect	text18
  2590  0420                     __ptext18:	
  2591 ;; *************** function i1_timer1_stop *****************
  2592 ;; Defined at:
  2593 ;;		line 149 in file "util.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;		None
  2596 ;; Auto vars:     Size  Location     Type
  2597 ;;		None
  2598 ;; Return value:  Size  Location     Type
  2599 ;;		None               void
  2600 ;; Registers used:
  2601 ;;		None
  2602 ;; Tracked objects:
  2603 ;;		On entry : 0/0
  2604 ;;		On exit  : 0/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2607 ;;      Params:         0       0       0       0       0
  2608 ;;      Locals:         0       0       0       0       0
  2609 ;;      Temps:          0       0       0       0       0
  2610 ;;      Totals:         0       0       0       0       0
  2611 ;;Total ram usage:        0 bytes
  2612 ;; Hardware stack levels used:    1
  2613 ;; This function calls:
  2614 ;;		Nothing
  2615 ;; This function is called by:
  2616 ;;		_ISR
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           
  2621                           ;psect for function i1_timer1_stop
  2622  0420                     i1_timer1_stop:	
  2623                           
  2624                           ;util.c: 150: T1CONbits.TMR1ON = 0;
  2625                           
  2626                           ;incstack = 0
  2627                           ; Regs used in i1_timer1_stop: []
  2628  0420  1283               	bcf	3,5	;RP0=0, select bank0
  2629  0421  1303               	bcf	3,6	;RP1=0, select bank0
  2630  0422  1010               	bcf	16,0	;volatile
  2631                           
  2632                           ;util.c: 151: T1CONbits.T1OSCEN =0;
  2633  0423  1190               	bcf	16,3	;volatile
  2634                           
  2635                           ;util.c: 152: PIE1bits.TMR1IE = 0;
  2636  0424  1683               	bsf	3,5	;RP0=1, select bank1
  2637  0425  1303               	bcf	3,6	;RP1=0, select bank1
  2638  0426  100C               	bcf	12,0	;volatile
  2639  0427  0008               	return
  2640  0428                     __end_ofi1_timer1_stop:	
  2641                           
  2642                           	psect	text19
  2643  0292                     __ptext19:	
  2644 ;; *************** function ___awmod *****************
  2645 ;; Defined at:
  2646 ;;		line 6 in file "/opt/microchip/xc8/v1.34/sources/common/awmod.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;  divisor         2    0[COMMON] int 
  2649 ;;  dividend        2    2[COMMON] int 
  2650 ;; Auto vars:     Size  Location     Type
  2651 ;;  sign            1    6[COMMON] unsigned char 
  2652 ;;  counter         1    5[COMMON] unsigned char 
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  2    0[COMMON] int 
  2655 ;; Registers used:
  2656 ;;		wreg, status,2, status,0
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2662 ;;      Params:         4       0       0       0       0
  2663 ;;      Locals:         2       0       0       0       0
  2664 ;;      Temps:          1       0       0       0       0
  2665 ;;      Totals:         7       0       0       0       0
  2666 ;;Total ram usage:        7 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; This function calls:
  2669 ;;		Nothing
  2670 ;; This function is called by:
  2671 ;;		_ISR
  2672 ;; This function uses a non-reentrant model
  2673 ;;
  2674                           
  2675                           
  2676                           ;psect for function ___awmod
  2677  0292                     ___awmod:	
  2678                           
  2679                           ;incstack = 0
  2680                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2681  0292  01F6               	clrf	___awmod@sign
  2682  0293  1FF3               	btfss	___awmod@dividend+1,7
  2683  0294  2A9C               	goto	i1l1180
  2684  0295  09F2               	comf	___awmod@dividend,f
  2685  0296  09F3               	comf	___awmod@dividend+1,f
  2686  0297  0AF2               	incf	___awmod@dividend,f
  2687  0298  1903               	skipnz
  2688  0299  0AF3               	incf	___awmod@dividend+1,f
  2689  029A  01F6               	clrf	___awmod@sign
  2690  029B  0AF6               	incf	___awmod@sign,f
  2691  029C                     i1l1180:	
  2692  029C  1FF1               	btfss	___awmod@divisor+1,7
  2693  029D  2AA3               	goto	i1l1184
  2694  029E  09F0               	comf	___awmod@divisor,f
  2695  029F  09F1               	comf	___awmod@divisor+1,f
  2696  02A0  0AF0               	incf	___awmod@divisor,f
  2697  02A1  1903               	skipnz
  2698  02A2  0AF1               	incf	___awmod@divisor+1,f
  2699  02A3                     i1l1184:	
  2700  02A3  0870               	movf	___awmod@divisor,w
  2701  02A4  0471               	iorwf	___awmod@divisor+1,w
  2702  02A5  1903               	btfsc	3,2
  2703  02A6  2AD0               	goto	i1l1202
  2704  02A7  01F5               	clrf	___awmod@counter
  2705  02A8  0AF5               	incf	___awmod@counter,f
  2706  02A9                     i1l1192:	
  2707  02A9  1BF1               	btfsc	___awmod@divisor+1,7
  2708  02AA  2AB7               	goto	i1l1194
  2709  02AB  3001               	movlw	1
  2710  02AC                     u75_25:	
  2711  02AC  1003               	clrc
  2712  02AD  0DF0               	rlf	___awmod@divisor,f
  2713  02AE  0DF1               	rlf	___awmod@divisor+1,f
  2714  02AF  3EFF               	addlw	-1
  2715  02B0  1D03               	skipz
  2716  02B1  2AAC               	goto	u75_25
  2717  02B2  3001               	movlw	1
  2718  02B3  00F4               	movwf	??___awmod
  2719  02B4  0874               	movf	??___awmod,w
  2720  02B5  07F5               	addwf	___awmod@counter,f
  2721  02B6  2AA9               	goto	i1l1192
  2722  02B7                     i1l1194:	
  2723  02B7  0871               	movf	___awmod@divisor+1,w
  2724  02B8  0273               	subwf	___awmod@dividend+1,w
  2725  02B9  1D03               	skipz
  2726  02BA  2ABD               	goto	u77_25
  2727  02BB  0870               	movf	___awmod@divisor,w
  2728  02BC  0272               	subwf	___awmod@dividend,w
  2729  02BD                     u77_25:	
  2730  02BD  1C03               	skipc
  2731  02BE  2AC5               	goto	i1l1198
  2732  02BF  0870               	movf	___awmod@divisor,w
  2733  02C0  02F2               	subwf	___awmod@dividend,f
  2734  02C1  0871               	movf	___awmod@divisor+1,w
  2735  02C2  1C03               	skipc
  2736  02C3  03F3               	decf	___awmod@dividend+1,f
  2737  02C4  02F3               	subwf	___awmod@dividend+1,f
  2738  02C5                     i1l1198:	
  2739  02C5  3001               	movlw	1
  2740  02C6                     u78_25:	
  2741  02C6  1003               	clrc
  2742  02C7  0CF1               	rrf	___awmod@divisor+1,f
  2743  02C8  0CF0               	rrf	___awmod@divisor,f
  2744  02C9  3EFF               	addlw	-1
  2745  02CA  1D03               	skipz
  2746  02CB  2AC6               	goto	u78_25
  2747  02CC  3001               	movlw	1
  2748  02CD  02F5               	subwf	___awmod@counter,f
  2749  02CE  1D03               	btfss	3,2
  2750  02CF  2AB7               	goto	i1l1194
  2751  02D0                     i1l1202:	
  2752  02D0  0876               	movf	___awmod@sign,w
  2753  02D1  1903               	btfsc	3,2
  2754  02D2  2AD8               	goto	i1l1206
  2755  02D3  09F2               	comf	___awmod@dividend,f
  2756  02D4  09F3               	comf	___awmod@dividend+1,f
  2757  02D5  0AF2               	incf	___awmod@dividend,f
  2758  02D6  1903               	skipnz
  2759  02D7  0AF3               	incf	___awmod@dividend+1,f
  2760  02D8                     i1l1206:	
  2761  02D8  0873               	movf	___awmod@dividend+1,w
  2762  02D9  00F1               	movwf	?___awmod+1
  2763  02DA  0872               	movf	___awmod@dividend,w
  2764  02DB  00F0               	movwf	?___awmod
  2765  02DC  0008               	return
  2766  02DD                     __end_of___awmod:	
  2767  007E                     btemp	set	126	;btemp
  2768  007E                     wtemp	set	126
  2769  007E                     wtemp0	set	126
  2770  0080                     wtemp1	set	128
  2771  0082                     wtemp2	set	130
  2772  0084                     wtemp3	set	132
  2773  0086                     wtemp4	set	134
  2774  0088                     wtemp5	set	136
  2775  007F                     wtemp6	set	127
  2776  007E                     ttemp	set	126
  2777  007E                     ttemp0	set	126
  2778  0081                     ttemp1	set	129
  2779  0084                     ttemp2	set	132
  2780  0087                     ttemp3	set	135
  2781  007F                     ttemp4	set	127
  2782  007E                     ltemp	set	126
  2783  007E                     ltemp0	set	126
  2784  0082                     ltemp1	set	130
  2785  0086                     ltemp2	set	134
  2786  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    4
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     14      31
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    turnAlarmOn@theAlarm	PTR volatile struct Alarm size(1) Largest target is 3
		 -> theAlarm(BANK0[3]), 

    checkAlarmState@theAlarm	PTR volatile struct Alarm size(1) Largest target is 3
		 -> theAlarm(BANK0[3]), 

    checkAlarmState@theSensor	PTR volatile struct levelSensor size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 

    blinkLed@almState	PTR enum E1005 size(1) Largest target is 3
		 -> theAlarm(BANK0[3]), 

    blinkLed@blinkState	PTR enum E1026 size(1) Largest target is 1
		 -> blinkState(COMMON[1]), 

    blinkLed@stateTwo	PTR enum E1033 size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 

    blinkLed@stateOne	PTR enum E1033 size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 

    init_sensor@theSensor_init	PTR volatile struct levelSensor size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 

    checkSensorState@theSensor	PTR volatile struct levelSensor size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 

    checkTankStatus@theSensor	PTR volatile struct levelSensor size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awmod

Critical Paths under _main in BANK0

    _main->_checkAlarmState
    _checkAlarmState->___bmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    1875
                                              8 BANK0      6     6      0
                             ___bmul
                       _adc_init_CH0
                           _blinkLed
                    _checkAlarmState
                   _checkSensorState
                    _checkTankStatus
                        _init_sensor
                        _timer0_init
                       _timer0_start
                        _timer1_init
                        _timer2_init
                       _timer2_start
 ---------------------------------------------------------------------------------
 (1) _timer2_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_sensor                                          2     2      0     142
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _checkTankStatus                                      2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _checkSensorState                                     6     6      0     533
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _checkAlarmState                                      4     3      1     349
                                              4 BANK0      4     3      1
                             ___bmul (ARG)
                        _timer1_stop
                        _turnAlarmOn
 ---------------------------------------------------------------------------------
 (2) _turnAlarmOn                                          2     2      0     159
                                              0 BANK0      2     2      0
                          _adc_start
                       _timer1_start
 ---------------------------------------------------------------------------------
 (3) _timer1_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _adc_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _timer1_stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _blinkLed                                             5     2      3     428
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _adc_init_CH0                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     170
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  5     5      0     614
                                              7 COMMON     5     5      0
                            ___awmod
                      i1_timer1_stop
 ---------------------------------------------------------------------------------
 (5) i1_timer1_stop                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              7     3      4     614
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___bmul
   _adc_init_CH0
   _blinkLed
   _checkAlarmState
     ___bmul (ARG)
     _timer1_stop (ARG)
     _turnAlarmOn (ARG)
       _adc_start
       _timer1_start
   _checkSensorState
   _checkTankStatus
   _init_sensor
   _timer0_init
   _timer0_start
   _timer1_init
   _timer2_init
   _timer2_start

 _ISR (ROOT)
   ___awmod
   i1_timer1_stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      E      1F       5       38.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2C      12        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Jun 21 20:05:59 2015

                         pc 0002              ___bmul@product 0033                 __CFG_CP$OFF 0000  
     __end_ofi1_timer1_stop 0428                          fsr 0004                         l152 010B  
              __CFG_CPD$OFF 0000                         _ISR 01DE                         u605 00DB  
                       u555 0070                         u975 01D3                 __CFG_WRT$ON 0000  
                       fsr0 0004                         indf 0000                ___awmod@sign 0076  
              __CFG_FOSC$HS 0000                __CFG_LVP$OFF 0000                        ?_ISR 0070  
                      l1040 034C                        l1120 00ED                        l1112 00B5  
                      l1104 009B                        l1034 0337                        l1130 0370  
                      l1106 00A2                        l1028 0325                        l1124 00F4  
                      l1150 0309                        l1038 033E                        l1160 03BC  
                      l1152 0310                        l1144 02F7                        l1312 016D  
                      l1304 015C                        l1146 02FE                        l1090 004A  
                      l1082 0033                        l1074 03B3                        l1322 01AF  
                      l1164 03C2                        l1156 031D                        l1084 003A  
                      l1324 01C2                        l1078 0025                        l1098 0082  
                      _ADIE 0466                        _ADIF 0066     __end_of_checkTankStatus 03B8  
                      i1l82 0251                        i1l76 01FD                        i1l94 0286  
                      i1l79 0254       __size_of_adc_init_CH0 000C            ?_checkAlarmState 0035  
                      _main 010C                        btemp 007E               __CFG_BOREN$ON 0000  
                      ltemp 007E                        start 0012                        ttemp 007E  
                      wtemp 007E                 _turnAlarmOn 0321           ___bmul@multiplier 0034  
                     ??_ISR 0077            blinkLed@almState 0032                       ?_main 0070  
             __CFG_WDTE$OFF 0000             __end_of___awmod 02DD     checkAlarmState@theAlarm 0035  
                     _PORTB 0006                       _PORTC 0007                       _TRISA 0085  
                     _TRISB 0086                       _TRISC 0087                       u75_25 02AC  
                     u77_25 02BD                       u78_25 02C6                _adc_init_CH0 03CB  
              ?_init_sensor 0070                       main@i 003E                       pclath 000A  
                     ltemp0 007E                       ltemp1 0082                       ltemp2 0086  
                     ltemp3 0080                       ttemp0 007E                       ttemp1 0081  
                     ttemp2 0084                       ttemp3 0087                       ttemp4 007F  
                     status 0003                       wtemp0 007E                       wtemp1 0080  
                     wtemp2 0082                       wtemp3 0084                       wtemp4 0086  
                     wtemp5 0088                       wtemp6 007F            blinkLed@stateOne 0035  
          blinkLed@stateTwo 0031             __initialization 0015                __end_of_main 01DE  
  __end_of_checkSensorState 010C                      ??_main 0039                      _ADRESH 001E  
                    i1l1202 02D0                      i1l1206 02D8                      i1l1222 01E5  
                    i1l1230 0212                      i1l1242 0237                      i1l1226 01FF  
                    i1l1218 01E3                      i1l1180 029C                      i1l1244 0239  
                    i1l1228 0204                      i1l1236 022E                      i1l1262 0271  
                    i1l1246 023E                      i1l1192 02A9                      i1l1184 02A3  
                    i1l1264 0277                      i1l1256 0264                      i1l1248 0244  
                    i1l1194 02B7                      i1l1258 026A                      i1l1266 0278  
                    i1l1198 02C5            ?_checkTankStatus 0070                      _TMR0IE 005D  
                    _TMR0IF 005A                      _TMR1IE 0460                      _TMR1IF 0060  
                    _TMR2IE 0461                      _TMR2IF 0061    checkAlarmState@theSensor 0038  
          __end_of_blinkLed 0321              __CFG_PWRTE$OFF 0000                      ___bmul 03B8  
                 ??___awmod 0074                ?_timer0_init 0070                ?_timer1_init 0070  
              ?_timer2_init 0070                ?_timer1_stop 0070             ___awmod@divisor 0070  
           ___awmod@counter 0075                      saved_w 007E     __end_of__initialization 001D  
        __size_of_adc_start 000A         ___bmul@multiplicand 0031              __pcstackCOMMON 0070  
            _OPTION_REGbits 0081        __size_of_init_sensor 0018                  __pbssBANK0 0020  
              ?_turnAlarmOn 0070                  __pmaintext 010C          blinkLed@blinkState 0033  
                   ?___bmul 0031                  _blinkState 007C                  __pintentry 0004  
         __end_of_adc_start 03F5                   ?_blinkLed 0031             ISR@blinkCounter 0022  
                __stringtab 03D7      __size_ofi1_timer1_stop 0008    __size_of_checkAlarmState 002A  
           __size_of___bmul 0013                     ___awmod 0292        __size_of_timer0_init 0009  
         ?_checkSensorState 0070        __size_of_timer1_init 0006                     __ptext1 03F5  
                   __ptext2 03FE                     __ptext3 0428                     __ptext4 042E  
                   __ptext5 0407                     __ptext6 038A                     __ptext7 03A2  
                   __ptext8 0021                     __ptext9 0360        __size_of_timer2_init 0009  
             ?_timer0_start 0070        __size_of_timer1_stop 0008               ?_timer1_start 0070  
             ?_timer2_start 0070           _FILTERTMR_TO_FULL 03DF                __size_of_ISR 00B4  
                 _T1CONbits 0010                   _T2CONbits 0012          ??_checkSensorState 0031  
          ___awmod@dividend 0072                  ??_blinkLed 0034                     clrloop0 0411  
      end_of_initialization 001D   __end_of_FILTERTMR_TO_FULL 03E1               i1_timer1_stop 0420  
            ??_timer0_start 0031              ??_timer1_start 0031              ??_timer2_start 0031  
              ISR@adcResult 0020    __size_of_checkTankStatus 0016        __size_of_turnAlarmOn 003F  
            __end_of___bmul 03CB              ?i1_timer1_stop 0070  __end_of_FILTERTMR_TO_EMPTY 03DF  
       turnAlarmOn@theAlarm 0032           ??_checkAlarmState 0036         start_initialization 0015  
               __end_of_ISR 0292                    ??___bmul 0032    checkTankStatus@theSensor 0032  
             ?_adc_init_CH0 0070               ??_init_sensor 0031                 __pbssCOMMON 007C  
                 ___latbits 0002               __pcstackBANK0 0031                   _adc_start 03EB  
         __size_of_blinkLed 0044                _levelSensors 0024        __end_of_timer0_start 0432  
      __end_of_timer1_start 03EB        __end_of_timer2_start 03FE             ??i1_timer1_stop 0070  
                  ?___awmod 0070                   __pstrings 03D7           ??_checkTankStatus 0031  
            ??_adc_init_CH0 0031                  ?_adc_start 0070         __end_of_init_sensor 03A2  
 __size_of_checkSensorState 00EB           interrupt_function 0004                   clear_ram0 0410  
                  _PIE1bits 008C               ??_timer0_init 0031               ??_timer1_init 0031  
             ??_timer2_init 0031               ??_timer1_stop 0031                  _ADCON0bits 001F  
               __stringbase 03DC                  _ADCON1bits 009F                   main@i_138 003C  
           _checkAlarmState 0360            __size_of___awmod 004B          __end_of__stringtab 03DD  
       __end_of_timer0_init 0410         __end_of_timer1_init 042E         __end_of_timer2_init 0407  
       __end_of_timer1_stop 0420                 _init_sensor 038A                    _blinkLed 02DD  
                  __ptext10 0321                    __ptext11 03E1                    __ptext12 03EB  
                  __ptext13 0418                    __ptext14 02DD                    __ptext15 03CB  
                  __ptext16 03B8                    __ptext17 01DE                    __ptext18 0420  
                  __ptext19 0292       __size_of_timer0_start 0004                 ??_adc_start 0031  
     __size_of_timer1_start 000A       __size_of_timer2_start 0009          _FILTERTMR_TO_EMPTY 03DD  
             __size_of_main 00D2                    _theAlarm 002E        __end_of_adc_init_CH0 03D7  
             ??_turnAlarmOn 0031   checkSensorState@theSensor 0036                _timer0_start 042E  
              _timer1_start 03E1                _timer2_start 03F5                  _INTCONbits 000B  
                  intlevel1 0000            _checkSensorState 0021     __end_of_checkAlarmState 038A  
 init_sensor@theSensor_init 0032             _checkTankStatus 03A2                   stringcode 03D7  
               _timer0_init 0407                 _timer1_init 0428                 _timer2_init 03FE  
               _timer1_stop 0418         __end_of_turnAlarmOn 0360                    stringdir 03D7  
                  stringtab 03D7  
