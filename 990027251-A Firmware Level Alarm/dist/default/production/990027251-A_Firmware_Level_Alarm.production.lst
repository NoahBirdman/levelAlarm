

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu May 28 13:49:20 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F876
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     	;# 
    28  0001                     	;# 
    29  0002                     	;# 
    30  0003                     	;# 
    31  0004                     	;# 
    32  0005                     	;# 
    33  0006                     	;# 
    34  0007                     	;# 
    35  000A                     	;# 
    36  000B                     	;# 
    37  000C                     	;# 
    38  000D                     	;# 
    39  000E                     	;# 
    40  000E                     	;# 
    41  000F                     	;# 
    42  0010                     	;# 
    43  0011                     	;# 
    44  0012                     	;# 
    45  0013                     	;# 
    46  0014                     	;# 
    47  0015                     	;# 
    48  0015                     	;# 
    49  0016                     	;# 
    50  0017                     	;# 
    51  0018                     	;# 
    52  0019                     	;# 
    53  001A                     	;# 
    54  001B                     	;# 
    55  001B                     	;# 
    56  001C                     	;# 
    57  001D                     	;# 
    58  001E                     	;# 
    59  001F                     	;# 
    60  0081                     	;# 
    61  0085                     	;# 
    62  0086                     	;# 
    63  0087                     	;# 
    64  008C                     	;# 
    65  008D                     	;# 
    66  008E                     	;# 
    67  0091                     	;# 
    68  0092                     	;# 
    69  0093                     	;# 
    70  0094                     	;# 
    71  0098                     	;# 
    72  0099                     	;# 
    73  009E                     	;# 
    74  009F                     	;# 
    75  010C                     	;# 
    76  010D                     	;# 
    77  010E                     	;# 
    78  010F                     	;# 
    79  018C                     	;# 
    80  018D                     	;# 
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  0091                     	;# 
   122  0092                     	;# 
   123  0093                     	;# 
   124  0094                     	;# 
   125  0098                     	;# 
   126  0099                     	;# 
   127  009E                     	;# 
   128  009F                     	;# 
   129  010C                     	;# 
   130  010D                     	;# 
   131  010E                     	;# 
   132  010F                     	;# 
   133  018C                     	;# 
   134  018D                     	;# 
   135                           
   136                           	psect	idataBANK0
   137  0391                     __pidataBANK0:	
   138                           
   139                           ;initializer for _adcResult
   140  0391  3464               	retlw	100
   141  0392  3400               	retlw	0
   142                           
   143                           ;initializer for _alarmTimer
   144  0393  3464               	retlw	100
   145  0394  3400               	retlw	0
   146                           
   147                           	psect	strings
   148  034A                     __pstrings:	
   149  034A                     stringtab:	
   150  034A                     __stringtab:	
   151  034A                     stringcode:	
   152                           ;	String table - string pointers are 1 byte each
   153                           
   154  034A                     stringdir:	
   155  034A  3003               	movlw	high stringdir
   156  034B  008A               	movwf	10
   157  034C  0804               	movf	4,w
   158  034D  0A84               	incf	4,f
   159  034E  0782               	addwf	2,f
   160  034F                     __stringbase:	
   161  034F  3400               	retlw	0
   162  0350                     __end_of__stringtab:	
   163  0350                     _FILTERTMR_ISEMPTY:	
   164  0350  3432               	retlw	50
   165  0351  3400               	retlw	0
   166  0352                     __end_of_FILTERTMR_ISEMPTY:	
   167  0352                     _FILTERTMR_ISFULL:	
   168  0352  3432               	retlw	50
   169  0353  3400               	retlw	0
   170  0354                     __end_of_FILTERTMR_ISFULL:	
   171  001F                     _ADCON0bits	set	31
   172  001E                     _ADRESH	set	30
   173  000B                     _INTCONbits	set	11
   174  0006                     _PORTB	set	6
   175  0007                     _PORTC	set	7
   176  0010                     _T1CONbits	set	16
   177  0012                     _T2CONbits	set	18
   178  0066                     _ADIF	set	102
   179  005D                     _TMR0IE	set	93
   180  005A                     _TMR0IF	set	90
   181  0060                     _TMR1IF	set	96
   182  0061                     _TMR2IF	set	97
   183  009F                     _ADCON1bits	set	159
   184  009E                     _ADRESL	set	158
   185  0081                     _OPTION_REGbits	set	129
   186  008C                     _PIE1bits	set	140
   187  0085                     _TRISA	set	133
   188  0086                     _TRISB	set	134
   189  0087                     _TRISC	set	135
   190  0466                     _ADIE	set	1126
   191  0460                     _TMR1IE	set	1120
   192  0461                     _TMR2IE	set	1121
   193                           
   194                           ; #config settings
   195  0000                     
   196                           	psect	cinit
   197  0015                     start_initialization:	
   198  0015                     __initialization:	
   199                           
   200                           ; Clear objects allocated to COMMON
   201  0015  01FD               	clrf	__pbssCOMMON& (0+127)
   202                           
   203                           ; Clear objects allocated to BANK0
   204  0016  01AE               	clrf	__pbssBANK0& (0+127)
   205  0017  01AF               	clrf	(__pbssBANK0+1)& (0+127)
   206  0018  01B0               	clrf	(__pbssBANK0+2)& (0+127)
   207  0019  01B1               	clrf	(__pbssBANK0+3)& (0+127)
   208  001A  01B2               	clrf	(__pbssBANK0+4)& (0+127)
   209  001B  01B3               	clrf	(__pbssBANK0+5)& (0+127)
   210  001C  01B4               	clrf	(__pbssBANK0+6)& (0+127)
   211  001D  01B5               	clrf	(__pbssBANK0+7)& (0+127)
   212  001E  01B6               	clrf	(__pbssBANK0+8)& (0+127)
   213  001F  01B7               	clrf	(__pbssBANK0+9)& (0+127)
   214  0020  01B8               	clrf	(__pbssBANK0+10)& (0+127)
   215                           
   216                           ; Initialize objects allocated to BANK0
   217  0021  120A  118A  2391  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   218  0026  00B9               	movwf	__pdataBANK0& (0+127)
   219  0027  120A  118A  2392  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   220  002C  00BA               	movwf	(__pdataBANK0+1)& (0+127)
   221  002D  120A  118A  2393  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   222  0032  00BB               	movwf	(__pdataBANK0+2)& (0+127)
   223  0033  120A  118A  2394   	fcall	__pidataBANK0+3	;fetch initializer
   224  0036  00BC               	movwf	(__pdataBANK0+3)& (0+127)
   225  0037                     end_of_initialization:	
   226                           ;End of C runtime variable initialization code
   227                           
   228  0037                     __end_of__initialization:	
   229  0037  0183               	clrf	3
   230  0038  120A  118A  283B   	ljmp	_main	;jump to C main() function
   231                           
   232                           	psect	bssCOMMON
   233  007D                     __pbssCOMMON:	
   234  007D                     _lvlOneState:	
   235  007D                     	ds	1
   236                           
   237                           	psect	bssBANK0
   238  002E                     __pbssBANK0:	
   239  002E                     _almCounter:	
   240  002E                     	ds	2
   241  0030                     _blinkCounter:	
   242  0030                     	ds	2
   243  0032                     _counter1:	
   244  0032                     	ds	2
   245  0034                     _counter2:	
   246  0034                     	ds	2
   247  0036                     _alarmState:	
   248  0036                     	ds	1
   249  0037                     _lvlTwoState:	
   250  0037                     	ds	1
   251  0038                     _blinkState:	
   252  0038                     	ds	1
   253                           
   254                           	psect	dataBANK0
   255  0039                     __pdataBANK0:	
   256  0039                     _adcResult:	
   257  0039                     	ds	2
   258  003B                     _alarmTimer:	
   259  003B                     	ds	2
   260                           
   261                           	psect	cstackCOMMON
   262  0070                     __pcstackCOMMON:	
   263  0070                     ?_timer0_init:	
   264  0070                     ?_timer1_init:	
   265                           ; 0 bytes @ 0x0
   266                           
   267  0070                     ?_timer2_init:	
   268                           ; 0 bytes @ 0x0
   269                           
   270  0070                     ?_adc_init_CH0:	
   271                           ; 0 bytes @ 0x0
   272                           
   273  0070                     ?_timer0_start:	
   274                           ; 0 bytes @ 0x0
   275                           
   276  0070                     ?_timer2_start:	
   277                           ; 0 bytes @ 0x0
   278                           
   279  0070                     ?_adc_start:	
   280                           ; 0 bytes @ 0x0
   281                           
   282  0070                     ?_timer1_start:	
   283                           ; 0 bytes @ 0x0
   284                           
   285  0070                     ?_timer1_stop:	
   286                           ; 0 bytes @ 0x0
   287                           
   288  0070                     ?_ISR:	
   289                           ; 0 bytes @ 0x0
   290                           
   291  0070                     ?_main:	
   292                           ; 0 bytes @ 0x0
   293                           
   294  0070                     ?___awmod:	
   295                           ; 2 bytes @ 0x0
   296                           
   297  0070                     ___awmod@divisor:	
   298                           ; 2 bytes @ 0x0
   299                           
   300                           
   301                           ; 2 bytes @ 0x0
   302  0070                     	ds	2
   303  0072                     ___awmod@dividend:	
   304                           
   305                           ; 2 bytes @ 0x2
   306  0072                     	ds	2
   307  0074                     ??___awmod:	
   308                           
   309                           ; 0 bytes @ 0x4
   310  0074                     	ds	1
   311  0075                     ___awmod@counter:	
   312                           
   313                           ; 1 bytes @ 0x5
   314  0075                     	ds	1
   315  0076                     ___awmod@sign:	
   316                           
   317                           ; 1 bytes @ 0x6
   318  0076                     	ds	1
   319  0077                     ??_ISR:	
   320                           
   321                           ; 0 bytes @ 0x7
   322  0077                     	ds	6
   323                           
   324                           	psect	cstackBANK0
   325  0020                     __pcstackBANK0:	
   326  0020                     ??_timer0_init:	
   327  0020                     ??_timer1_init:	
   328                           ; 0 bytes @ 0x0
   329                           
   330  0020                     ??_timer2_init:	
   331                           ; 0 bytes @ 0x0
   332                           
   333  0020                     ??_adc_init_CH0:	
   334                           ; 0 bytes @ 0x0
   335                           
   336  0020                     ??_timer0_start:	
   337                           ; 0 bytes @ 0x0
   338                           
   339  0020                     ??_timer2_start:	
   340                           ; 0 bytes @ 0x0
   341                           
   342  0020                     ??_adc_start:	
   343                           ; 0 bytes @ 0x0
   344                           
   345  0020                     ??_timer1_start:	
   346                           ; 0 bytes @ 0x0
   347                           
   348  0020                     ??_timer1_stop:	
   349                           ; 0 bytes @ 0x0
   350                           
   351  0020                     ?_blinkLed:	
   352                           ; 0 bytes @ 0x0
   353                           
   354  0020                     blinkLed@stateTwo:	
   355                           ; 0 bytes @ 0x0
   356                           
   357                           
   358                           ; 1 bytes @ 0x0
   359  0020                     	ds	1
   360  0021                     blinkLed@almState:	
   361                           
   362                           ; 1 bytes @ 0x1
   363  0021                     	ds	1
   364  0022                     blinkLed@blinkState:	
   365                           
   366                           ; 1 bytes @ 0x2
   367  0022                     	ds	1
   368  0023                     ??_blinkLed:	
   369                           
   370                           ; 0 bytes @ 0x3
   371  0023                     	ds	1
   372  0024                     blinkLed@stateOne:	
   373                           
   374                           ; 1 bytes @ 0x4
   375  0024                     	ds	1
   376  0025                     ??_main:	
   377                           
   378                           ; 0 bytes @ 0x5
   379  0025                     	ds	3
   380  0028                     main@adcDelay:	
   381                           
   382                           ; 1 bytes @ 0x8
   383  0028                     	ds	1
   384  0029                     main@i:	
   385                           
   386                           ; 2 bytes @ 0x9
   387  0029                     	ds	2
   388  002B                     main@sensorRead:	
   389                           
   390                           ; 1 bytes @ 0xB
   391  002B                     	ds	1
   392  002C                     main@lvlOneRead:	
   393                           
   394                           ; 1 bytes @ 0xC
   395  002C                     	ds	1
   396  002D                     main@lvlTwoRead:	
   397                           
   398                           ; 1 bytes @ 0xD
   399  002D                     	ds	1
   400                           
   401                           	psect	maintext
   402  003B                     __pmaintext:	
   403 ;;
   404 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   405 ;;
   406 ;; *************** function _main *****************
   407 ;; Defined at:
   408 ;;		line 118 in file "main.c"
   409 ;; Parameters:    Size  Location     Type
   410 ;;		None
   411 ;; Auto vars:     Size  Location     Type
   412 ;;  i               2    9[BANK0 ] int 
   413 ;;  lvlTwoRead      1   13[BANK0 ] unsigned char 
   414 ;;  lvlOneRead      1   12[BANK0 ] unsigned char 
   415 ;;  sensorRead      1   11[BANK0 ] unsigned char 
   416 ;;  adcDelay        1    8[BANK0 ] unsigned char 
   417 ;; Return value:  Size  Location     Type
   418 ;;                  2   96[None  ] int 
   419 ;; Registers used:
   420 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   421 ;; Tracked objects:
   422 ;;		On entry : B00/0
   423 ;;		On exit  : 0/0
   424 ;;		Unchanged: 0/0
   425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   426 ;;      Params:         0       0       0       0       0
   427 ;;      Locals:         0       6       0       0       0
   428 ;;      Temps:          0       3       0       0       0
   429 ;;      Totals:         0       9       0       0       0
   430 ;;Total ram usage:        9 bytes
   431 ;; Hardware stack levels required when called:    3
   432 ;; This function calls:
   433 ;;		_adc_init_CH0
   434 ;;		_adc_start
   435 ;;		_blinkLed
   436 ;;		_timer0_init
   437 ;;		_timer0_start
   438 ;;		_timer1_init
   439 ;;		_timer1_start
   440 ;;		_timer1_stop
   441 ;;		_timer2_init
   442 ;;		_timer2_start
   443 ;; This function is called by:
   444 ;;		Startup code after reset
   445 ;; This function uses a non-reentrant model
   446 ;;
   447                           
   448                           
   449                           ;psect for function _main
   450  003B                     _main:	
   451                           
   452                           ;main.c: 119: uint8_t sensorRead =0;
   453                           
   454                           ;incstack = 0
   455                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   456  003B  1283               	bcf	3,5	;RP0=0, select bank0
   457  003C  1303               	bcf	3,6	;RP1=0, select bank0
   458  003D  01AB               	clrf	main@sensorRead
   459                           
   460                           ;main.c: 120: uint8_t lvlOneRead = 0;
   461  003E  01AC               	clrf	main@lvlOneRead
   462                           
   463                           ;main.c: 121: uint8_t lvlTwoRead = 0;
   464  003F  01AD               	clrf	main@lvlTwoRead
   465                           
   466                           ;main.c: 122: uint8_t adcDelay = 0;
   467  0040  01A8               	clrf	main@adcDelay
   468                           
   469                           ;main.c: 123: int i = 0;
   470  0041  01A9               	clrf	main@i
   471  0042  01AA               	clrf	main@i+1
   472                           
   473                           ;main.c: 125: TRISA |= (1<<0);
   474  0043  1683               	bsf	3,5	;RP0=1, select bank1
   475  0044  1303               	bcf	3,6	;RP1=0, select bank1
   476  0045  1405               	bsf	5,0	;volatile
   477                           
   478                           ;main.c: 126: TRISB |= (1<<4)|(1<<5);
   479  0046  3030               	movlw	48
   480  0047  1283               	bcf	3,5	;RP0=0, select bank0
   481  0048  1303               	bcf	3,6	;RP1=0, select bank0
   482  0049  00A5               	movwf	??_main
   483  004A  0825               	movf	??_main,w
   484  004B  1683               	bsf	3,5	;RP0=1, select bank1
   485  004C  1303               	bcf	3,6	;RP1=0, select bank1
   486  004D  0486               	iorwf	6,f	;volatile
   487                           
   488                           ;main.c: 127: TRISC &= ~((1<<2)|(1<<3));
   489  004E  30F3               	movlw	243
   490  004F  1283               	bcf	3,5	;RP0=0, select bank0
   491  0050  1303               	bcf	3,6	;RP1=0, select bank0
   492  0051  00A5               	movwf	??_main
   493  0052  0825               	movf	??_main,w
   494  0053  1683               	bsf	3,5	;RP0=1, select bank1
   495  0054  1303               	bcf	3,6	;RP1=0, select bank1
   496  0055  0587               	andwf	7,f	;volatile
   497                           
   498                           ;main.c: 128: TRISB &= ~((1<<3)|(1<<2));
   499  0056  30F3               	movlw	243
   500  0057  1283               	bcf	3,5	;RP0=0, select bank0
   501  0058  1303               	bcf	3,6	;RP1=0, select bank0
   502  0059  00A5               	movwf	??_main
   503  005A  0825               	movf	??_main,w
   504  005B  1683               	bsf	3,5	;RP0=1, select bank1
   505  005C  1303               	bcf	3,6	;RP1=0, select bank1
   506  005D  0586               	andwf	6,f	;volatile
   507                           
   508                           ;main.c: 131: timer0_init();
   509  005E  120A  118A  237A  120A  118A  	fcall	_timer0_init
   510                           
   511                           ;main.c: 132: timer1_init();
   512  0063  120A  118A  238B  120A  118A  	fcall	_timer1_init
   513                           
   514                           ;main.c: 133: timer2_init();
   515  0068  120A  118A  2371  120A  118A  	fcall	_timer2_init
   516                           
   517                           ;main.c: 134: adc_init_CH0();
   518  006D  120A  118A  233E  120A  118A  	fcall	_adc_init_CH0
   519                           
   520                           ;main.c: 136: PORTC |= (1<<2);
   521  0072  1283               	bcf	3,5	;RP0=0, select bank0
   522  0073  1303               	bcf	3,6	;RP1=0, select bank0
   523  0074  1507               	bsf	7,2	;volatile
   524                           
   525                           ;main.c: 137: PORTB &= ~((1<<2)|(1<<3));
   526  0075  30F3               	movlw	243
   527  0076  00A5               	movwf	??_main
   528  0077  0825               	movf	??_main,w
   529  0078  0586               	andwf	6,f	;volatile
   530                           
   531                           ;main.c: 139: timer0_start();
   532  0079  120A  118A  2395  120A  118A  	fcall	_timer0_start
   533                           
   534                           ;main.c: 140: timer2_start();
   535  007E  120A  118A  2368  120A  118A  	fcall	_timer2_start
   536  0083                     l1177:	
   537                           ;main.c: 148: }else {adcDelay ++;}
   538                           
   539                           ;main.c: 147: adcDelay = 0;
   540                           
   541                           ;main.c: 146: adc_start();
   542                           
   543                           ;main.c: 145: if(adcDelay >= 1000 && ADCON0bits.GO_nDONE == 0){
   544                           
   545                           ;main.c: 142: while(1){
   546                           
   547  0083  3001               	movlw	1
   548  0084  1283               	bcf	3,5	;RP0=0, select bank0
   549  0085  1303               	bcf	3,6	;RP1=0, select bank0
   550  0086  00A5               	movwf	??_main
   551  0087  0825               	movf	??_main,w
   552  0088  07A8               	addwf	main@adcDelay,f
   553                           
   554                           ;main.c: 151: sensorRead = PORTB & ((1<<5) | (1<<4));
   555  0089  0806               	movf	6,w	;volatile
   556  008A  3930               	andlw	48
   557  008B  00A5               	movwf	??_main
   558  008C  0825               	movf	??_main,w
   559  008D  00AB               	movwf	main@sensorRead
   560                           
   561                           ;main.c: 152: lvlOneRead = (sensorRead & (1<<4));
   562  008E  082B               	movf	main@sensorRead,w
   563  008F  3910               	andlw	16
   564  0090  00A5               	movwf	??_main
   565  0091  0825               	movf	??_main,w
   566  0092  00AC               	movwf	main@lvlOneRead
   567                           
   568                           ;main.c: 153: lvlTwoRead = (sensorRead & (1<<5));
   569  0093  082B               	movf	main@sensorRead,w
   570  0094  3920               	andlw	32
   571  0095  00A5               	movwf	??_main
   572  0096  0825               	movf	??_main,w
   573  0097  00AD               	movwf	main@lvlTwoRead
   574                           
   575                           ;main.c: 156: if(lvlOneState == 0){
   576  0098  087D               	movf	_lvlOneState,w	;volatile
   577  0099  1D03               	btfss	3,2
   578  009A  28A3               	goto	l1193
   579                           
   580                           ;main.c: 157: if(lvlOneRead > 0){
   581  009B  082C               	movf	main@lvlOneRead,w
   582  009C  1903               	btfsc	3,2
   583  009D  28A0               	goto	l1191
   584                           
   585                           ;main.c: 158: lvlOneState = 1;
   586  009E  3001               	movlw	1
   587  009F  290B               	goto	L4
   588  00A0                     l1191:	
   589                           ;main.c: 159: }else {
   590                           
   591                           
   592                           ;main.c: 160: counter1 = 0;
   593  00A0  01B2               	clrf	_counter1	;volatile
   594  00A1  01B3               	clrf	_counter1+1	;volatile
   595                           
   596                           ;main.c: 161: }
   597                           ;main.c: 164: }else if(lvlOneState == 1){
   598  00A2  291F               	goto	l1237
   599  00A3                     l1193:	
   600  00A3  037D               	decf	_lvlOneState,w	;volatile
   601  00A4  1D03               	btfss	3,2
   602  00A5  28CD               	goto	l1207
   603                           
   604                           ;main.c: 166: if(lvlOneRead == 0){
   605  00A6  082C               	movf	main@lvlOneRead,w
   606  00A7  1D03               	btfss	3,2
   607  00A8  28AD               	goto	l1199
   608                           
   609                           ;main.c: 168: counter1 = 0;
   610  00A9  01B2               	clrf	_counter1	;volatile
   611  00AA  01B3               	clrf	_counter1+1	;volatile
   612                           
   613                           ;main.c: 169: lvlOneState = 0;
   614  00AB  01FD               	clrf	_lvlOneState	;volatile
   615                           
   616                           ;main.c: 171: }else if(lvlOneRead > 0 && counter1 >= FILTERTMR_ISFULL){
   617  00AC  291F               	goto	l1237
   618  00AD                     l1199:	
   619  00AD  082C               	movf	main@lvlOneRead,w
   620  00AE  1903               	btfsc	3,2
   621  00AF  291F               	goto	l1237
   622  00B0  3003               	movlw	low (_FILTERTMR_ISFULL-__stringbase)
   623  00B1  0084               	movwf	4
   624  00B2  120A  118A  234A  120A  118A  	fcall	stringdir
   625  00B7  00A5               	movwf	??_main
   626  00B8  120A  118A  234A  120A  118A  	fcall	stringdir
   627  00BD  00A6               	movwf	??_main+1
   628  00BE  0833               	movf	_counter1+1,w	;volatile
   629  00BF  3A80               	xorlw	128
   630  00C0  00A7               	movwf	??_main+2
   631  00C1  0826               	movf	??_main+1,w
   632  00C2  3A80               	xorlw	128
   633  00C3  0227               	subwf	??_main+2,w
   634  00C4  1D03               	skipz
   635  00C5  28C8               	goto	u1075
   636  00C6  0825               	movf	??_main,w
   637  00C7  0232               	subwf	_counter1,w	;volatile
   638  00C8                     u1075:	
   639  00C8  1C03               	skipc
   640  00C9  291F               	goto	l1237
   641                           
   642                           ;main.c: 172: counter1 = 0;
   643  00CA  1283               	bcf	3,5	;RP0=0, select bank0
   644  00CB  1303               	bcf	3,6	;RP1=0, select bank0
   645  00CC  28E5               	goto	L10
   646  00CD                     l1207:	
   647                           ;main.c: 175: }
   648                           ;main.c: 177: }else if(lvlOneState == 2){
   649                           
   650                           ;main.c: 173: lvlOneState = 2;
   651                           
   652  00CD  3002               	movlw	2
   653  00CE  067D               	xorwf	_lvlOneState,w	;volatile
   654  00CF  1D03               	btfss	3,2
   655  00D0  28DE               	goto	l1215
   656                           
   657                           ;main.c: 179: if(lvlOneRead == 0 && counter1 == 0){
   658  00D1  082C               	movf	main@lvlOneRead,w
   659  00D2  1D03               	btfss	3,2
   660  00D3  291F               	goto	l1237
   661  00D4  0832               	movf	_counter1,w	;volatile
   662  00D5  0433               	iorwf	_counter1+1,w	;volatile
   663  00D6  1D03               	btfss	3,2
   664  00D7  291F               	goto	l1237
   665                           
   666                           ;main.c: 180: counter1 = 1;
   667  00D8  3001               	movlw	1
   668  00D9  00B2               	movwf	_counter1	;volatile
   669  00DA  3000               	movlw	0
   670  00DB  00B3               	movwf	_counter1+1	;volatile
   671                           
   672                           ;main.c: 181: lvlOneState = 3;
   673  00DC  3003               	movlw	3
   674  00DD  290B               	goto	L4
   675  00DE                     l1215:	
   676                           ;main.c: 185: }
   677                           ;main.c: 187: }else if(lvlOneState == 3){
   678                           
   679                           ;main.c: 183: }else{
   680                           
   681  00DE  3003               	movlw	3
   682  00DF  067D               	xorwf	_lvlOneState,w	;volatile
   683  00E0  1D03               	btfss	3,2
   684  00E1  290F               	goto	l1231
   685                           
   686                           ;main.c: 189: if(lvlOneRead > 0){
   687  00E2  082C               	movf	main@lvlOneRead,w
   688  00E3  1903               	btfsc	3,2
   689  00E4  28E9               	goto	l1223
   690  00E5                     L10:	
   691                           
   692                           ;main.c: 190: counter1 = 0;
   693  00E5  01B2               	clrf	_counter1	;volatile
   694  00E6  01B3               	clrf	_counter1+1	;volatile
   695                           
   696                           ;main.c: 191: lvlOneState = 2;
   697  00E7  3002               	movlw	2
   698  00E8  290B               	goto	L4
   699  00E9                     l1223:	
   700                           ;main.c: 194: }else if(lvlOneRead == 0 && counter1 > FILTERTMR_ISEMPTY){
   701                           
   702  00E9  082C               	movf	main@lvlOneRead,w
   703  00EA  1D03               	btfss	3,2
   704  00EB  291F               	goto	l1237
   705  00EC  3001               	movlw	low (_FILTERTMR_ISEMPTY-__stringbase)
   706  00ED  0084               	movwf	4
   707  00EE  120A  118A  234A  120A  118A  	fcall	stringdir
   708  00F3  00A5               	movwf	??_main
   709  00F4  120A  118A  234A  120A  118A  	fcall	stringdir
   710  00F9  00A6               	movwf	??_main+1
   711  00FA  0826               	movf	??_main+1,w
   712  00FB  3A80               	xorlw	128
   713  00FC  00A7               	movwf	??_main+2
   714  00FD  0833               	movf	_counter1+1,w	;volatile
   715  00FE  3A80               	xorlw	128
   716  00FF  0227               	subwf	??_main+2,w
   717  0100  1D03               	skipz
   718  0101  2904               	goto	u1145
   719  0102  0832               	movf	_counter1,w	;volatile
   720  0103  0225               	subwf	??_main,w
   721  0104                     u1145:	
   722  0104  1803               	skipnc
   723  0105  291F               	goto	l1237
   724                           
   725                           ;main.c: 196: counter1 = 0;
   726  0106  1283               	bcf	3,5	;RP0=0, select bank0
   727  0107  1303               	bcf	3,6	;RP1=0, select bank0
   728  0108  01B2               	clrf	_counter1	;volatile
   729  0109  01B3               	clrf	_counter1+1	;volatile
   730                           
   731                           ;main.c: 197: lvlOneState = 4;
   732  010A  3004               	movlw	4
   733  010B                     L4:	
   734  010B  00A5               	movwf	??_main
   735  010C  0825               	movf	??_main,w
   736  010D  00FD               	movwf	_lvlOneState	;volatile
   737                           
   738                           ;main.c: 199: }
   739                           ;main.c: 202: }else if(lvlOneState == 4){
   740  010E  291F               	goto	l1237
   741  010F                     l1231:	
   742  010F  3004               	movlw	4
   743  0110  067D               	xorwf	_lvlOneState,w	;volatile
   744  0111  1D03               	btfss	3,2
   745  0112  291F               	goto	l1237
   746                           
   747                           ;main.c: 204: lvlOneState = 5;
   748  0113  3005               	movlw	5
   749  0114  00A5               	movwf	??_main
   750  0115  0825               	movf	??_main,w
   751  0116  00FD               	movwf	_lvlOneState	;volatile
   752                           
   753                           ;main.c: 205: blinkState = 4;
   754  0117  3004               	movlw	4
   755  0118  00A5               	movwf	??_main
   756  0119  0825               	movf	??_main,w
   757  011A  00B8               	movwf	_blinkState	;volatile
   758                           
   759                           ;main.c: 206: alarmState ++;
   760  011B  3001               	movlw	1
   761  011C  00A5               	movwf	??_main
   762  011D  0825               	movf	??_main,w
   763  011E  07B6               	addwf	_alarmState,f	;volatile
   764  011F                     l1237:	
   765                           
   766                           ;main.c: 207: }
   767                           ;main.c: 211: if(lvlTwoState == 0){
   768  011F  1283               	bcf	3,5	;RP0=0, select bank0
   769  0120  1303               	bcf	3,6	;RP1=0, select bank0
   770  0121  0837               	movf	_lvlTwoState,w	;volatile
   771  0122  1D03               	btfss	3,2
   772  0123  2929               	goto	l1245
   773                           
   774                           ;main.c: 212: if(lvlTwoRead > 0){
   775  0124  082D               	movf	main@lvlTwoRead,w
   776  0125  1903               	btfsc	3,2
   777  0126  2964               	goto	l1267
   778                           
   779                           ;main.c: 213: lvlTwoState = 1;
   780  0127  3001               	movlw	1
   781  0128  2994               	goto	L8
   782  0129                     l1245:	
   783                           ;main.c: 216: }
   784                           ;main.c: 219: }else if(lvlTwoState == 1){
   785                           
   786                           ;main.c: 215: counter2 = 0;
   787                           
   788                           ;main.c: 214: }else {
   789                           
   790  0129  0337               	decf	_lvlTwoState,w	;volatile
   791  012A  1D03               	btfss	3,2
   792  012B  2953               	goto	l1259
   793                           
   794                           ;main.c: 221: if(lvlTwoRead == 0){
   795  012C  082D               	movf	main@lvlTwoRead,w
   796  012D  1D03               	btfss	3,2
   797  012E  2933               	goto	l1251
   798                           
   799                           ;main.c: 223: counter2 = 0;
   800  012F  01B4               	clrf	_counter2	;volatile
   801  0130  01B5               	clrf	_counter2+1	;volatile
   802                           
   803                           ;main.c: 224: lvlTwoState = 0;
   804  0131  01B7               	clrf	_lvlTwoState	;volatile
   805                           
   806                           ;main.c: 226: }else if(lvlTwoRead > 0 && counter2 >= FILTERTMR_ISFULL){
   807  0132  29A8               	goto	l1291
   808  0133                     l1251:	
   809  0133  082D               	movf	main@lvlTwoRead,w
   810  0134  1903               	btfsc	3,2
   811  0135  29A8               	goto	l1291
   812  0136  3003               	movlw	low (_FILTERTMR_ISFULL-__stringbase)
   813  0137  0084               	movwf	4
   814  0138  120A  118A  234A  120A  118A  	fcall	stringdir
   815  013D  00A5               	movwf	??_main
   816  013E  120A  118A  234A  120A  118A  	fcall	stringdir
   817  0143  00A6               	movwf	??_main+1
   818  0144  0835               	movf	_counter2+1,w	;volatile
   819  0145  3A80               	xorlw	128
   820  0146  00A7               	movwf	??_main+2
   821  0147  0826               	movf	??_main+1,w
   822  0148  3A80               	xorlw	128
   823  0149  0227               	subwf	??_main+2,w
   824  014A  1D03               	skipz
   825  014B  294E               	goto	u1215
   826  014C  0825               	movf	??_main,w
   827  014D  0234               	subwf	_counter2,w	;volatile
   828  014E                     u1215:	
   829  014E  1C03               	skipc
   830  014F  29A8               	goto	l1291
   831                           
   832                           ;main.c: 227: counter2 = 0;
   833  0150  1283               	bcf	3,5	;RP0=0, select bank0
   834  0151  1303               	bcf	3,6	;RP1=0, select bank0
   835  0152  296E               	goto	L11
   836  0153                     l1259:	
   837                           ;main.c: 230: }
   838                           ;main.c: 232: }else if(lvlTwoState == 2){
   839                           
   840                           ;main.c: 228: lvlTwoState = 2;
   841                           
   842  0153  3002               	movlw	2
   843  0154  0637               	xorwf	_lvlTwoState,w	;volatile
   844  0155  1D03               	btfss	3,2
   845  0156  2967               	goto	l1269
   846                           
   847                           ;main.c: 234: if(lvlTwoRead == 0 && counter2 == 0){
   848  0157  082D               	movf	main@lvlTwoRead,w
   849  0158  1D03               	btfss	3,2
   850  0159  2964               	goto	l1267
   851  015A  0834               	movf	_counter2,w	;volatile
   852  015B  0435               	iorwf	_counter2+1,w	;volatile
   853  015C  1D03               	btfss	3,2
   854  015D  2964               	goto	l1267
   855                           
   856                           ;main.c: 235: counter2 = 1;
   857  015E  3001               	movlw	1
   858  015F  00B4               	movwf	_counter2	;volatile
   859  0160  3000               	movlw	0
   860  0161  00B5               	movwf	_counter2+1	;volatile
   861                           
   862                           ;main.c: 236: lvlTwoState = 3;
   863  0162  3003               	movlw	3
   864  0163  2994               	goto	L8
   865  0164                     l1267:	
   866                           ;main.c: 237: }else{
   867                           
   868                           
   869                           ;main.c: 238: counter2 = 0;
   870  0164  01B4               	clrf	_counter2	;volatile
   871  0165  01B5               	clrf	_counter2+1	;volatile
   872                           
   873                           ;main.c: 240: }
   874                           ;main.c: 242: }else if(lvlTwoState == 3){
   875  0166  29A8               	goto	l1291
   876  0167                     l1269:	
   877  0167  3003               	movlw	3
   878  0168  0637               	xorwf	_lvlTwoState,w	;volatile
   879  0169  1D03               	btfss	3,2
   880  016A  2998               	goto	l1285
   881                           
   882                           ;main.c: 244: if(lvlTwoRead > 0){
   883  016B  082D               	movf	main@lvlTwoRead,w
   884  016C  1903               	btfsc	3,2
   885  016D  2972               	goto	l1277
   886  016E                     L11:	
   887                           
   888                           ;main.c: 245: counter2 = 0;
   889  016E  01B4               	clrf	_counter2	;volatile
   890  016F  01B5               	clrf	_counter2+1	;volatile
   891                           
   892                           ;main.c: 246: lvlTwoState = 2;
   893  0170  3002               	movlw	2
   894  0171  2994               	goto	L8
   895  0172                     l1277:	
   896                           ;main.c: 249: }else if(lvlTwoRead == 0 && counter2 > FILTERTMR_ISEMPTY){
   897                           
   898  0172  082D               	movf	main@lvlTwoRead,w
   899  0173  1D03               	btfss	3,2
   900  0174  29A8               	goto	l1291
   901  0175  3001               	movlw	low (_FILTERTMR_ISEMPTY-__stringbase)
   902  0176  0084               	movwf	4
   903  0177  120A  118A  234A  120A  118A  	fcall	stringdir
   904  017C  00A5               	movwf	??_main
   905  017D  120A  118A  234A  120A  118A  	fcall	stringdir
   906  0182  00A6               	movwf	??_main+1
   907  0183  0826               	movf	??_main+1,w
   908  0184  3A80               	xorlw	128
   909  0185  00A7               	movwf	??_main+2
   910  0186  0835               	movf	_counter2+1,w	;volatile
   911  0187  3A80               	xorlw	128
   912  0188  0227               	subwf	??_main+2,w
   913  0189  1D03               	skipz
   914  018A  298D               	goto	u1285
   915  018B  0834               	movf	_counter2,w	;volatile
   916  018C  0225               	subwf	??_main,w
   917  018D                     u1285:	
   918  018D  1803               	skipnc
   919  018E  29A8               	goto	l1291
   920                           
   921                           ;main.c: 251: counter2 = 0;
   922  018F  1283               	bcf	3,5	;RP0=0, select bank0
   923  0190  1303               	bcf	3,6	;RP1=0, select bank0
   924  0191  01B4               	clrf	_counter2	;volatile
   925  0192  01B5               	clrf	_counter2+1	;volatile
   926                           
   927                           ;main.c: 252: lvlTwoState = 4;
   928  0193  3004               	movlw	4
   929  0194                     L8:	
   930  0194  00A5               	movwf	??_main
   931  0195  0825               	movf	??_main,w
   932  0196  00B7               	movwf	_lvlTwoState	;volatile
   933                           
   934                           ;main.c: 253: }
   935                           ;main.c: 256: }else if(lvlTwoState == 4){
   936  0197  29A8               	goto	l1291
   937  0198                     l1285:	
   938  0198  3004               	movlw	4
   939  0199  0637               	xorwf	_lvlTwoState,w	;volatile
   940  019A  1D03               	btfss	3,2
   941  019B  29A8               	goto	l1291
   942                           
   943                           ;main.c: 258: lvlTwoState = 5;
   944  019C  3005               	movlw	5
   945  019D  00A5               	movwf	??_main
   946  019E  0825               	movf	??_main,w
   947  019F  00B7               	movwf	_lvlTwoState	;volatile
   948                           
   949                           ;main.c: 259: blinkState = 4;
   950  01A0  3004               	movlw	4
   951  01A1  00A5               	movwf	??_main
   952  01A2  0825               	movf	??_main,w
   953  01A3  00B8               	movwf	_blinkState	;volatile
   954                           
   955                           ;main.c: 260: alarmState ++;
   956  01A4  3001               	movlw	1
   957  01A5  00A5               	movwf	??_main
   958  01A6  0825               	movf	??_main,w
   959  01A7  07B6               	addwf	_alarmState,f	;volatile
   960  01A8                     l1291:	
   961                           
   962                           ;main.c: 261: }
   963                           ;main.c: 265: if(alarmState >= 1){
   964  01A8  1283               	bcf	3,5	;RP0=0, select bank0
   965  01A9  1303               	bcf	3,6	;RP1=0, select bank0
   966  01AA  0836               	movf	_alarmState,w	;volatile
   967  01AB  1903               	btfsc	3,2
   968  01AC  29E4               	goto	l1311
   969                           
   970                           ;main.c: 267: if(almCounter == 0){
   971  01AD  082E               	movf	_almCounter,w	;volatile
   972  01AE  042F               	iorwf	_almCounter+1,w	;volatile
   973  01AF  1D03               	btfss	3,2
   974  01B0  29C3               	goto	l1301
   975                           
   976                           ;main.c: 268: PORTB |= (1<<3);
   977  01B1  1586               	bsf	6,3	;volatile
   978                           
   979                           ;main.c: 269: adc_start();
   980  01B2  120A  118A  235E  120A  118A  	fcall	_adc_start
   981                           
   982                           ;main.c: 270: timer1_start();
   983  01B7  120A  118A  2354  120A  118A  	fcall	_timer1_start
   984                           
   985                           ;main.c: 271: almCounter = 1;
   986  01BC  3001               	movlw	1
   987  01BD  1283               	bcf	3,5	;RP0=0, select bank0
   988  01BE  1303               	bcf	3,6	;RP1=0, select bank0
   989  01BF  00AE               	movwf	_almCounter	;volatile
   990  01C0  3000               	movlw	0
   991  01C1  00AF               	movwf	_almCounter+1	;volatile
   992                           
   993                           ;main.c: 273: }else if(almCounter > alarmTimer){
   994  01C2  29E4               	goto	l1311
   995  01C3                     l1301:	
   996  01C3  083C               	movf	_alarmTimer+1,w	;volatile
   997  01C4  3A80               	xorlw	128
   998  01C5  00A5               	movwf	??_main
   999  01C6  082F               	movf	_almCounter+1,w	;volatile
  1000  01C7  3A80               	xorlw	128
  1001  01C8  0225               	subwf	??_main,w
  1002  01C9  1D03               	skipz
  1003  01CA  29CD               	goto	u1325
  1004  01CB  082E               	movf	_almCounter,w	;volatile
  1005  01CC  023B               	subwf	_alarmTimer,w	;volatile
  1006  01CD                     u1325:	
  1007  01CD  1803               	skipnc
  1008  01CE  29E4               	goto	l1311
  1009                           
  1010                           ;main.c: 274: PORTB |= (1<<2) |(1<<3);
  1011  01CF  300C               	movlw	12
  1012  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1013  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  1014  01D2  00A5               	movwf	??_main
  1015  01D3  0825               	movf	??_main,w
  1016  01D4  0486               	iorwf	6,f	;volatile
  1017                           
  1018                           ;main.c: 275: timer1_stop();
  1019  01D5  120A  118A  2383  120A  118A  	fcall	_timer1_stop
  1020                           
  1021                           ;main.c: 276: almCounter = 1;
  1022  01DA  3001               	movlw	1
  1023  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  1024  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  1025  01DD  00AE               	movwf	_almCounter	;volatile
  1026  01DE  3000               	movlw	0
  1027  01DF  00AF               	movwf	_almCounter+1	;volatile
  1028                           
  1029                           ;main.c: 277: alarmState = 3;
  1030  01E0  3003               	movlw	3
  1031  01E1  00A5               	movwf	??_main
  1032  01E2  0825               	movf	??_main,w
  1033  01E3  00B6               	movwf	_alarmState	;volatile
  1034  01E4                     l1311:	
  1035                           
  1036                           ;main.c: 278: }
  1037                           ;main.c: 279: }
  1038                           ;main.c: 282: blinkLed(lvlOneState, lvlTwoState, alarmState, &blinkState);
  1039  01E4  1283               	bcf	3,5	;RP0=0, select bank0
  1040  01E5  1303               	bcf	3,6	;RP1=0, select bank0
  1041  01E6  0837               	movf	_lvlTwoState,w	;volatile
  1042  01E7  00A5               	movwf	??_main
  1043  01E8  0825               	movf	??_main,w
  1044  01E9  00A0               	movwf	blinkLed@stateTwo
  1045  01EA  0836               	movf	_alarmState,w	;volatile
  1046  01EB  00A6               	movwf	??_main+1
  1047  01EC  0826               	movf	??_main+1,w
  1048  01ED  00A1               	movwf	blinkLed@almState
  1049  01EE  3038               	movlw	(low (_blinkState| 0))& (0+255)
  1050  01EF  00A7               	movwf	??_main+2
  1051  01F0  0827               	movf	??_main+2,w
  1052  01F1  00A2               	movwf	blinkLed@blinkState
  1053  01F2  087D               	movf	_lvlOneState,w	;volatile
  1054  01F3  120A  118A  2309  120A  118A  	fcall	_blinkLed
  1055  01F8  2883               	goto	l1177
  1056  01F9                     l1313:	
  1057                           ;main.c: 284: }
  1058                           ;main.c: 288: while(1){
  1059                           
  1060                           
  1061                           ;main.c: 289: PORTC^=(1<<2);
  1062  01F9  3004               	movlw	4
  1063  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  1064  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  1065  01FC  00A5               	movwf	??_main
  1066  01FD  0825               	movf	??_main,w
  1067  01FE  0687               	xorwf	7,f	;volatile
  1068                           
  1069                           ;main.c: 290: for(i=0;i<10000;i++);
  1070  01FF  01A9               	clrf	main@i
  1071  0200  01AA               	clrf	main@i+1
  1072  0201                     L9:	
  1073  0201  082A               	movf	main@i+1,w
  1074  0202  3A80               	xorlw	128
  1075  0203  00FF               	movwf	127
  1076  0204  30A7               	movlw	167
  1077  0205  027F               	subwf	127,w
  1078  0206  1D03               	skipz
  1079  0207  2A0A               	goto	u1335
  1080  0208  3010               	movlw	16
  1081  0209  0229               	subwf	main@i,w
  1082  020A                     u1335:	
  1083  020A  1803               	btfsc	3,0
  1084  020B  29F9               	goto	l1313
  1085  020C  3001               	movlw	1
  1086  020D  1283               	bcf	3,5	;RP0=0, select bank0
  1087  020E  1303               	bcf	3,6	;RP1=0, select bank0
  1088  020F  07A9               	addwf	main@i,f
  1089  0210  1803               	skipnc
  1090  0211  0AAA               	incf	main@i+1,f
  1091  0212  3000               	movlw	0
  1092  0213  07AA               	addwf	main@i+1,f
  1093  0214  2A01               	goto	L9
  1094  0215                     __end_of_main:	
  1095                           ;main.c: 292: }
  1096                           ;main.c: 293: return (0);
  1097                           ;	Return value of _main is never used
  1098                           
  1099                           
  1100                           	psect	text1
  1101  0368                     __ptext1:	
  1102 ;; *************** function _timer2_start *****************
  1103 ;; Defined at:
  1104 ;;		line 43 in file "util.c"
  1105 ;; Parameters:    Size  Location     Type
  1106 ;;		None
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;		None
  1109 ;; Return value:  Size  Location     Type
  1110 ;;		None               void
  1111 ;; Registers used:
  1112 ;;		None
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1118 ;;      Params:         0       0       0       0       0
  1119 ;;      Locals:         0       0       0       0       0
  1120 ;;      Temps:          0       0       0       0       0
  1121 ;;      Totals:         0       0       0       0       0
  1122 ;;Total ram usage:        0 bytes
  1123 ;; Hardware stack levels used:    1
  1124 ;; Hardware stack levels required when called:    2
  1125 ;; This function calls:
  1126 ;;		Nothing
  1127 ;; This function is called by:
  1128 ;;		_main
  1129 ;; This function uses a non-reentrant model
  1130 ;;
  1131                           
  1132                           
  1133                           ;psect for function _timer2_start
  1134  0368                     _timer2_start:	
  1135                           
  1136                           ;util.c: 44: PIE1bits.TMR2IE = 1;
  1137                           
  1138                           ;incstack = 0
  1139                           ; Regs used in _timer2_start: []
  1140  0368  1683               	bsf	3,5	;RP0=1, select bank1
  1141  0369  1303               	bcf	3,6	;RP1=0, select bank1
  1142  036A  148C               	bsf	12,1	;volatile
  1143                           
  1144                           ;util.c: 45: T2CONbits.TMR2ON = 1;
  1145  036B  1283               	bcf	3,5	;RP0=0, select bank0
  1146  036C  1303               	bcf	3,6	;RP1=0, select bank0
  1147  036D  1512               	bsf	18,2	;volatile
  1148                           
  1149                           ;util.c: 46: INTCONbits.GIE = 1;
  1150  036E  178B               	bsf	11,7	;volatile
  1151                           
  1152                           ;util.c: 47: INTCONbits.PEIE = 1;
  1153  036F  170B               	bsf	11,6	;volatile
  1154  0370  0008               	return
  1155  0371                     __end_of_timer2_start:	
  1156                           
  1157                           	psect	text2
  1158  0371                     __ptext2:	
  1159 ;; *************** function _timer2_init *****************
  1160 ;; Defined at:
  1161 ;;		line 38 in file "util.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;		None
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;		None
  1166 ;; Return value:  Size  Location     Type
  1167 ;;		None               void
  1168 ;; Registers used:
  1169 ;;		wreg, status,2, status,0
  1170 ;; Tracked objects:
  1171 ;;		On entry : 0/0
  1172 ;;		On exit  : 0/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1175 ;;      Params:         0       0       0       0       0
  1176 ;;      Locals:         0       0       0       0       0
  1177 ;;      Temps:          0       0       0       0       0
  1178 ;;      Totals:         0       0       0       0       0
  1179 ;;Total ram usage:        0 bytes
  1180 ;; Hardware stack levels used:    1
  1181 ;; Hardware stack levels required when called:    2
  1182 ;; This function calls:
  1183 ;;		Nothing
  1184 ;; This function is called by:
  1185 ;;		_main
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189                           
  1190                           ;psect for function _timer2_init
  1191  0371                     _timer2_init:	
  1192                           
  1193                           ;util.c: 39: T2CONbits.T2CKPS = 0x02;
  1194                           
  1195                           ;incstack = 0
  1196                           ; Regs used in _timer2_init: [wreg+status,2+status,0]
  1197  0371  1283               	bcf	3,5	;RP0=0, select bank0
  1198  0372  1303               	bcf	3,6	;RP1=0, select bank0
  1199  0373  0812               	movf	18,w	;volatile
  1200  0374  39FC               	andlw	-4
  1201  0375  3802               	iorlw	2
  1202  0376  0092               	movwf	18	;volatile
  1203                           
  1204                           ;util.c: 40: T2CONbits.TOUTPS = 0x0F;
  1205  0377  3078               	movlw	120
  1206  0378  0492               	iorwf	18,f	;volatile
  1207  0379  0008               	return
  1208  037A                     __end_of_timer2_init:	
  1209                           
  1210                           	psect	text3
  1211  0383                     __ptext3:	
  1212 ;; *************** function _timer1_stop *****************
  1213 ;; Defined at:
  1214 ;;		line 30 in file "util.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;		None
  1217 ;; Auto vars:     Size  Location     Type
  1218 ;;		None
  1219 ;; Return value:  Size  Location     Type
  1220 ;;		None               void
  1221 ;; Registers used:
  1222 ;;		None
  1223 ;; Tracked objects:
  1224 ;;		On entry : 0/0
  1225 ;;		On exit  : 0/0
  1226 ;;		Unchanged: 0/0
  1227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1228 ;;      Params:         0       0       0       0       0
  1229 ;;      Locals:         0       0       0       0       0
  1230 ;;      Temps:          0       0       0       0       0
  1231 ;;      Totals:         0       0       0       0       0
  1232 ;;Total ram usage:        0 bytes
  1233 ;; Hardware stack levels used:    1
  1234 ;; Hardware stack levels required when called:    2
  1235 ;; This function calls:
  1236 ;;		Nothing
  1237 ;; This function is called by:
  1238 ;;		_main
  1239 ;; This function uses a non-reentrant model
  1240 ;;
  1241                           
  1242                           
  1243                           ;psect for function _timer1_stop
  1244  0383                     _timer1_stop:	
  1245                           
  1246                           ;util.c: 31: T1CONbits.TMR1ON = 0;
  1247                           
  1248                           ;incstack = 0
  1249                           ; Regs used in _timer1_stop: []
  1250  0383  1283               	bcf	3,5	;RP0=0, select bank0
  1251  0384  1303               	bcf	3,6	;RP1=0, select bank0
  1252  0385  1010               	bcf	16,0	;volatile
  1253                           
  1254                           ;util.c: 32: T1CONbits.T1OSCEN =0;
  1255  0386  1190               	bcf	16,3	;volatile
  1256                           
  1257                           ;util.c: 33: PIE1bits.TMR1IE = 0;
  1258  0387  1683               	bsf	3,5	;RP0=1, select bank1
  1259  0388  1303               	bcf	3,6	;RP1=0, select bank1
  1260  0389  100C               	bcf	12,0	;volatile
  1261  038A  0008               	return
  1262  038B                     __end_of_timer1_stop:	
  1263                           
  1264                           	psect	text4
  1265  0354                     __ptext4:	
  1266 ;; *************** function _timer1_start *****************
  1267 ;; Defined at:
  1268 ;;		line 20 in file "util.c"
  1269 ;; Parameters:    Size  Location     Type
  1270 ;;		None
  1271 ;; Auto vars:     Size  Location     Type
  1272 ;;		None
  1273 ;; Return value:  Size  Location     Type
  1274 ;;		None               void
  1275 ;; Registers used:
  1276 ;;		None
  1277 ;; Tracked objects:
  1278 ;;		On entry : 0/0
  1279 ;;		On exit  : 0/0
  1280 ;;		Unchanged: 0/0
  1281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1282 ;;      Params:         0       0       0       0       0
  1283 ;;      Locals:         0       0       0       0       0
  1284 ;;      Temps:          0       0       0       0       0
  1285 ;;      Totals:         0       0       0       0       0
  1286 ;;Total ram usage:        0 bytes
  1287 ;; Hardware stack levels used:    1
  1288 ;; Hardware stack levels required when called:    2
  1289 ;; This function calls:
  1290 ;;		Nothing
  1291 ;; This function is called by:
  1292 ;;		_main
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296                           
  1297                           ;psect for function _timer1_start
  1298  0354                     _timer1_start:	
  1299                           
  1300                           ;util.c: 21: T1CONbits.T1OSCEN = 1;
  1301                           
  1302                           ;incstack = 0
  1303                           ; Regs used in _timer1_start: []
  1304  0354  1283               	bcf	3,5	;RP0=0, select bank0
  1305  0355  1303               	bcf	3,6	;RP1=0, select bank0
  1306  0356  1590               	bsf	16,3	;volatile
  1307                           
  1308                           ;util.c: 22: T1CONbits.TMR1ON = 1;
  1309  0357  1410               	bsf	16,0	;volatile
  1310                           
  1311                           ;util.c: 23: PIE1bits.TMR1IE = 1;
  1312  0358  1683               	bsf	3,5	;RP0=1, select bank1
  1313  0359  1303               	bcf	3,6	;RP1=0, select bank1
  1314  035A  140C               	bsf	12,0	;volatile
  1315                           
  1316                           ;util.c: 24: INTCONbits.GIE = 1;
  1317  035B  178B               	bsf	11,7	;volatile
  1318                           
  1319                           ;util.c: 25: INTCONbits.PEIE = 1;
  1320  035C  170B               	bsf	11,6	;volatile
  1321  035D  0008               	return
  1322  035E                     __end_of_timer1_start:	
  1323                           
  1324                           	psect	text5
  1325  038B                     __ptext5:	
  1326 ;; *************** function _timer1_init *****************
  1327 ;; Defined at:
  1328 ;;		line 9 in file "util.c"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;		None
  1331 ;; Auto vars:     Size  Location     Type
  1332 ;;		None
  1333 ;; Return value:  Size  Location     Type
  1334 ;;		None               void
  1335 ;; Registers used:
  1336 ;;		wreg, status,2, status,0
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1342 ;;      Params:         0       0       0       0       0
  1343 ;;      Locals:         0       0       0       0       0
  1344 ;;      Temps:          0       0       0       0       0
  1345 ;;      Totals:         0       0       0       0       0
  1346 ;;Total ram usage:        0 bytes
  1347 ;; Hardware stack levels used:    1
  1348 ;; Hardware stack levels required when called:    2
  1349 ;; This function calls:
  1350 ;;		Nothing
  1351 ;; This function is called by:
  1352 ;;		_main
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356                           
  1357                           ;psect for function _timer1_init
  1358  038B                     _timer1_init:	
  1359                           
  1360                           ;util.c: 15: T1CONbits.T1CKPS = 0x03;
  1361                           
  1362                           ;incstack = 0
  1363                           ; Regs used in _timer1_init: [wreg+status,2+status,0]
  1364  038B  3030               	movlw	48
  1365  038C  1283               	bcf	3,5	;RP0=0, select bank0
  1366  038D  1303               	bcf	3,6	;RP1=0, select bank0
  1367  038E  0490               	iorwf	16,f	;volatile
  1368                           
  1369                           ;util.c: 16: T1CONbits.TMR1CS = 0;
  1370  038F  1090               	bcf	16,1	;volatile
  1371  0390  0008               	return
  1372  0391                     __end_of_timer1_init:	
  1373                           
  1374                           	psect	text6
  1375  0395                     __ptext6:	
  1376 ;; *************** function _timer0_start *****************
  1377 ;; Defined at:
  1378 ;;		line 63 in file "util.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;		None
  1381 ;; Auto vars:     Size  Location     Type
  1382 ;;		None
  1383 ;; Return value:  Size  Location     Type
  1384 ;;		None               void
  1385 ;; Registers used:
  1386 ;;		None
  1387 ;; Tracked objects:
  1388 ;;		On entry : 0/0
  1389 ;;		On exit  : 0/0
  1390 ;;		Unchanged: 0/0
  1391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1392 ;;      Params:         0       0       0       0       0
  1393 ;;      Locals:         0       0       0       0       0
  1394 ;;      Temps:          0       0       0       0       0
  1395 ;;      Totals:         0       0       0       0       0
  1396 ;;Total ram usage:        0 bytes
  1397 ;; Hardware stack levels used:    1
  1398 ;; Hardware stack levels required when called:    2
  1399 ;; This function calls:
  1400 ;;		Nothing
  1401 ;; This function is called by:
  1402 ;;		_main
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           
  1407                           ;psect for function _timer0_start
  1408  0395                     _timer0_start:	
  1409                           
  1410                           ;util.c: 64: INTCONbits.TMR0IE = 1;
  1411                           
  1412                           ;incstack = 0
  1413                           ; Regs used in _timer0_start: []
  1414  0395  168B               	bsf	11,5	;volatile
  1415                           
  1416                           ;util.c: 65: INTCONbits.GIE = 1;
  1417  0396  178B               	bsf	11,7	;volatile
  1418                           
  1419                           ;util.c: 66: INTCONbits.PEIE = 1;
  1420  0397  170B               	bsf	11,6	;volatile
  1421  0398  0008               	return
  1422  0399                     __end_of_timer0_start:	
  1423                           
  1424                           	psect	text7
  1425  037A                     __ptext7:	
  1426 ;; *************** function _timer0_init *****************
  1427 ;; Defined at:
  1428 ;;		line 56 in file "util.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;		None
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;		None
  1433 ;; Return value:  Size  Location     Type
  1434 ;;		None               void
  1435 ;; Registers used:
  1436 ;;		wreg, status,2, status,0
  1437 ;; Tracked objects:
  1438 ;;		On entry : 0/0
  1439 ;;		On exit  : 0/0
  1440 ;;		Unchanged: 0/0
  1441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1442 ;;      Params:         0       0       0       0       0
  1443 ;;      Locals:         0       0       0       0       0
  1444 ;;      Temps:          0       0       0       0       0
  1445 ;;      Totals:         0       0       0       0       0
  1446 ;;Total ram usage:        0 bytes
  1447 ;; Hardware stack levels used:    1
  1448 ;; Hardware stack levels required when called:    2
  1449 ;; This function calls:
  1450 ;;		Nothing
  1451 ;; This function is called by:
  1452 ;;		_main
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455                           
  1456                           
  1457                           ;psect for function _timer0_init
  1458  037A                     _timer0_init:	
  1459                           
  1460                           ;util.c: 57: OPTION_REGbits.T0CS = 0;
  1461                           
  1462                           ;incstack = 0
  1463                           ; Regs used in _timer0_init: [wreg+status,2+status,0]
  1464  037A  1683               	bsf	3,5	;RP0=1, select bank1
  1465  037B  1303               	bcf	3,6	;RP1=0, select bank1
  1466  037C  1281               	bcf	1,5	;volatile
  1467                           
  1468                           ;util.c: 58: OPTION_REGbits.PSA = 0;
  1469  037D  1181               	bcf	1,3	;volatile
  1470                           
  1471                           ;util.c: 59: OPTION_REGbits.PS = 0x04;
  1472  037E  0801               	movf	1,w	;volatile
  1473  037F  39F8               	andlw	-8
  1474  0380  3804               	iorlw	4
  1475  0381  0081               	movwf	1	;volatile
  1476  0382  0008               	return
  1477  0383                     __end_of_timer0_init:	
  1478                           
  1479                           	psect	text8
  1480  0309                     __ptext8:	
  1481 ;; *************** function _blinkLed *****************
  1482 ;; Defined at:
  1483 ;;		line 94 in file "util.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;  stateOne        1    wreg     unsigned char 
  1486 ;;  stateTwo        1    0[BANK0 ] unsigned char 
  1487 ;;  almState        1    1[BANK0 ] unsigned char 
  1488 ;;  blinkState      1    2[BANK0 ] PTR unsigned char 
  1489 ;;		 -> blinkState(1), 
  1490 ;; Auto vars:     Size  Location     Type
  1491 ;;  stateOne        1    4[BANK0 ] unsigned char 
  1492 ;; Return value:  Size  Location     Type
  1493 ;;		None               void
  1494 ;; Registers used:
  1495 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1496 ;; Tracked objects:
  1497 ;;		On entry : 0/0
  1498 ;;		On exit  : 0/0
  1499 ;;		Unchanged: 0/0
  1500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1501 ;;      Params:         0       3       0       0       0
  1502 ;;      Locals:         0       1       0       0       0
  1503 ;;      Temps:          0       1       0       0       0
  1504 ;;      Totals:         0       5       0       0       0
  1505 ;;Total ram usage:        5 bytes
  1506 ;; Hardware stack levels used:    1
  1507 ;; Hardware stack levels required when called:    2
  1508 ;; This function calls:
  1509 ;;		Nothing
  1510 ;; This function is called by:
  1511 ;;		_main
  1512 ;; This function uses a non-reentrant model
  1513 ;;
  1514                           
  1515                           
  1516                           ;psect for function _blinkLed
  1517  0309                     _blinkLed:	
  1518                           
  1519                           ;incstack = 0
  1520                           ; Regs used in _blinkLed: [wreg-fsr0h+status,2+status,0]
  1521                           ;blinkLed@stateOne stored from wreg
  1522  0309  1283               	bcf	3,5	;RP0=0, select bank0
  1523  030A  1303               	bcf	3,6	;RP1=0, select bank0
  1524  030B  00A4               	movwf	blinkLed@stateOne
  1525                           
  1526                           ;util.c: 95: if(stateOne == 1 || stateOne == 3 || stateTwo == 1 || stateTwo == 3){
  1527  030C  0324               	decf	blinkLed@stateOne,w
  1528  030D  1903               	btfsc	3,2
  1529  030E  2B1A               	goto	l1031
  1530  030F  3003               	movlw	3
  1531  0310  0624               	xorwf	blinkLed@stateOne,w
  1532  0311  1903               	btfsc	3,2
  1533  0312  2B1A               	goto	l1031
  1534  0313  0320               	decf	blinkLed@stateTwo,w
  1535  0314  1903               	btfsc	3,2
  1536  0315  2B1A               	goto	l1031
  1537  0316  3003               	movlw	3
  1538  0317  0620               	xorwf	blinkLed@stateTwo,w
  1539  0318  1D03               	btfss	3,2
  1540  0319  2B1F               	goto	l1033
  1541  031A                     l1031:	
  1542                           
  1543                           ;util.c: 96: *blinkState |= 0x01;
  1544  031A  0822               	movf	blinkLed@blinkState,w
  1545  031B  0084               	movwf	4
  1546  031C  1383               	bcf	3,7	;select IRP bank0
  1547  031D  1400               	bsf	0,0
  1548                           
  1549                           ;util.c: 97: }else if(almState >= 1 && almState < 3){
  1550  031E  0008               	return
  1551  031F                     l1033:	
  1552  031F  0821               	movf	blinkLed@almState,w
  1553  0320  1903               	btfsc	3,2
  1554  0321  2B2B               	goto	l1039
  1555  0322  3003               	movlw	3
  1556  0323  0221               	subwf	blinkLed@almState,w
  1557  0324  1803               	skipnc
  1558  0325  2B2B               	goto	l1039
  1559                           
  1560                           ;util.c: 98: *blinkState |= 0x04;
  1561  0326  0822               	movf	blinkLed@blinkState,w
  1562  0327  0084               	movwf	4
  1563  0328  1383               	bcf	3,7	;select IRP bank0
  1564  0329  1500               	bsf	0,2
  1565                           
  1566                           ;util.c: 99: }else if (almState >= 3){
  1567  032A  0008               	return
  1568  032B                     l1039:	
  1569  032B  3003               	movlw	3
  1570  032C  0221               	subwf	blinkLed@almState,w
  1571  032D  1C03               	skipc
  1572  032E  2B35               	goto	l1045
  1573                           
  1574                           ;util.c: 100: *blinkState |= 0x08;
  1575  032F  0822               	movf	blinkLed@blinkState,w
  1576  0330  0084               	movwf	4
  1577  0331  1383               	bcf	3,7	;select IRP bank0
  1578  0332  1580               	bsf	0,3
  1579                           
  1580                           ;util.c: 101: PORTC |= (1<<3);
  1581  0333  1587               	bsf	7,3	;volatile
  1582                           
  1583                           ;util.c: 102: }else{
  1584  0334  0008               	return
  1585  0335                     l1045:	
  1586                           
  1587                           ;util.c: 103: *blinkState = 0;
  1588  0335  0822               	movf	blinkLed@blinkState,w
  1589  0336  0084               	movwf	4
  1590  0337  1383               	bcf	3,7	;select IRP bank0
  1591  0338  0180               	clrf	0
  1592                           
  1593                           ;util.c: 104: PORTC &= ~(1<<3);
  1594  0339  30F7               	movlw	247
  1595  033A  00A3               	movwf	??_blinkLed
  1596  033B  0823               	movf	??_blinkLed,w
  1597  033C  0587               	andwf	7,f	;volatile
  1598  033D  0008               	return
  1599  033E                     __end_of_blinkLed:	
  1600                           
  1601                           	psect	text9
  1602  035E                     __ptext9:	
  1603 ;; *************** function _adc_start *****************
  1604 ;; Defined at:
  1605 ;;		line 86 in file "util.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;		None
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;		None
  1610 ;; Return value:  Size  Location     Type
  1611 ;;		None               void
  1612 ;; Registers used:
  1613 ;;		None
  1614 ;; Tracked objects:
  1615 ;;		On entry : 0/0
  1616 ;;		On exit  : 0/0
  1617 ;;		Unchanged: 0/0
  1618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1619 ;;      Params:         0       0       0       0       0
  1620 ;;      Locals:         0       0       0       0       0
  1621 ;;      Temps:          0       0       0       0       0
  1622 ;;      Totals:         0       0       0       0       0
  1623 ;;Total ram usage:        0 bytes
  1624 ;; Hardware stack levels used:    1
  1625 ;; Hardware stack levels required when called:    2
  1626 ;; This function calls:
  1627 ;;		Nothing
  1628 ;; This function is called by:
  1629 ;;		_main
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           
  1634                           ;psect for function _adc_start
  1635  035E                     _adc_start:	
  1636                           
  1637                           ;util.c: 87: ADCON0bits.ADON =1;
  1638                           
  1639                           ;incstack = 0
  1640                           ; Regs used in _adc_start: []
  1641  035E  1283               	bcf	3,5	;RP0=0, select bank0
  1642  035F  1303               	bcf	3,6	;RP1=0, select bank0
  1643  0360  141F               	bsf	31,0	;volatile
  1644                           
  1645                           ;util.c: 88: ADCON0bits.GO_nDONE = 1;
  1646  0361  151F               	bsf	31,2	;volatile
  1647                           
  1648                           ;util.c: 89: PIE1bits.ADIE =1;
  1649  0362  1683               	bsf	3,5	;RP0=1, select bank1
  1650  0363  1303               	bcf	3,6	;RP1=0, select bank1
  1651  0364  170C               	bsf	12,6	;volatile
  1652                           
  1653                           ;util.c: 90: INTCONbits.GIE =1;
  1654  0365  178B               	bsf	11,7	;volatile
  1655                           
  1656                           ;util.c: 91: INTCONbits.PEIE = 1;
  1657  0366  170B               	bsf	11,6	;volatile
  1658  0367  0008               	return
  1659  0368                     __end_of_adc_start:	
  1660                           
  1661                           	psect	text10
  1662  033E                     __ptext10:	
  1663 ;; *************** function _adc_init_CH0 *****************
  1664 ;; Defined at:
  1665 ;;		line 76 in file "util.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;		None
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;		None
  1670 ;; Return value:  Size  Location     Type
  1671 ;;		None               void
  1672 ;; Registers used:
  1673 ;;		wreg, status,2, status,0
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1679 ;;      Params:         0       0       0       0       0
  1680 ;;      Locals:         0       0       0       0       0
  1681 ;;      Temps:          0       0       0       0       0
  1682 ;;      Totals:         0       0       0       0       0
  1683 ;;Total ram usage:        0 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; Hardware stack levels required when called:    2
  1686 ;; This function calls:
  1687 ;;		Nothing
  1688 ;; This function is called by:
  1689 ;;		_main
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           
  1694                           ;psect for function _adc_init_CH0
  1695  033E                     _adc_init_CH0:	
  1696                           
  1697                           ;util.c: 77: ADCON0bits.ADCS = 0x00;
  1698                           
  1699                           ;incstack = 0
  1700                           ; Regs used in _adc_init_CH0: [wreg+status,2+status,0]
  1701  033E  303F               	movlw	-193
  1702  033F  1283               	bcf	3,5	;RP0=0, select bank0
  1703  0340  1303               	bcf	3,6	;RP1=0, select bank0
  1704  0341  059F               	andwf	31,f	;volatile
  1705                           
  1706                           ;util.c: 78: ADCON0bits.CHS = 0x00;
  1707  0342  30C7               	movlw	-57
  1708  0343  059F               	andwf	31,f	;volatile
  1709                           
  1710                           ;util.c: 80: ADCON1bits.ADFM = 1;
  1711  0344  1683               	bsf	3,5	;RP0=1, select bank1
  1712  0345  1303               	bcf	3,6	;RP1=0, select bank1
  1713  0346  179F               	bsf	31,7	;volatile
  1714                           
  1715                           ;util.c: 81: ADCON1bits.PCFG = 0x00;
  1716  0347  30F0               	movlw	-16
  1717  0348  059F               	andwf	31,f	;volatile
  1718  0349  0008               	return
  1719  034A                     __end_of_adc_init_CH0:	
  1720                           
  1721                           	psect	text11
  1722  0215                     __ptext11:	
  1723 ;; *************** function _ISR *****************
  1724 ;; Defined at:
  1725 ;;		line 63 in file "main.c"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;		None
  1728 ;; Auto vars:     Size  Location     Type
  1729 ;;		None
  1730 ;; Return value:  Size  Location     Type
  1731 ;;		None               void
  1732 ;; Registers used:
  1733 ;;		wreg, status,2, status,0, pclath, cstack
  1734 ;; Tracked objects:
  1735 ;;		On entry : 0/0
  1736 ;;		On exit  : 0/0
  1737 ;;		Unchanged: 0/0
  1738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1739 ;;      Params:         0       0       0       0       0
  1740 ;;      Locals:         0       0       0       0       0
  1741 ;;      Temps:          6       0       0       0       0
  1742 ;;      Totals:         6       0       0       0       0
  1743 ;;Total ram usage:        6 bytes
  1744 ;; Hardware stack levels used:    1
  1745 ;; Hardware stack levels required when called:    1
  1746 ;; This function calls:
  1747 ;;		___awmod
  1748 ;; This function is called by:
  1749 ;;		Interrupt level 1
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753                           
  1754                           ;psect for function _ISR
  1755  0215                     _ISR:	
  1756                           
  1757                           ;main.c: 68: if(TMR0IF && TMR0IE){
  1758  0215  190B               	btfsc	11,2	;volatile
  1759  0216  1E8B               	btfss	11,5	;volatile
  1760  0217  2A51               	goto	i1l1107
  1761                           
  1762                           ;main.c: 69: if((blinkState & (0x01)== 1) && (blinkCounter % 5 == 0)){
  1763  0218  1C38               	btfss	_blinkState,0	;volatile
  1764  0219  2A2B               	goto	i1l1097
  1765  021A  3005               	movlw	5
  1766  021B  00F0               	movwf	___awmod@divisor
  1767  021C  3000               	movlw	0
  1768  021D  00F1               	movwf	___awmod@divisor+1
  1769  021E  0831               	movf	_blinkCounter+1,w	;volatile
  1770  021F  00F3               	movwf	___awmod@dividend+1
  1771  0220  0830               	movf	_blinkCounter,w	;volatile
  1772  0221  00F2               	movwf	___awmod@dividend
  1773  0222  120A  118A  22BE  120A  118A  	fcall	___awmod
  1774  0227  0870               	movf	?___awmod,w
  1775  0228  0471               	iorwf	?___awmod+1,w
  1776  0229  1903               	btfsc	3,2
  1777  022A  2A42               	goto	i1l1101
  1778  022B                     i1l1097:	
  1779                           ;main.c: 71: }else if((blinkState == 4) && (blinkCounter % 20 == 0)){
  1780                           
  1781                           ;main.c: 70: PORTC ^= (1<<3);
  1782                           
  1783  022B  3004               	movlw	4
  1784  022C  1283               	bcf	3,5	;RP0=0, select bank0
  1785  022D  1303               	bcf	3,6	;RP1=0, select bank0
  1786  022E  0638               	xorwf	_blinkState,w	;volatile
  1787  022F  1D03               	btfss	3,2
  1788  0230  2A48               	goto	i1l1103
  1789  0231  3014               	movlw	20
  1790  0232  00F0               	movwf	___awmod@divisor
  1791  0233  3000               	movlw	0
  1792  0234  00F1               	movwf	___awmod@divisor+1
  1793  0235  0831               	movf	_blinkCounter+1,w	;volatile
  1794  0236  00F3               	movwf	___awmod@dividend+1
  1795  0237  0830               	movf	_blinkCounter,w	;volatile
  1796  0238  00F2               	movwf	___awmod@dividend
  1797  0239  120A  118A  22BE  120A  118A  	fcall	___awmod
  1798  023E  0870               	movf	?___awmod,w
  1799  023F  0471               	iorwf	?___awmod+1,w
  1800  0240  1D03               	btfss	3,2
  1801  0241  2A48               	goto	i1l1103
  1802  0242                     i1l1101:	
  1803                           
  1804                           ;main.c: 72: PORTC ^= (1<<3);
  1805  0242  3008               	movlw	8
  1806  0243  00F7               	movwf	??_ISR
  1807  0244  0877               	movf	??_ISR,w
  1808  0245  1283               	bcf	3,5	;RP0=0, select bank0
  1809  0246  1303               	bcf	3,6	;RP1=0, select bank0
  1810  0247  0687               	xorwf	7,f	;volatile
  1811  0248                     i1l1103:	
  1812                           
  1813                           ;main.c: 73: }
  1814                           ;main.c: 74: blinkCounter ++;
  1815  0248  3001               	movlw	1
  1816  0249  1283               	bcf	3,5	;RP0=0, select bank0
  1817  024A  1303               	bcf	3,6	;RP1=0, select bank0
  1818  024B  07B0               	addwf	_blinkCounter,f	;volatile
  1819  024C  1803               	skipnc
  1820  024D  0AB1               	incf	_blinkCounter+1,f	;volatile
  1821  024E  3000               	movlw	0
  1822  024F  07B1               	addwf	_blinkCounter+1,f	;volatile
  1823                           
  1824                           ;main.c: 75: TMR0IF = 0;
  1825  0250  110B               	bcf	11,2	;volatile
  1826  0251                     i1l1107:	
  1827                           
  1828                           ;main.c: 76: }
  1829                           ;main.c: 79: if(TMR1IE && TMR1IF){
  1830  0251  1683               	bsf	3,5	;RP0=1, select bank1
  1831  0252  1303               	bcf	3,6	;RP1=0, select bank1
  1832  0253  1C0C               	btfss	12,0	;volatile
  1833  0254  2A6D               	goto	i1l1121
  1834  0255  1283               	bcf	3,5	;RP0=0, select bank0
  1835  0256  1303               	bcf	3,6	;RP1=0, select bank0
  1836  0257  1C0C               	btfss	12,0	;volatile
  1837  0258  2A6D               	goto	i1l1121
  1838                           
  1839                           ;main.c: 82: if(alarmState == 1){
  1840  0259  0336               	decf	_alarmState,w	;volatile
  1841  025A  1D03               	btfss	3,2
  1842  025B  2A62               	goto	i1l1115
  1843                           
  1844                           ;main.c: 83: almCounter ++;
  1845  025C  3001               	movlw	1
  1846  025D  07AE               	addwf	_almCounter,f	;volatile
  1847  025E  1803               	skipnc
  1848  025F  0AAF               	incf	_almCounter+1,f	;volatile
  1849  0260  3000               	movlw	0
  1850  0261  07AF               	addwf	_almCounter+1,f	;volatile
  1851  0262                     i1l1115:	
  1852                           
  1853                           ;main.c: 84: }
  1854                           ;main.c: 85: if(alarmState == 2){
  1855  0262  3002               	movlw	2
  1856  0263  0636               	xorwf	_alarmState,w	;volatile
  1857  0264  1D03               	btfss	3,2
  1858  0265  2A6C               	goto	i1l1119
  1859                           
  1860                           ;main.c: 86: almCounter += 3;
  1861  0266  3003               	movlw	3
  1862  0267  07AE               	addwf	_almCounter,f	;volatile
  1863  0268  1803               	skipnc
  1864  0269  0AAF               	incf	_almCounter+1,f	;volatile
  1865  026A  3000               	movlw	0
  1866  026B  07AF               	addwf	_almCounter+1,f	;volatile
  1867  026C                     i1l1119:	
  1868                           
  1869                           ;main.c: 87: }
  1870                           ;main.c: 88: TMR1IF = 0;
  1871  026C  100C               	bcf	12,0	;volatile
  1872  026D                     i1l1121:	
  1873                           
  1874                           ;main.c: 89: }
  1875                           ;main.c: 92: if(TMR2IF && TMR2IE){
  1876  026D  1283               	bcf	3,5	;RP0=0, select bank0
  1877  026E  1C8C               	btfss	12,1	;volatile
  1878  026F  2A92               	goto	i1l1139
  1879  0270  1683               	bsf	3,5	;RP0=1, select bank1
  1880  0271  1303               	bcf	3,6	;RP1=0, select bank1
  1881  0272  1C8C               	btfss	12,1	;volatile
  1882  0273  2A92               	goto	i1l1139
  1883                           
  1884                           ;main.c: 93: if(lvlOneState == 1 || lvlOneState == 3){
  1885  0274  037D               	decf	_lvlOneState,w	;volatile
  1886  0275  1903               	btfsc	3,2
  1887  0276  2A7B               	goto	i1l1129
  1888  0277  3003               	movlw	3
  1889  0278  067D               	xorwf	_lvlOneState,w	;volatile
  1890  0279  1D03               	btfss	3,2
  1891  027A  2A83               	goto	i1l1131
  1892  027B                     i1l1129:	
  1893                           
  1894                           ;main.c: 94: counter1++;
  1895  027B  3001               	movlw	1
  1896  027C  1283               	bcf	3,5	;RP0=0, select bank0
  1897  027D  1303               	bcf	3,6	;RP1=0, select bank0
  1898  027E  07B2               	addwf	_counter1,f	;volatile
  1899  027F  1803               	skipnc
  1900  0280  0AB3               	incf	_counter1+1,f	;volatile
  1901  0281  3000               	movlw	0
  1902  0282  07B3               	addwf	_counter1+1,f	;volatile
  1903  0283                     i1l1131:	
  1904                           
  1905                           ;main.c: 95: }
  1906                           ;main.c: 97: if(lvlTwoState == 1 || lvlTwoState == 3){
  1907  0283  1283               	bcf	3,5	;RP0=0, select bank0
  1908  0284  0337               	decf	_lvlTwoState,w	;volatile
  1909  0285  1903               	btfsc	3,2
  1910  0286  2A8B               	goto	i1l1135
  1911  0287  3003               	movlw	3
  1912  0288  0637               	xorwf	_lvlTwoState,w	;volatile
  1913  0289  1D03               	btfss	3,2
  1914  028A  2A91               	goto	i1l1137
  1915  028B                     i1l1135:	
  1916                           
  1917                           ;main.c: 98: counter2++;
  1918  028B  3001               	movlw	1
  1919  028C  07B4               	addwf	_counter2,f	;volatile
  1920  028D  1803               	skipnc
  1921  028E  0AB5               	incf	_counter2+1,f	;volatile
  1922  028F  3000               	movlw	0
  1923  0290  07B5               	addwf	_counter2+1,f	;volatile
  1924  0291                     i1l1137:	
  1925                           
  1926                           ;main.c: 99: }
  1927                           ;main.c: 100: TMR2IF = 0;
  1928  0291  108C               	bcf	12,1	;volatile
  1929  0292                     i1l1139:	
  1930                           
  1931                           ;main.c: 101: }
  1932                           ;main.c: 104: if(ADIF && ADIE){
  1933  0292  1283               	bcf	3,5	;RP0=0, select bank0
  1934  0293  1F0C               	btfss	12,6	;volatile
  1935  0294  2AB2               	goto	i1l94
  1936  0295  1683               	bsf	3,5	;RP0=1, select bank1
  1937  0296  1303               	bcf	3,6	;RP1=0, select bank1
  1938  0297  1F0C               	btfss	12,6	;volatile
  1939  0298  2AB2               	goto	i1l94
  1940                           
  1941                           ;main.c: 105: adcResult = (ADRESH <<8) | (ADRESL);
  1942  0299  1283               	bcf	3,5	;RP0=0, select bank0
  1943  029A  1303               	bcf	3,6	;RP1=0, select bank0
  1944  029B  081E               	movf	30,w	;volatile
  1945  029C  00BA               	movwf	_adcResult+1	;volatile
  1946  029D  1683               	bsf	3,5	;RP0=1, select bank1
  1947  029E  1303               	bcf	3,6	;RP1=0, select bank1
  1948  029F  081E               	movf	30,w	;volatile
  1949  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  1950  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  1951  02A2  00B9               	movwf	_adcResult	;volatile
  1952                           
  1953                           ;main.c: 106: alarmTimer = adcResult >> 2;
  1954  02A3  083A               	movf	_adcResult+1,w	;volatile
  1955  02A4  00F8               	movwf	??_ISR+1
  1956  02A5  0839               	movf	_adcResult,w	;volatile
  1957  02A6  00F7               	movwf	??_ISR
  1958  02A7  0D78               	rlf	??_ISR+1,w
  1959  02A8  0CF8               	rrf	??_ISR+1,f
  1960  02A9  0CF7               	rrf	??_ISR,f
  1961  02AA  0D78               	rlf	??_ISR+1,w
  1962  02AB  0CF8               	rrf	??_ISR+1,f
  1963  02AC  0CF7               	rrf	??_ISR,f
  1964  02AD  0877               	movf	??_ISR,w
  1965  02AE  00BB               	movwf	_alarmTimer	;volatile
  1966  02AF  0878               	movf	??_ISR+1,w
  1967  02B0  00BC               	movwf	_alarmTimer+1	;volatile
  1968                           
  1969                           ;main.c: 108: ADIF = 0;
  1970  02B1  130C               	bcf	12,6	;volatile
  1971  02B2                     i1l94:	
  1972  02B2  087C               	movf	??_ISR+5,w
  1973  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  1974  02B4  00FF               	movwf	127
  1975  02B5  087B               	movf	??_ISR+4,w
  1976  02B6  008A               	movwf	10
  1977  02B7  087A               	movf	??_ISR+3,w
  1978  02B8  0084               	movwf	4
  1979  02B9  0E79               	swapf	(??_ISR+2)^(0+-128),w
  1980  02BA  0083               	movwf	3
  1981  02BB  0EFE               	swapf	126,f
  1982  02BC  0E7E               	swapf	126,w
  1983  02BD  0009               	retfie
  1984  02BE                     __end_of_ISR:	
  1985                           
  1986                           	psect	intentry
  1987  0004                     __pintentry:	
  1988                           ;incstack = 0
  1989                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  1990                           
  1991  0004                     interrupt_function:	
  1992  007E                     saved_w	set	btemp
  1993  0004  00FE               	movwf	btemp
  1994  0005  0E03               	swapf	3,w
  1995  0006  00F9               	movwf	??_ISR+2
  1996  0007  0804               	movf	4,w
  1997  0008  00FA               	movwf	??_ISR+3
  1998  0009  080A               	movf	10,w
  1999  000A  00FB               	movwf	??_ISR+4
  2000  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2001  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2002  000D  087F               	movf	btemp+1,w
  2003  000E  00FC               	movwf	??_ISR+5
  2004  000F  120A  118A  2A15   	ljmp	_ISR
  2005                           
  2006                           	psect	text12
  2007  02BE                     __ptext12:	
  2008 ;; *************** function ___awmod *****************
  2009 ;; Defined at:
  2010 ;;		line 6 in file "/opt/microchip/xc8/v1.34/sources/common/awmod.c"
  2011 ;; Parameters:    Size  Location     Type
  2012 ;;  divisor         2    0[COMMON] int 
  2013 ;;  dividend        2    2[COMMON] int 
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;  sign            1    6[COMMON] unsigned char 
  2016 ;;  counter         1    5[COMMON] unsigned char 
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  2    0[COMMON] int 
  2019 ;; Registers used:
  2020 ;;		wreg, status,2, status,0
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2026 ;;      Params:         4       0       0       0       0
  2027 ;;      Locals:         2       0       0       0       0
  2028 ;;      Temps:          1       0       0       0       0
  2029 ;;      Totals:         7       0       0       0       0
  2030 ;;Total ram usage:        7 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; This function calls:
  2033 ;;		Nothing
  2034 ;; This function is called by:
  2035 ;;		_ISR
  2036 ;; This function uses a non-reentrant model
  2037 ;;
  2038                           
  2039                           
  2040                           ;psect for function ___awmod
  2041  02BE                     ___awmod:	
  2042                           
  2043                           ;incstack = 0
  2044                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2045  02BE  01F6               	clrf	___awmod@sign
  2046  02BF  1FF3               	btfss	___awmod@dividend+1,7
  2047  02C0  2AC8               	goto	i1l1057
  2048  02C1  09F2               	comf	___awmod@dividend,f
  2049  02C2  09F3               	comf	___awmod@dividend+1,f
  2050  02C3  0AF2               	incf	___awmod@dividend,f
  2051  02C4  1903               	skipnz
  2052  02C5  0AF3               	incf	___awmod@dividend+1,f
  2053  02C6  01F6               	clrf	___awmod@sign
  2054  02C7  0AF6               	incf	___awmod@sign,f
  2055  02C8                     i1l1057:	
  2056  02C8  1FF1               	btfss	___awmod@divisor+1,7
  2057  02C9  2ACF               	goto	i1l1061
  2058  02CA  09F0               	comf	___awmod@divisor,f
  2059  02CB  09F1               	comf	___awmod@divisor+1,f
  2060  02CC  0AF0               	incf	___awmod@divisor,f
  2061  02CD  1903               	skipnz
  2062  02CE  0AF1               	incf	___awmod@divisor+1,f
  2063  02CF                     i1l1061:	
  2064  02CF  0870               	movf	___awmod@divisor,w
  2065  02D0  0471               	iorwf	___awmod@divisor+1,w
  2066  02D1  1903               	btfsc	3,2
  2067  02D2  2AFC               	goto	i1l1079
  2068  02D3  01F5               	clrf	___awmod@counter
  2069  02D4  0AF5               	incf	___awmod@counter,f
  2070  02D5                     i1l1069:	
  2071  02D5  1BF1               	btfsc	___awmod@divisor+1,7
  2072  02D6  2AE3               	goto	i1l1071
  2073  02D7  3001               	movlw	1
  2074  02D8                     u78_25:	
  2075  02D8  1003               	clrc
  2076  02D9  0DF0               	rlf	___awmod@divisor,f
  2077  02DA  0DF1               	rlf	___awmod@divisor+1,f
  2078  02DB  3EFF               	addlw	-1
  2079  02DC  1D03               	skipz
  2080  02DD  2AD8               	goto	u78_25
  2081  02DE  3001               	movlw	1
  2082  02DF  00F4               	movwf	??___awmod
  2083  02E0  0874               	movf	??___awmod,w
  2084  02E1  07F5               	addwf	___awmod@counter,f
  2085  02E2  2AD5               	goto	i1l1069
  2086  02E3                     i1l1071:	
  2087  02E3  0871               	movf	___awmod@divisor+1,w
  2088  02E4  0273               	subwf	___awmod@dividend+1,w
  2089  02E5  1D03               	skipz
  2090  02E6  2AE9               	goto	u80_25
  2091  02E7  0870               	movf	___awmod@divisor,w
  2092  02E8  0272               	subwf	___awmod@dividend,w
  2093  02E9                     u80_25:	
  2094  02E9  1C03               	skipc
  2095  02EA  2AF1               	goto	i1l1075
  2096  02EB  0870               	movf	___awmod@divisor,w
  2097  02EC  02F2               	subwf	___awmod@dividend,f
  2098  02ED  0871               	movf	___awmod@divisor+1,w
  2099  02EE  1C03               	skipc
  2100  02EF  03F3               	decf	___awmod@dividend+1,f
  2101  02F0  02F3               	subwf	___awmod@dividend+1,f
  2102  02F1                     i1l1075:	
  2103  02F1  3001               	movlw	1
  2104  02F2                     u81_25:	
  2105  02F2  1003               	clrc
  2106  02F3  0CF1               	rrf	___awmod@divisor+1,f
  2107  02F4  0CF0               	rrf	___awmod@divisor,f
  2108  02F5  3EFF               	addlw	-1
  2109  02F6  1D03               	skipz
  2110  02F7  2AF2               	goto	u81_25
  2111  02F8  3001               	movlw	1
  2112  02F9  02F5               	subwf	___awmod@counter,f
  2113  02FA  1D03               	btfss	3,2
  2114  02FB  2AE3               	goto	i1l1071
  2115  02FC                     i1l1079:	
  2116  02FC  0876               	movf	___awmod@sign,w
  2117  02FD  1903               	btfsc	3,2
  2118  02FE  2B04               	goto	i1l1083
  2119  02FF  09F2               	comf	___awmod@dividend,f
  2120  0300  09F3               	comf	___awmod@dividend+1,f
  2121  0301  0AF2               	incf	___awmod@dividend,f
  2122  0302  1903               	skipnz
  2123  0303  0AF3               	incf	___awmod@dividend+1,f
  2124  0304                     i1l1083:	
  2125  0304  0873               	movf	___awmod@dividend+1,w
  2126  0305  00F1               	movwf	?___awmod+1
  2127  0306  0872               	movf	___awmod@dividend,w
  2128  0307  00F0               	movwf	?___awmod
  2129  0308  0008               	return
  2130  0309                     __end_of___awmod:	
  2131  007E                     btemp	set	126	;btemp
  2132  007E                     wtemp	set	126
  2133  007E                     wtemp0	set	126
  2134  0080                     wtemp1	set	128
  2135  0082                     wtemp2	set	130
  2136  0084                     wtemp3	set	132
  2137  0086                     wtemp4	set	134
  2138  0088                     wtemp5	set	136
  2139  007F                     wtemp6	set	127
  2140  007E                     ttemp	set	126
  2141  007E                     ttemp0	set	126
  2142  0081                     ttemp1	set	129
  2143  0084                     ttemp2	set	132
  2144  0087                     ttemp3	set	135
  2145  007F                     ttemp4	set	127
  2146  007E                     ltemp	set	126
  2147  007E                     ltemp0	set	126
  2148  0082                     ltemp1	set	130
  2149  0086                     ltemp2	set	134
  2150  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    4
    Data        4
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     14      29
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    blinkLed@blinkState	PTR unsigned char  size(1) Largest target is 1
		 -> blinkState(BANK0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awmod

Critical Paths under _main in BANK0

    _main->_blinkLed

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0     765
                                              5 BANK0      9     9      0
                       _adc_init_CH0
                          _adc_start
                           _blinkLed
                        _timer0_init
                       _timer0_start
                        _timer1_init
                       _timer1_start
                        _timer1_stop
                        _timer2_init
                       _timer2_start
 ---------------------------------------------------------------------------------
 (1) _timer2_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _blinkLed                                             5     2      3     401
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _adc_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_init_CH0                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  6     6      0     508
                                              7 COMMON     6     6      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     508
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc_init_CH0
   _adc_start
   _blinkLed
   _timer0_init
   _timer0_start
   _timer1_init
   _timer1_start
   _timer1_stop
   _timer2_init
   _timer2_start

 _ISR (ROOT)
   ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      E      1D       5       36.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      2B      12        0.0%
ABS                  0      0      2B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu May 28 13:49:20 2015

                        pc 0002                __CFG_CP$OFF 0000                         fsr 0004  
             __CFG_CPD$OFF 0000                        _ISR 0215                __CFG_WRT$ON 0000  
                      fsr0 0004                        indf 0000               ___awmod@sign 0076  
             __CFG_FOSC$HS 0000               __CFG_LVP$OFF 0000                       ?_ISR 0070  
                     l1031 031A                       l1033 031F                       l1045 0335  
                     l1301 01C3                       l1039 032B                       l1311 01E4  
                     l1223 00E9                       l1231 010F                       l1215 00DE  
                     l1207 00CD                       l1313 01F9                       l1251 0133  
                     l1245 0129                       l1237 011F                       l1191 00A0  
                     l1193 00A3                       l1177 0083                       l1267 0164  
                     l1259 0153                       l1291 01A8                       l1277 0172  
                     l1285 0198                       l1269 0167                       l1199 00AD  
                     _ADIE 0466                       _ADIF 0066                       u1215 014E  
                     u1145 0104                       u1075 00C8                       u1325 01CD  
                     u1335 020A                       u1285 018D                       i1l94 02B2  
    __size_of_adc_init_CH0 000C               main@adcDelay 0028                       _main 003B  
                     btemp 007E              __CFG_BOREN$ON 0000                       ltemp 007E  
                     start 0012                       ttemp 007E                       wtemp 007E  
                    ??_ISR 0077           blinkLed@almState 0021                      ?_main 0070  
            __CFG_WDTE$OFF 0000            __end_of___awmod 0309                      _PORTB 0006  
                    _PORTC 0007                      u80_25 02E9                      _TRISA 0085  
                    _TRISB 0086                      u81_25 02F2                      _TRISC 0087  
                    u78_25 02D8               _adc_init_CH0 033E                      main@i 0029  
                    pclath 000A                      ltemp0 007E                      ltemp1 0082  
                    ltemp2 0086                      ltemp3 0080                      ttemp0 007E  
                    ttemp1 0081                      ttemp2 0084                      ttemp3 0087  
                    ttemp4 007F                      status 0003                      wtemp0 007E  
                    wtemp1 0080                      wtemp2 0082                      wtemp3 0084  
                    wtemp4 0086                      wtemp5 0088                      wtemp6 007F  
         blinkLed@stateOne 0024           blinkLed@stateTwo 0020            __initialization 0015  
             __end_of_main 0215                     ??_main 0025                     _ADRESH 001E  
                   _ADRESL 009E                     i1l1101 0242                     i1l1103 0248  
                   i1l1121 026D                     i1l1131 0283                     i1l1115 0262  
                   i1l1107 0251                     i1l1061 02CF                     i1l1071 02E3  
                   i1l1135 028B                     i1l1119 026C                     i1l1057 02C8  
                   i1l1137 0291                     i1l1129 027B                     i1l1083 0304  
                   i1l1075 02F1                     i1l1139 0292                     i1l1069 02D5  
                   i1l1079 02FC                     i1l1097 022B                     _TMR0IE 005D  
                   _TMR0IF 005A                     _TMR1IE 0460                     _TMR1IF 0060  
                   _TMR2IE 0461                     _TMR2IF 0061           __end_of_blinkLed 033E  
           __CFG_PWRTE$OFF 0000                  ??___awmod 0074               ?_timer0_init 0070  
             ?_timer1_init 0070               ?_timer2_init 0070               ?_timer1_stop 0070  
          ___awmod@divisor 0070            ___awmod@counter 0075                     saved_w 007E  
  __end_of__initialization 0037         __size_of_adc_start 000A             __pcstackCOMMON 0070  
             __pidataBANK0 0391             _OPTION_REGbits 0081                 _almCounter 002E  
               __pbssBANK0 002E                 _alarmTimer 003B                 _alarmState 0036  
               __pmaintext 003B         blinkLed@blinkState 0022                 _blinkState 0038  
               __pintentry 0004               _blinkCounter 0030          __end_of_adc_start 0368  
                ?_blinkLed 0020                 __stringtab 034A                    ___awmod 02BE  
        _FILTERTMR_ISEMPTY 0350             main@lvlOneRead 002C       __size_of_timer0_init 0009  
     __size_of_timer1_init 0006                    __ptext1 0368                    __ptext2 0371  
                  __ptext3 0383                    __ptext4 0354                    __ptext5 038B  
                  __ptext6 0395                    __ptext7 037A                    __ptext8 0309  
                  __ptext9 035E       __size_of_timer2_init 0009              ?_timer0_start 0070  
     __size_of_timer1_stop 0008              ?_timer1_start 0070             main@lvlTwoRead 002D  
            ?_timer2_start 0070               __size_of_ISR 00A9                  _T1CONbits 0010  
                _T2CONbits 0012           ___awmod@dividend 0072                 ??_blinkLed 0023  
           main@sensorRead 002B       end_of_initialization 0037  __end_of_FILTERTMR_ISEMPTY 0352  
           ??_timer0_start 0020             ??_timer1_start 0020             ??_timer2_start 0020  
      start_initialization 0015                __end_of_ISR 02BE                __pdataBANK0 0039  
            ?_adc_init_CH0 0070                __pbssCOMMON 007D                  ___latbits 0002  
                _adcResult 0039              __pcstackBANK0 0020                  _adc_start 035E  
        __size_of_blinkLed 0035       __end_of_timer0_start 0399       __end_of_timer1_start 035E  
     __end_of_timer2_start 0371                   ?___awmod 0070                  __pstrings 034A  
           ??_adc_init_CH0 0020           _FILTERTMR_ISFULL 0352                 ?_adc_start 0070  
        interrupt_function 0004                   _PIE1bits 008C              ??_timer0_init 0020  
            ??_timer1_init 0020              ??_timer2_init 0020              ??_timer1_stop 0020  
               _ADCON0bits 001F                __stringbase 034F                 _ADCON1bits 009F  
         __size_of___awmod 004B         __end_of__stringtab 0350        __end_of_timer0_init 0383  
      __end_of_timer1_init 0391        __end_of_timer2_init 037A        __end_of_timer1_stop 038B  
                 _blinkLed 0309                   __ptext10 033E                   __ptext11 0215  
                 __ptext12 02BE      __size_of_timer0_start 0004                ??_adc_start 0020  
    __size_of_timer1_start 000A      __size_of_timer2_start 0009                   _counter1 0032  
                 _counter2 0034              __size_of_main 01DA       __end_of_adc_init_CH0 034A  
              _lvlOneState 007D               _timer0_start 0395               _timer1_start 0354  
             _timer2_start 0368                 _INTCONbits 000B                   intlevel1 0000  
              _lvlTwoState 0037                  stringcode 034A   __end_of_FILTERTMR_ISFULL 0354  
              _timer0_init 037A                _timer1_init 038B                _timer2_init 0371  
              _timer1_stop 0383                   stringdir 034A                   stringtab 034A  
