

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Jun 21 02:13:16 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F876
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	intentry,global,class=CODE,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     	;# 
    27  0001                     	;# 
    28  0002                     	;# 
    29  0003                     	;# 
    30  0004                     	;# 
    31  0005                     	;# 
    32  0006                     	;# 
    33  0007                     	;# 
    34  000A                     	;# 
    35  000B                     	;# 
    36  000C                     	;# 
    37  000D                     	;# 
    38  000E                     	;# 
    39  000E                     	;# 
    40  000F                     	;# 
    41  0010                     	;# 
    42  0011                     	;# 
    43  0012                     	;# 
    44  0013                     	;# 
    45  0014                     	;# 
    46  0015                     	;# 
    47  0015                     	;# 
    48  0016                     	;# 
    49  0017                     	;# 
    50  0018                     	;# 
    51  0019                     	;# 
    52  001A                     	;# 
    53  001B                     	;# 
    54  001B                     	;# 
    55  001C                     	;# 
    56  001D                     	;# 
    57  001E                     	;# 
    58  001F                     	;# 
    59  0081                     	;# 
    60  0085                     	;# 
    61  0086                     	;# 
    62  0087                     	;# 
    63  008C                     	;# 
    64  008D                     	;# 
    65  008E                     	;# 
    66  0091                     	;# 
    67  0092                     	;# 
    68  0093                     	;# 
    69  0094                     	;# 
    70  0098                     	;# 
    71  0099                     	;# 
    72  009E                     	;# 
    73  009F                     	;# 
    74  010C                     	;# 
    75  010D                     	;# 
    76  010E                     	;# 
    77  010F                     	;# 
    78  018C                     	;# 
    79  018D                     	;# 
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000D                     	;# 
    92  000E                     	;# 
    93  000E                     	;# 
    94  000F                     	;# 
    95  0010                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0013                     	;# 
    99  0014                     	;# 
   100  0015                     	;# 
   101  0015                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001B                     	;# 
   109  001C                     	;# 
   110  001D                     	;# 
   111  001E                     	;# 
   112  001F                     	;# 
   113  0081                     	;# 
   114  0085                     	;# 
   115  0086                     	;# 
   116  0087                     	;# 
   117  008C                     	;# 
   118  008D                     	;# 
   119  008E                     	;# 
   120  0091                     	;# 
   121  0092                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009E                     	;# 
   127  009F                     	;# 
   128  010C                     	;# 
   129  010D                     	;# 
   130  010E                     	;# 
   131  010F                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  0007                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  000E                     	;# 
   148  000F                     	;# 
   149  0010                     	;# 
   150  0011                     	;# 
   151  0012                     	;# 
   152  0013                     	;# 
   153  0014                     	;# 
   154  0015                     	;# 
   155  0015                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001B                     	;# 
   163  001C                     	;# 
   164  001D                     	;# 
   165  001E                     	;# 
   166  001F                     	;# 
   167  0081                     	;# 
   168  0085                     	;# 
   169  0086                     	;# 
   170  0087                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  0091                     	;# 
   175  0092                     	;# 
   176  0093                     	;# 
   177  0094                     	;# 
   178  0098                     	;# 
   179  0099                     	;# 
   180  009E                     	;# 
   181  009F                     	;# 
   182  010C                     	;# 
   183  010D                     	;# 
   184  010E                     	;# 
   185  010F                     	;# 
   186  018C                     	;# 
   187  018D                     	;# 
   188                           
   189                           	psect	strings
   190  02D2                     __pstrings:	
   191  02D2                     stringtab:	
   192  02D2                     __stringtab:	
   193  02D2                     stringcode:	
   194                           ;	String table - string pointers are 1 byte each
   195                           
   196  02D2                     stringdir:	
   197  02D2  3002               	movlw	high stringdir
   198  02D3  008A               	movwf	10
   199  02D4  0804               	movf	4,w
   200  02D5  0A84               	incf	4,f
   201  02D6  0782               	addwf	2,f
   202  02D7                     __stringbase:	
   203  02D7  3400               	retlw	0
   204  02D8                     __end_of__stringtab:	
   205  02D8                     _FILTERTMR_TO_EMPTY:	
   206  02D8  3432               	retlw	50
   207  02D9  3400               	retlw	0
   208  02DA                     __end_of_FILTERTMR_TO_EMPTY:	
   209  02DA                     _FILTERTMR_TO_FULL:	
   210  02DA  3432               	retlw	50
   211  02DB  3400               	retlw	0
   212  02DC                     __end_of_FILTERTMR_TO_FULL:	
   213  001F                     _ADCON0bits	set	31
   214  001E                     _ADRESH	set	30
   215  000B                     _INTCONbits	set	11
   216  0006                     _PORTB	set	6
   217  0007                     _PORTC	set	7
   218  0010                     _T1CONbits	set	16
   219  0012                     _T2CONbits	set	18
   220  0066                     _ADIF	set	102
   221  005D                     _TMR0IE	set	93
   222  005A                     _TMR0IF	set	90
   223  0060                     _TMR1IF	set	96
   224  0061                     _TMR2IF	set	97
   225  009F                     _ADCON1bits	set	159
   226  009E                     _ADRESL	set	158
   227  0081                     _OPTION_REGbits	set	129
   228  008C                     _PIE1bits	set	140
   229  0085                     _TRISA	set	133
   230  0086                     _TRISB	set	134
   231  0087                     _TRISC	set	135
   232  0466                     _ADIE	set	1126
   233  0460                     _TMR1IE	set	1120
   234  0461                     _TMR2IE	set	1121
   235                           
   236                           ; #config settings
   237  0000                     
   238                           	psect	cinit
   239  0015                     start_initialization:	
   240  0015                     __initialization:	
   241                           
   242                           ; Clear objects allocated to BANK0
   243  0015  1383               	bcf	3,7	;select IRP bank0
   244  0016  3020               	movlw	low __pbssBANK0
   245  0017  0084               	movwf	4
   246  0018  3032               	movlw	low (__pbssBANK0+18)
   247  0019  120A  118A  22F7   	fcall	clear_ram0
   248  001C                     end_of_initialization:	
   249                           ;End of C runtime variable initialization code
   250                           
   251  001C                     __end_of__initialization:	
   252  001C  0183               	clrf	3
   253  001D  120A  118A  29C7   	ljmp	_main	;jump to C main() function
   254                           
   255                           	psect	bssBANK0
   256  0020                     __pbssBANK0:	
   257  0020                     _theAlarm:	
   258  0020                     	ds	3
   259  0023                     ISR@adcResult:	
   260  0023                     	ds	2
   261  0025                     ISR@blinkCounter:	
   262  0025                     	ds	2
   263  0027                     _blinkState:	
   264  0027                     	ds	1
   265  0028                     _levelSensors:	
   266  0028                     	ds	10
   267                           
   268                           	psect	clrtext
   269  02F7                     clear_ram0:	
   270                           ;	Called with FSR containing the base address, and
   271                           ;	W with the last address+1
   272                           
   273  02F7  0064               	clrwdt	;clear the watchdog before getting into this loop
   274  02F8                     clrloop0:	
   275  02F8  0180               	clrf	0	;clear RAM location pointed to by FSR
   276  02F9  0A84               	incf	4,f	;increment pointer
   277  02FA  0604               	xorwf	4,w	;XOR with final address
   278  02FB  1903               	btfsc	3,2	;have we reached the end yet?
   279  02FC  3400               	retlw	0	;all done for this memory range, return
   280  02FD  0604               	xorwf	4,w	;XOR again to restore value
   281  02FE  2AF8               	goto	clrloop0	;do the next byte
   282                           
   283                           	psect	cstackCOMMON
   284  0070                     __pcstackCOMMON:	
   285  0070                     ?_timer1_stop:	
   286  0070                     ??_timer1_stop:	
   287                           ; 0 bytes @ 0x0
   288                           
   289  0070                     ?_init_sensor:	
   290                           ; 0 bytes @ 0x0
   291                           
   292  0070                     ?_timer0_init:	
   293                           ; 0 bytes @ 0x0
   294                           
   295  0070                     ?_timer1_init:	
   296                           ; 0 bytes @ 0x0
   297                           
   298  0070                     ?_timer2_init:	
   299                           ; 0 bytes @ 0x0
   300                           
   301  0070                     ?_adc_init_CH0:	
   302                           ; 0 bytes @ 0x0
   303                           
   304  0070                     ?_timer0_start:	
   305                           ; 0 bytes @ 0x0
   306                           
   307  0070                     ?_timer2_start:	
   308                           ; 0 bytes @ 0x0
   309                           
   310  0070                     ?_checkTankStatus:	
   311                           ; 0 bytes @ 0x0
   312                           
   313  0070                     ?_checkSensorState:	
   314                           ; 0 bytes @ 0x0
   315                           
   316  0070                     ?_hello_world:	
   317                           ; 0 bytes @ 0x0
   318                           
   319  0070                     ?_ISR:	
   320                           ; 0 bytes @ 0x0
   321                           
   322  0070                     ?_main:	
   323                           ; 0 bytes @ 0x0
   324                           
   325  0070                     ?___awmod:	
   326                           ; 2 bytes @ 0x0
   327                           
   328  0070                     ___awmod@divisor:	
   329                           ; 2 bytes @ 0x0
   330                           
   331                           
   332                           ; 2 bytes @ 0x0
   333  0070                     	ds	2
   334  0072                     ___awmod@dividend:	
   335                           
   336                           ; 2 bytes @ 0x2
   337  0072                     	ds	2
   338  0074                     ??___awmod:	
   339                           
   340                           ; 0 bytes @ 0x4
   341  0074                     	ds	1
   342  0075                     ___awmod@counter:	
   343                           
   344                           ; 1 bytes @ 0x5
   345  0075                     	ds	1
   346  0076                     ___awmod@sign:	
   347                           
   348                           ; 1 bytes @ 0x6
   349  0076                     	ds	1
   350  0077                     ??_ISR:	
   351                           
   352                           ; 0 bytes @ 0x7
   353  0077                     	ds	7
   354                           
   355                           	psect	cstackBANK0
   356  0032                     __pcstackBANK0:	
   357  0032                     ??_init_sensor:	
   358  0032                     ??_timer0_init:	
   359                           ; 0 bytes @ 0x0
   360                           
   361  0032                     ??_timer1_init:	
   362                           ; 0 bytes @ 0x0
   363                           
   364  0032                     ??_timer2_init:	
   365                           ; 0 bytes @ 0x0
   366                           
   367  0032                     ??_adc_init_CH0:	
   368                           ; 0 bytes @ 0x0
   369                           
   370  0032                     ??_timer0_start:	
   371                           ; 0 bytes @ 0x0
   372                           
   373  0032                     ??_timer2_start:	
   374                           ; 0 bytes @ 0x0
   375                           
   376  0032                     ??_checkTankStatus:	
   377                           ; 0 bytes @ 0x0
   378                           
   379  0032                     ??_checkSensorState:	
   380                           ; 0 bytes @ 0x0
   381                           
   382  0032                     ??_hello_world:	
   383                           ; 0 bytes @ 0x0
   384                           
   385                           
   386                           ; 0 bytes @ 0x0
   387  0032                     	ds	1
   388  0033                     checkTankStatus@theSensor:	
   389  0033                     init_sensor@theSensor_init:	
   390                           ; 1 bytes @ 0x1
   391                           
   392                           
   393                           ; 1 bytes @ 0x1
   394  0033                     	ds	4
   395  0037                     checkSensorState@theSensor:	
   396                           
   397                           ; 1 bytes @ 0x5
   398  0037                     	ds	1
   399  0038                     ??_main:	
   400                           
   401                           ; 0 bytes @ 0x6
   402  0038                     	ds	1
   403  0039                     main@i:	
   404                           
   405                           ; 2 bytes @ 0x7
   406  0039                     	ds	2
   407                           
   408                           	psect	maintext
   409  01C7                     __pmaintext:	
   410 ;;
   411 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   412 ;;
   413 ;; *************** function _main *****************
   414 ;; Defined at:
   415 ;;		line 124 in file "main.c"
   416 ;; Parameters:    Size  Location     Type
   417 ;;		None
   418 ;; Auto vars:     Size  Location     Type
   419 ;;  i               2    7[BANK0 ] int 
   420 ;; Return value:  Size  Location     Type
   421 ;;                  2   95[None  ] int 
   422 ;; Registers used:
   423 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   424 ;; Tracked objects:
   425 ;;		On entry : B00/0
   426 ;;		On exit  : 0/0
   427 ;;		Unchanged: 0/0
   428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   429 ;;      Params:         0       0       0       0       0
   430 ;;      Locals:         0       2       0       0       0
   431 ;;      Temps:          0       1       0       0       0
   432 ;;      Totals:         0       3       0       0       0
   433 ;;Total ram usage:        3 bytes
   434 ;; Hardware stack levels required when called:    3
   435 ;; This function calls:
   436 ;;		_adc_init_CH0
   437 ;;		_checkSensorState
   438 ;;		_checkTankStatus
   439 ;;		_hello_world
   440 ;;		_init_sensor
   441 ;;		_timer0_init
   442 ;;		_timer0_start
   443 ;;		_timer1_init
   444 ;;		_timer2_init
   445 ;;		_timer2_start
   446 ;; This function is called by:
   447 ;;		Startup code after reset
   448 ;; This function uses a non-reentrant model
   449 ;;
   450                           
   451                           
   452                           ;psect for function _main
   453  01C7                     _main:	
   454                           
   455                           ;main.c: 126: TRISA |= (1<<0);
   456                           
   457                           ;incstack = 0
   458                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   459  01C7  1683               	bsf	3,5	;RP0=1, select bank1
   460  01C8  1303               	bcf	3,6	;RP1=0, select bank1
   461  01C9  1405               	bsf	5,0	;volatile
   462                           
   463                           ;main.c: 127: TRISB |= (1<<4)|(1<<5);
   464  01CA  3030               	movlw	48
   465  01CB  1283               	bcf	3,5	;RP0=0, select bank0
   466  01CC  1303               	bcf	3,6	;RP1=0, select bank0
   467  01CD  00B8               	movwf	??_main
   468  01CE  0838               	movf	??_main,w
   469  01CF  1683               	bsf	3,5	;RP0=1, select bank1
   470  01D0  1303               	bcf	3,6	;RP1=0, select bank1
   471  01D1  0486               	iorwf	6,f	;volatile
   472                           
   473                           ;main.c: 128: TRISC &= ~((1<<2)|(1<<3));
   474  01D2  30F3               	movlw	243
   475  01D3  1283               	bcf	3,5	;RP0=0, select bank0
   476  01D4  1303               	bcf	3,6	;RP1=0, select bank0
   477  01D5  00B8               	movwf	??_main
   478  01D6  0838               	movf	??_main,w
   479  01D7  1683               	bsf	3,5	;RP0=1, select bank1
   480  01D8  1303               	bcf	3,6	;RP1=0, select bank1
   481  01D9  0587               	andwf	7,f	;volatile
   482                           
   483                           ;main.c: 129: TRISB &= ~((1<<3)|(1<<2));
   484  01DA  30F3               	movlw	243
   485  01DB  1283               	bcf	3,5	;RP0=0, select bank0
   486  01DC  1303               	bcf	3,6	;RP1=0, select bank0
   487  01DD  00B8               	movwf	??_main
   488  01DE  0838               	movf	??_main,w
   489  01DF  1683               	bsf	3,5	;RP0=1, select bank1
   490  01E0  1303               	bcf	3,6	;RP1=0, select bank1
   491  01E1  0586               	andwf	6,f	;volatile
   492                           
   493                           ;main.c: 132: init_sensor(&levelSensors[0]);
   494  01E2  3028               	movlw	(low (_levelSensors| 0))& (0+255)
   495  01E3  120A  118A  2298  120A  118A  	fcall	_init_sensor
   496                           
   497                           ;main.c: 133: init_sensor(&levelSensors[1]);
   498  01E8  302D               	movlw	(low ((_levelSensors| 0+5)))& (0+255)
   499  01E9  120A  118A  2298  120A  118A  	fcall	_init_sensor
   500                           
   501                           ;main.c: 137: timer0_init();
   502  01EE  120A  118A  22EE  120A  118A  	fcall	_timer0_init
   503                           
   504                           ;main.c: 138: timer1_init();
   505  01F3  120A  118A  2307  120A  118A  	fcall	_timer1_init
   506                           
   507                           ;main.c: 139: timer2_init();
   508  01F8  120A  118A  22E5  120A  118A  	fcall	_timer2_init
   509                           
   510                           ;main.c: 140: adc_init_CH0();
   511  01FD  120A  118A  22C6  120A  118A  	fcall	_adc_init_CH0
   512                           
   513                           ;main.c: 142: PORTC |= (1<<2);
   514  0202  1283               	bcf	3,5	;RP0=0, select bank0
   515  0203  1303               	bcf	3,6	;RP1=0, select bank0
   516  0204  1507               	bsf	7,2	;volatile
   517                           
   518                           ;main.c: 143: PORTB &= ~((1<<2)|(1<<3));
   519  0205  30F3               	movlw	243
   520  0206  00B8               	movwf	??_main
   521  0207  0838               	movf	??_main,w
   522  0208  0586               	andwf	6,f	;volatile
   523                           
   524                           ;main.c: 145: timer0_start();
   525  0209  120A  118A  230D  120A  118A  	fcall	_timer0_start
   526                           
   527                           ;main.c: 146: timer2_start();
   528  020E  120A  118A  22DC  120A  118A  	fcall	_timer2_start
   529  0213                     l1133:	
   530                           ;main.c: 149: while(1)
   531                           
   532                           
   533                           ;main.c: 150: {
   534                           ;main.c: 152: levelSensors[0].sensorRead = (PORTB & (1<<4));
   535  0213  1283               	bcf	3,5	;RP0=0, select bank0
   536  0214  1303               	bcf	3,6	;RP1=0, select bank0
   537  0215  0806               	movf	6,w	;volatile
   538  0216  3910               	andlw	16
   539  0217  00B8               	movwf	??_main
   540  0218  0838               	movf	??_main,w
   541  0219  00A9               	movwf	_levelSensors+1	;volatile
   542                           
   543                           ;main.c: 153: levelSensors[1].sensorRead = (PORTB & (1<<5));
   544  021A  0806               	movf	6,w	;volatile
   545  021B  3920               	andlw	32
   546  021C  00B8               	movwf	??_main
   547  021D  0838               	movf	??_main,w
   548  021E  00AE               	movwf	_levelSensors+6	;volatile
   549                           
   550                           ;main.c: 156: checkTankStatus(&levelSensors[1]);
   551  021F  302D               	movlw	(low ((_levelSensors| 0+5)))& (0+255)
   552  0220  120A  118A  22B0  120A  118A  	fcall	_checkTankStatus
   553                           
   554                           ;main.c: 159: checkSensorState(&levelSensors[1]);
   555  0225  302D               	movlw	(low ((_levelSensors| 0+5)))& (0+255)
   556  0226  120A  118A  2020  120A  118A  	fcall	_checkSensorState
   557                           
   558                           ;main.c: 160: hello_world();
   559  022B  120A  118A  2311  120A  118A  	fcall	_hello_world
   560  0230  2A13               	goto	l1133
   561  0231                     l1143:	
   562                           ;main.c: 167: }
   563                           ;main.c: 172: while(1)
   564                           
   565                           
   566                           ;main.c: 173: {
   567                           ;main.c: 174: PORTC^=(1<<2);
   568  0231  3004               	movlw	4
   569  0232  1283               	bcf	3,5	;RP0=0, select bank0
   570  0233  1303               	bcf	3,6	;RP1=0, select bank0
   571  0234  00B8               	movwf	??_main
   572  0235  0838               	movf	??_main,w
   573  0236  0687               	xorwf	7,f	;volatile
   574                           
   575                           ;main.c: 175: for(int i=0;i<10000;i++);
   576  0237  01B9               	clrf	main@i
   577  0238  01BA               	clrf	main@i+1
   578  0239                     L1:	
   579  0239  083A               	movf	main@i+1,w
   580  023A  3A80               	xorlw	128
   581  023B  00FF               	movwf	127
   582  023C  30A7               	movlw	167
   583  023D  027F               	subwf	127,w
   584  023E  1D03               	skipz
   585  023F  2A42               	goto	u695
   586  0240  3010               	movlw	16
   587  0241  0239               	subwf	main@i,w
   588  0242                     u695:	
   589  0242  1803               	btfsc	3,0
   590  0243  2A31               	goto	l1143
   591  0244  3001               	movlw	1
   592  0245  1283               	bcf	3,5	;RP0=0, select bank0
   593  0246  1303               	bcf	3,6	;RP1=0, select bank0
   594  0247  07B9               	addwf	main@i,f
   595  0248  1803               	skipnc
   596  0249  0ABA               	incf	main@i+1,f
   597  024A  3000               	movlw	0
   598  024B  07BA               	addwf	main@i+1,f
   599  024C  2A39               	goto	L1
   600  024D                     __end_of_main:	
   601                           ;main.c: 177: }
   602                           ;main.c: 178: return (0);
   603                           ;	Return value of _main is never used
   604                           
   605                           
   606                           	psect	text1
   607  02DC                     __ptext1:	
   608 ;; *************** function _timer2_start *****************
   609 ;; Defined at:
   610 ;;		line 155 in file "util.c"
   611 ;; Parameters:    Size  Location     Type
   612 ;;		None
   613 ;; Auto vars:     Size  Location     Type
   614 ;;		None
   615 ;; Return value:  Size  Location     Type
   616 ;;		None               void
   617 ;; Registers used:
   618 ;;		None
   619 ;; Tracked objects:
   620 ;;		On entry : 0/0
   621 ;;		On exit  : 0/0
   622 ;;		Unchanged: 0/0
   623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   624 ;;      Params:         0       0       0       0       0
   625 ;;      Locals:         0       0       0       0       0
   626 ;;      Temps:          0       0       0       0       0
   627 ;;      Totals:         0       0       0       0       0
   628 ;;Total ram usage:        0 bytes
   629 ;; Hardware stack levels used:    1
   630 ;; Hardware stack levels required when called:    2
   631 ;; This function calls:
   632 ;;		Nothing
   633 ;; This function is called by:
   634 ;;		_main
   635 ;; This function uses a non-reentrant model
   636 ;;
   637                           
   638                           
   639                           ;psect for function _timer2_start
   640  02DC                     _timer2_start:	
   641                           
   642                           ;util.c: 156: PIE1bits.TMR2IE = 1;
   643                           
   644                           ;incstack = 0
   645                           ; Regs used in _timer2_start: []
   646  02DC  1683               	bsf	3,5	;RP0=1, select bank1
   647  02DD  1303               	bcf	3,6	;RP1=0, select bank1
   648  02DE  148C               	bsf	12,1	;volatile
   649                           
   650                           ;util.c: 157: T2CONbits.TMR2ON = 1;
   651  02DF  1283               	bcf	3,5	;RP0=0, select bank0
   652  02E0  1303               	bcf	3,6	;RP1=0, select bank0
   653  02E1  1512               	bsf	18,2	;volatile
   654                           
   655                           ;util.c: 158: INTCONbits.GIE = 1;
   656  02E2  178B               	bsf	11,7	;volatile
   657                           
   658                           ;util.c: 159: INTCONbits.PEIE = 1;
   659  02E3  170B               	bsf	11,6	;volatile
   660  02E4  0008               	return
   661  02E5                     __end_of_timer2_start:	
   662                           
   663                           	psect	text2
   664  02E5                     __ptext2:	
   665 ;; *************** function _timer2_init *****************
   666 ;; Defined at:
   667 ;;		line 150 in file "util.c"
   668 ;; Parameters:    Size  Location     Type
   669 ;;		None
   670 ;; Auto vars:     Size  Location     Type
   671 ;;		None
   672 ;; Return value:  Size  Location     Type
   673 ;;		None               void
   674 ;; Registers used:
   675 ;;		wreg, status,2, status,0
   676 ;; Tracked objects:
   677 ;;		On entry : 0/0
   678 ;;		On exit  : 0/0
   679 ;;		Unchanged: 0/0
   680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   681 ;;      Params:         0       0       0       0       0
   682 ;;      Locals:         0       0       0       0       0
   683 ;;      Temps:          0       0       0       0       0
   684 ;;      Totals:         0       0       0       0       0
   685 ;;Total ram usage:        0 bytes
   686 ;; Hardware stack levels used:    1
   687 ;; Hardware stack levels required when called:    2
   688 ;; This function calls:
   689 ;;		Nothing
   690 ;; This function is called by:
   691 ;;		_main
   692 ;; This function uses a non-reentrant model
   693 ;;
   694                           
   695                           
   696                           ;psect for function _timer2_init
   697  02E5                     _timer2_init:	
   698                           
   699                           ;util.c: 151: T2CONbits.T2CKPS = 0x02;
   700                           
   701                           ;incstack = 0
   702                           ; Regs used in _timer2_init: [wreg+status,2+status,0]
   703  02E5  1283               	bcf	3,5	;RP0=0, select bank0
   704  02E6  1303               	bcf	3,6	;RP1=0, select bank0
   705  02E7  0812               	movf	18,w	;volatile
   706  02E8  39FC               	andlw	-4
   707  02E9  3802               	iorlw	2
   708  02EA  0092               	movwf	18	;volatile
   709                           
   710                           ;util.c: 152: T2CONbits.TOUTPS = 0x0F;
   711  02EB  3078               	movlw	120
   712  02EC  0492               	iorwf	18,f	;volatile
   713  02ED  0008               	return
   714  02EE                     __end_of_timer2_init:	
   715                           
   716                           	psect	text3
   717  0307                     __ptext3:	
   718 ;; *************** function _timer1_init *****************
   719 ;; Defined at:
   720 ;;		line 121 in file "util.c"
   721 ;; Parameters:    Size  Location     Type
   722 ;;		None
   723 ;; Auto vars:     Size  Location     Type
   724 ;;		None
   725 ;; Return value:  Size  Location     Type
   726 ;;		None               void
   727 ;; Registers used:
   728 ;;		wreg, status,2, status,0
   729 ;; Tracked objects:
   730 ;;		On entry : 0/0
   731 ;;		On exit  : 0/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   734 ;;      Params:         0       0       0       0       0
   735 ;;      Locals:         0       0       0       0       0
   736 ;;      Temps:          0       0       0       0       0
   737 ;;      Totals:         0       0       0       0       0
   738 ;;Total ram usage:        0 bytes
   739 ;; Hardware stack levels used:    1
   740 ;; Hardware stack levels required when called:    2
   741 ;; This function calls:
   742 ;;		Nothing
   743 ;; This function is called by:
   744 ;;		_main
   745 ;; This function uses a non-reentrant model
   746 ;;
   747                           
   748                           
   749                           ;psect for function _timer1_init
   750  0307                     _timer1_init:	
   751                           
   752                           ;util.c: 127: T1CONbits.T1CKPS = 0x03;
   753                           
   754                           ;incstack = 0
   755                           ; Regs used in _timer1_init: [wreg+status,2+status,0]
   756  0307  3030               	movlw	48
   757  0308  1283               	bcf	3,5	;RP0=0, select bank0
   758  0309  1303               	bcf	3,6	;RP1=0, select bank0
   759  030A  0490               	iorwf	16,f	;volatile
   760                           
   761                           ;util.c: 128: T1CONbits.TMR1CS = 0;
   762  030B  1090               	bcf	16,1	;volatile
   763  030C  0008               	return
   764  030D                     __end_of_timer1_init:	
   765                           
   766                           	psect	text4
   767  030D                     __ptext4:	
   768 ;; *************** function _timer0_start *****************
   769 ;; Defined at:
   770 ;;		line 175 in file "util.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;		None
   773 ;; Auto vars:     Size  Location     Type
   774 ;;		None
   775 ;; Return value:  Size  Location     Type
   776 ;;		None               void
   777 ;; Registers used:
   778 ;;		None
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   784 ;;      Params:         0       0       0       0       0
   785 ;;      Locals:         0       0       0       0       0
   786 ;;      Temps:          0       0       0       0       0
   787 ;;      Totals:         0       0       0       0       0
   788 ;;Total ram usage:        0 bytes
   789 ;; Hardware stack levels used:    1
   790 ;; Hardware stack levels required when called:    2
   791 ;; This function calls:
   792 ;;		Nothing
   793 ;; This function is called by:
   794 ;;		_main
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           
   799                           ;psect for function _timer0_start
   800  030D                     _timer0_start:	
   801                           
   802                           ;util.c: 176: INTCONbits.TMR0IE = 1;
   803                           
   804                           ;incstack = 0
   805                           ; Regs used in _timer0_start: []
   806  030D  168B               	bsf	11,5	;volatile
   807                           
   808                           ;util.c: 177: INTCONbits.GIE = 1;
   809  030E  178B               	bsf	11,7	;volatile
   810                           
   811                           ;util.c: 178: INTCONbits.PEIE = 1;
   812  030F  170B               	bsf	11,6	;volatile
   813  0310  0008               	return
   814  0311                     __end_of_timer0_start:	
   815                           
   816                           	psect	text5
   817  02EE                     __ptext5:	
   818 ;; *************** function _timer0_init *****************
   819 ;; Defined at:
   820 ;;		line 168 in file "util.c"
   821 ;; Parameters:    Size  Location     Type
   822 ;;		None
   823 ;; Auto vars:     Size  Location     Type
   824 ;;		None
   825 ;; Return value:  Size  Location     Type
   826 ;;		None               void
   827 ;; Registers used:
   828 ;;		wreg, status,2, status,0
   829 ;; Tracked objects:
   830 ;;		On entry : 0/0
   831 ;;		On exit  : 0/0
   832 ;;		Unchanged: 0/0
   833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   834 ;;      Params:         0       0       0       0       0
   835 ;;      Locals:         0       0       0       0       0
   836 ;;      Temps:          0       0       0       0       0
   837 ;;      Totals:         0       0       0       0       0
   838 ;;Total ram usage:        0 bytes
   839 ;; Hardware stack levels used:    1
   840 ;; Hardware stack levels required when called:    2
   841 ;; This function calls:
   842 ;;		Nothing
   843 ;; This function is called by:
   844 ;;		_main
   845 ;; This function uses a non-reentrant model
   846 ;;
   847                           
   848                           
   849                           ;psect for function _timer0_init
   850  02EE                     _timer0_init:	
   851                           
   852                           ;util.c: 169: OPTION_REGbits.T0CS = 0;
   853                           
   854                           ;incstack = 0
   855                           ; Regs used in _timer0_init: [wreg+status,2+status,0]
   856  02EE  1683               	bsf	3,5	;RP0=1, select bank1
   857  02EF  1303               	bcf	3,6	;RP1=0, select bank1
   858  02F0  1281               	bcf	1,5	;volatile
   859                           
   860                           ;util.c: 170: OPTION_REGbits.PSA = 0;
   861  02F1  1181               	bcf	1,3	;volatile
   862                           
   863                           ;util.c: 171: OPTION_REGbits.PS = 0x04;
   864  02F2  0801               	movf	1,w	;volatile
   865  02F3  39F8               	andlw	-8
   866  02F4  3804               	iorlw	4
   867  02F5  0081               	movwf	1	;volatile
   868  02F6  0008               	return
   869  02F7                     __end_of_timer0_init:	
   870                           
   871                           	psect	text6
   872  0298                     __ptext6:	
   873 ;; *************** function _init_sensor *****************
   874 ;; Defined at:
   875 ;;		line 89 in file "util.c"
   876 ;; Parameters:    Size  Location     Type
   877 ;;  theSensor_in    1    wreg     PTR volatile struct leve
   878 ;;		 -> levelSensors(10), 
   879 ;; Auto vars:     Size  Location     Type
   880 ;;  theSensor_in    1    1[BANK0 ] PTR volatile struct leve
   881 ;;		 -> levelSensors(10), 
   882 ;; Return value:  Size  Location     Type
   883 ;;		None               void
   884 ;; Registers used:
   885 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   891 ;;      Params:         0       0       0       0       0
   892 ;;      Locals:         0       1       0       0       0
   893 ;;      Temps:          0       1       0       0       0
   894 ;;      Totals:         0       2       0       0       0
   895 ;;Total ram usage:        2 bytes
   896 ;; Hardware stack levels used:    1
   897 ;; Hardware stack levels required when called:    2
   898 ;; This function calls:
   899 ;;		Nothing
   900 ;; This function is called by:
   901 ;;		_main
   902 ;; This function uses a non-reentrant model
   903 ;;
   904                           
   905                           
   906                           ;psect for function _init_sensor
   907  0298                     _init_sensor:	
   908                           
   909                           ;incstack = 0
   910                           ; Regs used in _init_sensor: [wreg-fsr0h+status,2+status,0]
   911                           ;init_sensor@theSensor_init stored from wreg
   912  0298  1283               	bcf	3,5	;RP0=0, select bank0
   913  0299  1303               	bcf	3,6	;RP1=0, select bank0
   914  029A  00B3               	movwf	init_sensor@theSensor_init
   915                           
   916                           ;util.c: 91: theSensor_init->counter = 0;
   917  029B  0833               	movf	init_sensor@theSensor_init,w
   918  029C  3E03               	addlw	3
   919  029D  0084               	movwf	4
   920  029E  1383               	bcf	3,7	;select IRP bank0
   921  029F  0180               	clrf	0
   922  02A0  0A84               	incf	4,f
   923  02A1  0180               	clrf	0
   924                           
   925                           ;util.c: 92: theSensor_init->LEVEL_STATE = INITIAL_STATE;
   926  02A2  0833               	movf	init_sensor@theSensor_init,w
   927  02A3  0084               	movwf	4
   928  02A4  0180               	clrf	0
   929                           
   930                           ;util.c: 93: theSensor_init->sensorRead = 0;
   931  02A5  0A33               	incf	init_sensor@theSensor_init,w
   932  02A6  0084               	movwf	4
   933  02A7  0180               	clrf	0
   934                           
   935                           ;util.c: 94: theSensor_init->TANK_STATE = TANK_IS_EMPTY;
   936  02A8  3001               	movlw	1
   937  02A9  00B2               	movwf	??_init_sensor
   938  02AA  0833               	movf	init_sensor@theSensor_init,w
   939  02AB  3E02               	addlw	2
   940  02AC  0084               	movwf	4
   941  02AD  0832               	movf	??_init_sensor,w
   942  02AE  0080               	movwf	0
   943  02AF  0008               	return
   944  02B0                     __end_of_init_sensor:	
   945                           
   946                           	psect	text7
   947  0311                     __ptext7:	
   948 ;; *************** function _hello_world *****************
   949 ;; Defined at:
   950 ;;		line 34 in file "alarm_source.c"
   951 ;; Parameters:    Size  Location     Type
   952 ;;		None
   953 ;; Auto vars:     Size  Location     Type
   954 ;;		None
   955 ;; Return value:  Size  Location     Type
   956 ;;		None               void
   957 ;; Registers used:
   958 ;;		None
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   964 ;;      Params:         0       0       0       0       0
   965 ;;      Locals:         0       0       0       0       0
   966 ;;      Temps:          0       0       0       0       0
   967 ;;      Totals:         0       0       0       0       0
   968 ;;Total ram usage:        0 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:    2
   971 ;; This function calls:
   972 ;;		Nothing
   973 ;; This function is called by:
   974 ;;		_main
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           
   979                           ;psect for function _hello_world
   980  0311                     _hello_world:	
   981                           
   982                           ;incstack = 0
   983                           ; Regs used in _hello_world: []
   984  0311  0008               	return
   985  0312                     __end_of_hello_world:	
   986                           
   987                           	psect	text8
   988  02B0                     __ptext8:	
   989 ;; *************** function _checkTankStatus *****************
   990 ;; Defined at:
   991 ;;		line 4 in file "util.c"
   992 ;; Parameters:    Size  Location     Type
   993 ;;  theSensor       1    wreg     PTR volatile struct leve
   994 ;;		 -> levelSensors(10), 
   995 ;; Auto vars:     Size  Location     Type
   996 ;;  theSensor       1    1[BANK0 ] PTR volatile struct leve
   997 ;;		 -> levelSensors(10), 
   998 ;; Return value:  Size  Location     Type
   999 ;;		None               void
  1000 ;; Registers used:
  1001 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1002 ;; Tracked objects:
  1003 ;;		On entry : 0/0
  1004 ;;		On exit  : 0/0
  1005 ;;		Unchanged: 0/0
  1006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1007 ;;      Params:         0       0       0       0       0
  1008 ;;      Locals:         0       1       0       0       0
  1009 ;;      Temps:          0       1       0       0       0
  1010 ;;      Totals:         0       2       0       0       0
  1011 ;;Total ram usage:        2 bytes
  1012 ;; Hardware stack levels used:    1
  1013 ;; Hardware stack levels required when called:    2
  1014 ;; This function calls:
  1015 ;;		Nothing
  1016 ;; This function is called by:
  1017 ;;		_main
  1018 ;; This function uses a non-reentrant model
  1019 ;;
  1020                           
  1021                           
  1022                           ;psect for function _checkTankStatus
  1023  02B0                     _checkTankStatus:	
  1024                           
  1025                           ;incstack = 0
  1026                           ; Regs used in _checkTankStatus: [wreg-fsr0h+status,2+status,0]
  1027                           ;checkTankStatus@theSensor stored from wreg
  1028  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  1029  02B1  1303               	bcf	3,6	;RP1=0, select bank0
  1030  02B2  00B3               	movwf	checkTankStatus@theSensor
  1031                           
  1032                           ;util.c: 8: if (theSensor->sensorRead > 0)
  1033  02B3  0A33               	incf	checkTankStatus@theSensor,w
  1034  02B4  0084               	movwf	4
  1035  02B5  1383               	bcf	3,7	;select IRP bank0
  1036  02B6  0800               	movf	0,w
  1037  02B7  1903               	btfsc	3,2
  1038  02B8  2AC1               	goto	l961
  1039                           
  1040                           ;util.c: 9: {
  1041                           ;util.c: 10: theSensor->TANK_STATE = TANK_IS_EMPTY;
  1042  02B9  3001               	movlw	1
  1043  02BA  00B2               	movwf	??_checkTankStatus
  1044  02BB  0833               	movf	checkTankStatus@theSensor,w
  1045  02BC  3E02               	addlw	2
  1046  02BD  0084               	movwf	4
  1047  02BE  0832               	movf	??_checkTankStatus,w
  1048  02BF  0080               	movwf	0
  1049                           
  1050                           ;util.c: 12: }else
  1051  02C0  0008               	return
  1052  02C1                     l961:	
  1053                           
  1054                           ;util.c: 13: {
  1055                           ;util.c: 14: theSensor->TANK_STATE = TANK_IS_FULL;
  1056  02C1  0833               	movf	checkTankStatus@theSensor,w
  1057  02C2  3E02               	addlw	2
  1058  02C3  0084               	movwf	4
  1059  02C4  0180               	clrf	0
  1060  02C5  0008               	return
  1061  02C6                     __end_of_checkTankStatus:	
  1062                           
  1063                           	psect	text9
  1064  0020                     __ptext9:	
  1065 ;; *************** function _checkSensorState *****************
  1066 ;; Defined at:
  1067 ;;		line 20 in file "util.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;  theSensor       1    wreg     PTR volatile struct leve
  1070 ;;		 -> levelSensors(10), 
  1071 ;; Auto vars:     Size  Location     Type
  1072 ;;  theSensor       1    5[BANK0 ] PTR volatile struct leve
  1073 ;;		 -> levelSensors(10), 
  1074 ;; Return value:  Size  Location     Type
  1075 ;;		None               void
  1076 ;; Registers used:
  1077 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1078 ;; Tracked objects:
  1079 ;;		On entry : 0/0
  1080 ;;		On exit  : 0/0
  1081 ;;		Unchanged: 0/0
  1082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1083 ;;      Params:         0       0       0       0       0
  1084 ;;      Locals:         0       1       0       0       0
  1085 ;;      Temps:          0       5       0       0       0
  1086 ;;      Totals:         0       6       0       0       0
  1087 ;;Total ram usage:        6 bytes
  1088 ;; Hardware stack levels used:    1
  1089 ;; Hardware stack levels required when called:    2
  1090 ;; This function calls:
  1091 ;;		Nothing
  1092 ;; This function is called by:
  1093 ;;		_main
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           
  1098                           ;psect for function _checkSensorState
  1099  0020                     _checkSensorState:	
  1100                           
  1101                           ;incstack = 0
  1102                           ; Regs used in _checkSensorState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1103                           ;checkSensorState@theSensor stored from wreg
  1104  0020  1283               	bcf	3,5	;RP0=0, select bank0
  1105  0021  1303               	bcf	3,6	;RP1=0, select bank0
  1106  0022  00B7               	movwf	checkSensorState@theSensor
  1107                           
  1108                           ;util.c: 22: switch(theSensor->LEVEL_STATE){
  1109  0023  28EC               	goto	l1009
  1110  0024                     l965:	
  1111                           ;util.c: 23: case INITIAL_STATE :
  1112                           
  1113                           
  1114                           ;util.c: 26: if(theSensor->TANK_STATE == TANK_IS_EMPTY)
  1115  0024  0837               	movf	checkSensorState@theSensor,w
  1116  0025  3E02               	addlw	2
  1117  0026  0084               	movwf	4
  1118  0027  1383               	bcf	3,7	;select IRP bank0
  1119  0028  0300               	decf	0,w
  1120  0029  1D03               	btfss	3,2
  1121  002A  2832               	goto	l969
  1122                           
  1123                           ;util.c: 27: {
  1124                           ;util.c: 28: theSensor->LEVEL_STATE = TRANSITION_TO_EMPTY;
  1125  002B  3001               	movlw	1
  1126  002C  00B2               	movwf	??_checkSensorState
  1127  002D  0837               	movf	checkSensorState@theSensor,w
  1128  002E  0084               	movwf	4
  1129  002F  0832               	movf	??_checkSensorState,w
  1130  0030  0080               	movwf	0
  1131                           
  1132                           ;util.c: 29: }else
  1133  0031  0008               	return
  1134  0032                     l969:	
  1135                           
  1136                           ;util.c: 30: {
  1137                           ;util.c: 31: theSensor->counter = 0;
  1138  0032  0837               	movf	checkSensorState@theSensor,w
  1139  0033  3E03               	addlw	3
  1140  0034  0084               	movwf	4
  1141  0035  0180               	clrf	0
  1142  0036  0A84               	incf	4,f
  1143  0037  0180               	clrf	0
  1144                           
  1145                           ;util.c: 32: }
  1146                           ;util.c: 33: break;
  1147  0038  0008               	return
  1148  0039                     l971:	
  1149                           ;util.c: 35: case TRANSITION_TO_EMPTY :
  1150                           
  1151                           
  1152                           ;util.c: 39: if(theSensor->TANK_STATE == TANK_IS_FULL)
  1153  0039  0837               	movf	checkSensorState@theSensor,w
  1154  003A  3E02               	addlw	2
  1155  003B  0084               	movwf	4
  1156  003C  0800               	movf	0,w
  1157  003D  1D03               	btfss	3,2
  1158  003E  2849               	goto	l977
  1159                           
  1160                           ;util.c: 40: {
  1161                           ;util.c: 41: theSensor->counter = 0;
  1162  003F  0837               	movf	checkSensorState@theSensor,w
  1163  0040  3E03               	addlw	3
  1164  0041  0084               	movwf	4
  1165  0042  0180               	clrf	0
  1166  0043  0A84               	incf	4,f
  1167  0044  0180               	clrf	0
  1168                           
  1169                           ;util.c: 42: theSensor->LEVEL_STATE = INITIAL_STATE;
  1170  0045  0837               	movf	checkSensorState@theSensor,w
  1171  0046  0084               	movwf	4
  1172  0047  0180               	clrf	0
  1173                           
  1174                           ;util.c: 44: }else if(theSensor->TANK_STATE == TANK_IS_EMPTY && theSensor->counter >= FI
      +                          LTERTMR_TO_EMPTY)
  1175  0048  0008               	return
  1176  0049                     l977:	
  1177  0049  0837               	movf	checkSensorState@theSensor,w
  1178  004A  3E02               	addlw	2
  1179  004B  0084               	movwf	4
  1180  004C  0300               	decf	0,w
  1181  004D  1D03               	btfss	3,2
  1182  004E  0008               	return
  1183  004F  3001               	movlw	low (_FILTERTMR_TO_EMPTY-__stringbase)
  1184  0050  0084               	movwf	4
  1185  0051  120A  118A  22D2  120A  118A  	fcall	stringdir
  1186  0056  00B2               	movwf	??_checkSensorState
  1187  0057  120A  118A  22D2  120A  118A  	fcall	stringdir
  1188  005C  00B3               	movwf	??_checkSensorState+1
  1189  005D  0837               	movf	checkSensorState@theSensor,w
  1190  005E  3E03               	addlw	3
  1191  005F  0084               	movwf	4
  1192  0060  0800               	movf	0,w
  1193  0061  00B4               	movwf	??_checkSensorState+2
  1194  0062  0A84               	incf	4,f
  1195  0063  0800               	movf	0,w
  1196  0064  00B5               	movwf	??_checkSensorState+3
  1197  0065  0835               	movf	??_checkSensorState+3,w
  1198  0066  3A80               	xorlw	128
  1199  0067  00B6               	movwf	??_checkSensorState+4
  1200  0068  0833               	movf	??_checkSensorState+1,w
  1201  0069  3A80               	xorlw	128
  1202  006A  0236               	subwf	??_checkSensorState+4,w
  1203  006B  1D03               	skipz
  1204  006C  286F               	goto	u405
  1205  006D  0832               	movf	??_checkSensorState,w
  1206  006E  0234               	subwf	??_checkSensorState+2,w
  1207  006F                     u405:	
  1208  006F  1C03               	skipc
  1209  0070  0008               	return
  1210                           
  1211                           ;util.c: 45: {
  1212                           ;util.c: 46: theSensor->counter = 0;
  1213  0071  1283               	bcf	3,5	;RP0=0, select bank0
  1214  0072  1303               	bcf	3,6	;RP1=0, select bank0
  1215  0073  0837               	movf	checkSensorState@theSensor,w
  1216  0074  3E03               	addlw	3
  1217  0075  0084               	movwf	4
  1218  0076  1383               	bcf	3,7	;select IRP bank0
  1219  0077  0180               	clrf	0
  1220  0078  0A84               	incf	4,f
  1221  0079  0180               	clrf	0
  1222                           
  1223                           ;util.c: 47: theSensor->LEVEL_STATE = EMPTY;
  1224  007A  3002               	movlw	2
  1225  007B  00B2               	movwf	??_checkSensorState
  1226  007C  0837               	movf	checkSensorState@theSensor,w
  1227  007D  0084               	movwf	4
  1228  007E  0832               	movf	??_checkSensorState,w
  1229  007F  0080               	movwf	0
  1230                           
  1231                           ;util.c: 49: }
  1232                           ;util.c: 50: break;
  1233  0080  0008               	return
  1234  0081                     l985:	
  1235                           ;util.c: 52: case EMPTY:
  1236                           
  1237                           
  1238                           ;util.c: 54: if(theSensor->TANK_STATE == TANK_IS_FULL && theSensor->counter == 0){
  1239  0081  0837               	movf	checkSensorState@theSensor,w
  1240  0082  3E02               	addlw	2
  1241  0083  0084               	movwf	4
  1242  0084  0800               	movf	0,w
  1243  0085  1D03               	btfss	3,2
  1244  0086  289A               	goto	l991
  1245  0087  0837               	movf	checkSensorState@theSensor,w
  1246  0088  3E03               	addlw	3
  1247  0089  0084               	movwf	4
  1248  008A  0800               	movf	0,w
  1249  008B  00B2               	movwf	??_checkSensorState
  1250  008C  0A84               	incf	4,f
  1251  008D  0800               	movf	0,w
  1252  008E  00B3               	movwf	??_checkSensorState+1
  1253  008F  0832               	movf	??_checkSensorState,w
  1254  0090  0433               	iorwf	??_checkSensorState+1,w
  1255  0091  1D03               	btfss	3,2
  1256  0092  289A               	goto	l991
  1257                           
  1258                           ;util.c: 55: theSensor->LEVEL_STATE = TRANSITION_TO_FULL;
  1259  0093  3003               	movlw	3
  1260  0094  00B2               	movwf	??_checkSensorState
  1261  0095  0837               	movf	checkSensorState@theSensor,w
  1262  0096  0084               	movwf	4
  1263  0097  0832               	movf	??_checkSensorState,w
  1264  0098  0080               	movwf	0
  1265                           
  1266                           ;util.c: 57: }else{
  1267  0099  0008               	return
  1268  009A                     l991:	
  1269                           
  1270                           ;util.c: 58: theSensor->counter = 0;
  1271  009A  0837               	movf	checkSensorState@theSensor,w
  1272  009B  3E03               	addlw	3
  1273  009C  0084               	movwf	4
  1274  009D  0180               	clrf	0
  1275  009E  0A84               	incf	4,f
  1276  009F  0180               	clrf	0
  1277                           
  1278                           ;util.c: 60: }
  1279                           ;util.c: 61: break;
  1280  00A0  0008               	return
  1281  00A1                     l993:	
  1282                           ;util.c: 63: case TRANSITION_TO_FULL:
  1283                           
  1284                           
  1285                           ;util.c: 65: if(theSensor->TANK_STATE == TANK_IS_EMPTY){
  1286  00A1  0837               	movf	checkSensorState@theSensor,w
  1287  00A2  3E02               	addlw	2
  1288  00A3  0084               	movwf	4
  1289  00A4  0300               	decf	0,w
  1290  00A5  1D03               	btfss	3,2
  1291  00A6  28B4               	goto	l999
  1292                           
  1293                           ;util.c: 66: theSensor->counter = 0;
  1294  00A7  0837               	movf	checkSensorState@theSensor,w
  1295  00A8  3E03               	addlw	3
  1296  00A9  0084               	movwf	4
  1297  00AA  0180               	clrf	0
  1298  00AB  0A84               	incf	4,f
  1299  00AC  0180               	clrf	0
  1300                           
  1301                           ;util.c: 67: theSensor->LEVEL_STATE = EMPTY;
  1302  00AD  3002               	movlw	2
  1303  00AE  00B2               	movwf	??_checkSensorState
  1304  00AF  0837               	movf	checkSensorState@theSensor,w
  1305  00B0  0084               	movwf	4
  1306  00B1  0832               	movf	??_checkSensorState,w
  1307  00B2  0080               	movwf	0
  1308                           
  1309                           ;util.c: 70: }else if(theSensor->TANK_STATE == TANK_IS_FULL && theSensor->counter > FILT
      +                          ERTMR_TO_FULL){
  1310  00B3  0008               	return
  1311  00B4                     l999:	
  1312  00B4  0837               	movf	checkSensorState@theSensor,w
  1313  00B5  3E02               	addlw	2
  1314  00B6  0084               	movwf	4
  1315  00B7  0800               	movf	0,w
  1316  00B8  1D03               	btfss	3,2
  1317  00B9  0008               	return
  1318  00BA  0837               	movf	checkSensorState@theSensor,w
  1319  00BB  3E03               	addlw	3
  1320  00BC  0084               	movwf	4
  1321  00BD  0800               	movf	0,w
  1322  00BE  00B2               	movwf	??_checkSensorState
  1323  00BF  0A84               	incf	4,f
  1324  00C0  0800               	movf	0,w
  1325  00C1  00B3               	movwf	??_checkSensorState+1
  1326  00C2  3003               	movlw	low (_FILTERTMR_TO_FULL-__stringbase)
  1327  00C3  0084               	movwf	4
  1328  00C4  120A  118A  22D2  120A  118A  	fcall	stringdir
  1329  00C9  00B4               	movwf	??_checkSensorState+2
  1330  00CA  120A  118A  22D2  120A  118A  	fcall	stringdir
  1331  00CF  00B5               	movwf	??_checkSensorState+3
  1332  00D0  0835               	movf	??_checkSensorState+3,w
  1333  00D1  3A80               	xorlw	128
  1334  00D2  00B6               	movwf	??_checkSensorState+4
  1335  00D3  0833               	movf	??_checkSensorState+1,w
  1336  00D4  3A80               	xorlw	128
  1337  00D5  0236               	subwf	??_checkSensorState+4,w
  1338  00D6  1D03               	skipz
  1339  00D7  28DA               	goto	u455
  1340  00D8  0832               	movf	??_checkSensorState,w
  1341  00D9  0234               	subwf	??_checkSensorState+2,w
  1342  00DA                     u455:	
  1343  00DA  1803               	skipnc
  1344  00DB  0008               	return
  1345                           
  1346                           ;util.c: 72: theSensor->counter = 0;
  1347  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  1348  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  1349  00DE  0837               	movf	checkSensorState@theSensor,w
  1350  00DF  3E03               	addlw	3
  1351  00E0  0084               	movwf	4
  1352  00E1  1383               	bcf	3,7	;select IRP bank0
  1353  00E2  0180               	clrf	0
  1354  00E3  0A84               	incf	4,f
  1355  00E4  0180               	clrf	0
  1356                           
  1357                           ;util.c: 73: theSensor->LEVEL_STATE = TURN_ON_ALARM;
  1358  00E5  3004               	movlw	4
  1359  00E6  00B2               	movwf	??_checkSensorState
  1360  00E7  0837               	movf	checkSensorState@theSensor,w
  1361  00E8  0084               	movwf	4
  1362  00E9  0832               	movf	??_checkSensorState,w
  1363  00EA  0080               	movwf	0
  1364                           
  1365                           ;util.c: 83: }
  1366                           
  1367                           ;util.c: 82: break;
  1368                           
  1369                           ;util.c: 79: case TURN_ON_ALARM :
  1370                           
  1371                           ;util.c: 75: }
  1372                           ;util.c: 76: break;
  1373  00EB  0008               	return
  1374  00EC                     l1009:	
  1375  00EC  0837               	movf	checkSensorState@theSensor,w
  1376  00ED  0084               	movwf	4
  1377  00EE  1383               	bcf	3,7	;select IRP bank0
  1378  00EF  0800               	movf	0,w
  1379                           
  1380                           ; Switch size 1, requested type "space"
  1381                           ; Number of cases is 5, Range of values is 0 to 4
  1382                           ; switch strategies available:
  1383                           ; Name         Instructions Cycles
  1384                           ; simple_byte           16     9 (average)
  1385                           ; direct_byte           23     8 (fixed)
  1386                           ; jumptable            260     6 (fixed)
  1387                           ;	Chosen strategy is simple_byte
  1388  00F0  3A00               	xorlw	0	; case 0
  1389  00F1  1903               	skipnz
  1390  00F2  2824               	goto	l965
  1391  00F3  3A01               	xorlw	1	; case 1
  1392  00F4  1903               	skipnz
  1393  00F5  2839               	goto	l971
  1394  00F6  3A03               	xorlw	3	; case 2
  1395  00F7  1903               	skipnz
  1396  00F8  2881               	goto	l985
  1397  00F9  3A01               	xorlw	1	; case 3
  1398  00FA  1903               	skipnz
  1399  00FB  28A1               	goto	l993
  1400  00FC  3A07               	xorlw	7	; case 4
  1401  00FD  1903               	skipnz
  1402  00FE  2900               	goto	l147
  1403  00FF  2900               	goto	l147
  1404  0100                     l147:	
  1405  0100  0008               	return
  1406  0101                     __end_of_checkSensorState:	
  1407                           
  1408                           	psect	text10
  1409  02C6                     __ptext10:	
  1410 ;; *************** function _adc_init_CH0 *****************
  1411 ;; Defined at:
  1412 ;;		line 188 in file "util.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;		None
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;		None
  1417 ;; Return value:  Size  Location     Type
  1418 ;;		None               void
  1419 ;; Registers used:
  1420 ;;		wreg, status,2, status,0
  1421 ;; Tracked objects:
  1422 ;;		On entry : 0/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1426 ;;      Params:         0       0       0       0       0
  1427 ;;      Locals:         0       0       0       0       0
  1428 ;;      Temps:          0       0       0       0       0
  1429 ;;      Totals:         0       0       0       0       0
  1430 ;;Total ram usage:        0 bytes
  1431 ;; Hardware stack levels used:    1
  1432 ;; Hardware stack levels required when called:    2
  1433 ;; This function calls:
  1434 ;;		Nothing
  1435 ;; This function is called by:
  1436 ;;		_main
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440                           
  1441                           ;psect for function _adc_init_CH0
  1442  02C6                     _adc_init_CH0:	
  1443                           
  1444                           ;util.c: 189: ADCON0bits.ADCS = 0x00;
  1445                           
  1446                           ;incstack = 0
  1447                           ; Regs used in _adc_init_CH0: [wreg+status,2+status,0]
  1448  02C6  303F               	movlw	-193
  1449  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  1450  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  1451  02C9  059F               	andwf	31,f	;volatile
  1452                           
  1453                           ;util.c: 190: ADCON0bits.CHS = 0x00;
  1454  02CA  30C7               	movlw	-57
  1455  02CB  059F               	andwf	31,f	;volatile
  1456                           
  1457                           ;util.c: 192: ADCON1bits.ADFM = 1;
  1458  02CC  1683               	bsf	3,5	;RP0=1, select bank1
  1459  02CD  1303               	bcf	3,6	;RP1=0, select bank1
  1460  02CE  179F               	bsf	31,7	;volatile
  1461                           
  1462                           ;util.c: 193: ADCON1bits.PCFG = 0x00;
  1463  02CF  30F0               	movlw	-16
  1464  02D0  059F               	andwf	31,f	;volatile
  1465  02D1  0008               	return
  1466  02D2                     __end_of_adc_init_CH0:	
  1467                           
  1468                           	psect	text11
  1469  0101                     __ptext11:	
  1470 ;; *************** function _ISR *****************
  1471 ;; Defined at:
  1472 ;;		line 43 in file "main.c"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;		None
  1475 ;; Auto vars:     Size  Location     Type
  1476 ;;		None
  1477 ;; Return value:  Size  Location     Type
  1478 ;;		None               void
  1479 ;; Registers used:
  1480 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1486 ;;      Params:         0       0       0       0       0
  1487 ;;      Locals:         0       0       0       0       0
  1488 ;;      Temps:          7       0       0       0       0
  1489 ;;      Totals:         7       0       0       0       0
  1490 ;;Total ram usage:        7 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; Hardware stack levels required when called:    1
  1493 ;; This function calls:
  1494 ;;		___awmod
  1495 ;;		_timer1_stop
  1496 ;; This function is called by:
  1497 ;;		Interrupt level 1
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           
  1502                           ;psect for function _ISR
  1503  0101                     _ISR:	
  1504                           
  1505                           ;main.c: 44: static int adcResult = 0;
  1506                           ;main.c: 45: static int blinkCounter =0;
  1507                           ;main.c: 49: if(TMR0IF && TMR0IE){
  1508  0101  1D0B               	btfss	11,2	;volatile
  1509  0102  2951               	goto	i1l1073
  1510  0103  1A8B               	btfsc	11,5	;volatile
  1511  0104  2927               	goto	i1l1065
  1512  0105  2951               	goto	i1l1073
  1513  0106                     i1l1055:	
  1514                           ;main.c: 52: {
  1515                           ;main.c: 53: case FILTER_BLINK_FAST:
  1516                           
  1517                           ;main.c: 51: switch(blinkState)
  1518                           
  1519                           
  1520                           ;main.c: 54: if((blinkCounter % 5) == 0)
  1521  0106  3005               	movlw	5
  1522  0107  2909               	goto	L3
  1523  0108                     i1l1059:	
  1524                           ;main.c: 60: case ALARM_BLINK_SLOW:
  1525                           
  1526                           ;main.c: 57: }
  1527                           ;main.c: 58: break;
  1528                           
  1529                           ;main.c: 55: {
  1530                           ;main.c: 56: PORTC ^= (1<<3);
  1531                           
  1532                           
  1533                           ;main.c: 61: if((blinkCounter % 15) == 0)
  1534  0108  300F               	movlw	15
  1535  0109                     L3:	
  1536  0109  00F0               	movwf	___awmod@divisor
  1537  010A  3000               	movlw	0
  1538  010B  00F1               	movwf	___awmod@divisor+1
  1539  010C  0826               	movf	ISR@blinkCounter+1,w
  1540  010D  00F3               	movwf	___awmod@dividend+1
  1541  010E  0825               	movf	ISR@blinkCounter,w
  1542  010F  00F2               	movwf	___awmod@dividend
  1543  0110  120A  118A  224D  120A  118A  	fcall	___awmod
  1544  0115  0870               	movf	?___awmod,w
  1545  0116  0471               	iorwf	?___awmod+1,w
  1546  0117  1D03               	btfss	3,2
  1547  0118  2935               	goto	i1l1067
  1548                           
  1549                           ;main.c: 62: {
  1550                           ;main.c: 63: PORTC ^= (1<<3);
  1551  0119  3008               	movlw	8
  1552  011A  00F7               	movwf	??_ISR
  1553  011B  0877               	movf	??_ISR,w
  1554  011C  1283               	bcf	3,5	;RP0=0, select bank0
  1555  011D  1303               	bcf	3,6	;RP1=0, select bank0
  1556  011E  0687               	xorwf	7,f	;volatile
  1557                           
  1558                           ;main.c: 64: }
  1559                           ;main.c: 65: break;
  1560  011F  2935               	goto	i1l1067
  1561  0120                     i1l76:	
  1562                           ;main.c: 67: case ALARM_SOLID_ON:
  1563                           
  1564                           
  1565                           ;main.c: 68: PORTC |= (1<<3);
  1566  0120  1587               	bsf	7,3	;volatile
  1567                           
  1568                           ;main.c: 69: break;
  1569  0121  2935               	goto	i1l1067
  1570  0122                     i1l1063:	
  1571                           ;main.c: 72: default:
  1572                           
  1573                           ;main.c: 71: case LIGHTS_OFF:
  1574                           
  1575                           
  1576                           ;main.c: 73: PORTC &= ~((1<<3));
  1577  0122  30F7               	movlw	247
  1578  0123  00F7               	movwf	??_ISR
  1579  0124  0877               	movf	??_ISR,w
  1580  0125  0587               	andwf	7,f	;volatile
  1581                           
  1582                           ;main.c: 74: }
  1583  0126  2935               	goto	i1l1067
  1584  0127                     i1l1065:	
  1585  0127  0827               	movf	_blinkState,w
  1586                           
  1587                           ; Switch size 1, requested type "space"
  1588                           ; Number of cases is 4, Range of values is 0 to 4
  1589                           ; switch strategies available:
  1590                           ; Name         Instructions Cycles
  1591                           ; simple_byte           13     7 (average)
  1592                           ; direct_byte           23     8 (fixed)
  1593                           ; jumptable            260     6 (fixed)
  1594                           ;	Chosen strategy is simple_byte
  1595  0128  3A00               	xorlw	0	; case 0
  1596  0129  1903               	skipnz
  1597  012A  2922               	goto	i1l1063
  1598  012B  3A02               	xorlw	2	; case 2
  1599  012C  1903               	skipnz
  1600  012D  2906               	goto	i1l1055
  1601  012E  3A01               	xorlw	1	; case 3
  1602  012F  1903               	skipnz
  1603  0130  2908               	goto	i1l1059
  1604  0131  3A07               	xorlw	7	; case 4
  1605  0132  1903               	skipnz
  1606  0133  2920               	goto	i1l76
  1607  0134  2922               	goto	i1l1063
  1608  0135                     i1l1067:	
  1609                           
  1610                           ;main.c: 75: blinkCounter ++;
  1611  0135  3001               	movlw	1
  1612  0136  1283               	bcf	3,5	;RP0=0, select bank0
  1613  0137  1303               	bcf	3,6	;RP1=0, select bank0
  1614  0138  07A5               	addwf	ISR@blinkCounter,f
  1615  0139  1803               	skipnc
  1616  013A  0AA6               	incf	ISR@blinkCounter+1,f
  1617  013B  3000               	movlw	0
  1618  013C  07A6               	addwf	ISR@blinkCounter+1,f
  1619                           
  1620                           ;main.c: 76: blinkCounter %= 100;
  1621  013D  3064               	movlw	100
  1622  013E  00F0               	movwf	___awmod@divisor
  1623  013F  3000               	movlw	0
  1624  0140  00F1               	movwf	___awmod@divisor+1
  1625  0141  0826               	movf	ISR@blinkCounter+1,w
  1626  0142  00F3               	movwf	___awmod@dividend+1
  1627  0143  0825               	movf	ISR@blinkCounter,w
  1628  0144  00F2               	movwf	___awmod@dividend
  1629  0145  120A  118A  224D  120A  118A  	fcall	___awmod
  1630  014A  0871               	movf	?___awmod+1,w
  1631  014B  1283               	bcf	3,5	;RP0=0, select bank0
  1632  014C  1303               	bcf	3,6	;RP1=0, select bank0
  1633  014D  00A6               	movwf	ISR@blinkCounter+1
  1634  014E  0870               	movf	?___awmod,w
  1635  014F  00A5               	movwf	ISR@blinkCounter
  1636                           
  1637                           ;main.c: 77: TMR0IF = 0;
  1638  0150  110B               	bcf	11,2	;volatile
  1639  0151                     i1l1073:	
  1640                           
  1641                           ;main.c: 78: }
  1642                           ;main.c: 81: if(TMR1IE && TMR1IF){
  1643  0151  1683               	bsf	3,5	;RP0=1, select bank1
  1644  0152  1303               	bcf	3,6	;RP1=0, select bank1
  1645  0153  1C0C               	btfss	12,0	;volatile
  1646  0154  2977               	goto	i1l79
  1647  0155  1283               	bcf	3,5	;RP0=0, select bank0
  1648  0156  1303               	bcf	3,6	;RP1=0, select bank0
  1649  0157  180C               	btfsc	12,0	;volatile
  1650  0158  2967               	goto	i1l1085
  1651  0159  2977               	goto	i1l79
  1652  015A                     i1l1079:	
  1653                           ;main.c: 85: case ALARM_ON:
  1654                           
  1655                           ;main.c: 84: switch(theAlarm.ALARM_STATE){
  1656                           
  1657                           
  1658                           ;main.c: 86: theAlarm.current_value += 1;
  1659  015A  3001               	movlw	1
  1660  015B  295D               	goto	L2
  1661  015C                     i1l1081:	
  1662                           ;main.c: 88: case ALARM_DOUBLE_TIME:
  1663                           
  1664                           ;main.c: 87: break;
  1665                           
  1666                           
  1667                           ;main.c: 89: theAlarm.current_value += 3;
  1668  015C  3003               	movlw	3
  1669  015D                     L2:	
  1670  015D  00F7               	movwf	??_ISR
  1671  015E  0877               	movf	??_ISR,w
  1672  015F  07A1               	addwf	_theAlarm+1,f	;volatile
  1673                           
  1674                           ;main.c: 90: break;
  1675  0160  2974               	goto	i1l82
  1676  0161                     i1l1083:	
  1677                           ;main.c: 91: case ALARM_FINAL_STATE:
  1678                           
  1679                           
  1680                           ;main.c: 92: timer1_stop();
  1681  0161  120A  118A  22FF  120A  118A  	fcall	_timer1_stop
  1682                           
  1683                           ;main.c: 93: }
  1684  0166  2974               	goto	i1l82
  1685  0167                     i1l1085:	
  1686  0167  1283               	bcf	3,5	;RP0=0, select bank0
  1687  0168  1303               	bcf	3,6	;RP1=0, select bank0
  1688  0169  0820               	movf	_theAlarm,w	;volatile
  1689                           
  1690                           ; Switch size 1, requested type "space"
  1691                           ; Number of cases is 3, Range of values is 1 to 3
  1692                           ; switch strategies available:
  1693                           ; Name         Instructions Cycles
  1694                           ; simple_byte           10     6 (average)
  1695                           ; direct_byte           20    11 (fixed)
  1696                           ; jumptable            263     9 (fixed)
  1697                           ;	Chosen strategy is simple_byte
  1698  016A  3A01               	xorlw	1	; case 1
  1699  016B  1903               	skipnz
  1700  016C  295A               	goto	i1l1079
  1701  016D  3A03               	xorlw	3	; case 2
  1702  016E  1903               	skipnz
  1703  016F  295C               	goto	i1l1081
  1704  0170  3A01               	xorlw	1	; case 3
  1705  0171  1903               	skipnz
  1706  0172  2961               	goto	i1l1083
  1707  0173  2974               	goto	i1l82
  1708  0174                     i1l82:	
  1709                           
  1710                           ;main.c: 95: TMR1IF = 0;
  1711  0174  1283               	bcf	3,5	;RP0=0, select bank0
  1712  0175  1303               	bcf	3,6	;RP1=0, select bank0
  1713  0176  100C               	bcf	12,0	;volatile
  1714  0177                     i1l79:	
  1715                           
  1716                           ;main.c: 96: }
  1717                           ;main.c: 99: if(TMR2IF && TMR2IE){
  1718  0177  1283               	bcf	3,5	;RP0=0, select bank0
  1719  0178  1C8C               	btfss	12,1	;volatile
  1720  0179  299B               	goto	i1l1103
  1721  017A  1683               	bsf	3,5	;RP0=1, select bank1
  1722  017B  1303               	bcf	3,6	;RP1=0, select bank1
  1723  017C  1C8C               	btfss	12,1	;volatile
  1724  017D  299B               	goto	i1l1103
  1725                           
  1726                           ;main.c: 100: if(levelSensors[0].LEVEL_STATE == TRANSITION_TO_EMPTY || levelSensors[0].L
      +                          EVEL_STATE == TRANSITION_TO_FULL){
  1727  017E  1283               	bcf	3,5	;RP0=0, select bank0
  1728  017F  1303               	bcf	3,6	;RP1=0, select bank0
  1729  0180  0328               	decf	_levelSensors,w	;volatile
  1730  0181  1903               	btfsc	3,2
  1731  0182  2987               	goto	i1l1093
  1732  0183  3003               	movlw	3
  1733  0184  0628               	xorwf	_levelSensors,w	;volatile
  1734  0185  1D03               	btfss	3,2
  1735  0186  298D               	goto	i1l1095
  1736  0187                     i1l1093:	
  1737                           
  1738                           ;main.c: 101: levelSensors[0].counter++;
  1739  0187  3001               	movlw	1
  1740  0188  07AB               	addwf	_levelSensors+3,f	;volatile
  1741  0189  1803               	skipnc
  1742  018A  0AAC               	incf	_levelSensors+4,f	;volatile
  1743  018B  3000               	movlw	0
  1744  018C  07AC               	addwf	_levelSensors+4,f	;volatile
  1745  018D                     i1l1095:	
  1746                           
  1747                           ;main.c: 102: }
  1748                           ;main.c: 104: if(levelSensors[1].LEVEL_STATE == TRANSITION_TO_EMPTY || levelSensors[1].L
      +                          EVEL_STATE == TRANSITION_TO_FULL){
  1749  018D  032D               	decf	_levelSensors+5,w	;volatile
  1750  018E  1903               	btfsc	3,2
  1751  018F  2994               	goto	i1l1099
  1752  0190  3003               	movlw	3
  1753  0191  062D               	xorwf	_levelSensors+5,w	;volatile
  1754  0192  1D03               	btfss	3,2
  1755  0193  299A               	goto	i1l1101
  1756  0194                     i1l1099:	
  1757                           
  1758                           ;main.c: 105: levelSensors[1].counter++;
  1759  0194  3001               	movlw	1
  1760  0195  07B0               	addwf	_levelSensors+8,f	;volatile
  1761  0196  1803               	skipnc
  1762  0197  0AB1               	incf	_levelSensors+9,f	;volatile
  1763  0198  3000               	movlw	0
  1764  0199  07B1               	addwf	_levelSensors+9,f	;volatile
  1765  019A                     i1l1101:	
  1766                           
  1767                           ;main.c: 106: }
  1768                           ;main.c: 107: TMR2IF = 0;
  1769  019A  108C               	bcf	12,1	;volatile
  1770  019B                     i1l1103:	
  1771                           
  1772                           ;main.c: 108: }
  1773                           ;main.c: 111: if(ADIF && ADIE){
  1774  019B  1283               	bcf	3,5	;RP0=0, select bank0
  1775  019C  1F0C               	btfss	12,6	;volatile
  1776  019D  29BB               	goto	i1l93
  1777  019E  1683               	bsf	3,5	;RP0=1, select bank1
  1778  019F  1303               	bcf	3,6	;RP1=0, select bank1
  1779  01A0  1F0C               	btfss	12,6	;volatile
  1780  01A1  29BB               	goto	i1l93
  1781                           
  1782                           ;main.c: 112: adcResult = (ADRESH <<8) | (ADRESL);
  1783  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1784  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  1785  01A4  081E               	movf	30,w	;volatile
  1786  01A5  00A4               	movwf	ISR@adcResult+1
  1787  01A6  1683               	bsf	3,5	;RP0=1, select bank1
  1788  01A7  1303               	bcf	3,6	;RP1=0, select bank1
  1789  01A8  081E               	movf	30,w	;volatile
  1790  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  1791  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  1792  01AB  00A3               	movwf	ISR@adcResult
  1793                           
  1794                           ;main.c: 113: theAlarm.trigger_value = adcResult >> 2;
  1795  01AC  0824               	movf	ISR@adcResult+1,w
  1796  01AD  00F8               	movwf	??_ISR+1
  1797  01AE  0823               	movf	ISR@adcResult,w
  1798  01AF  00F7               	movwf	??_ISR
  1799  01B0  0D78               	rlf	??_ISR+1,w
  1800  01B1  0CF8               	rrf	??_ISR+1,f
  1801  01B2  0CF7               	rrf	??_ISR,f
  1802  01B3  0D78               	rlf	??_ISR+1,w
  1803  01B4  0CF8               	rrf	??_ISR+1,f
  1804  01B5  0CF7               	rrf	??_ISR,f
  1805  01B6  0877               	movf	??_ISR,w
  1806  01B7  00F9               	movwf	??_ISR+2
  1807  01B8  0879               	movf	??_ISR+2,w
  1808  01B9  00A2               	movwf	_theAlarm+2	;volatile
  1809                           
  1810                           ;main.c: 114: ADIF = 0;
  1811  01BA  130C               	bcf	12,6	;volatile
  1812  01BB                     i1l93:	
  1813  01BB  087D               	movf	??_ISR+6,w
  1814  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  1815  01BD  00FF               	movwf	127
  1816  01BE  087C               	movf	??_ISR+5,w
  1817  01BF  008A               	movwf	10
  1818  01C0  087B               	movf	??_ISR+4,w
  1819  01C1  0084               	movwf	4
  1820  01C2  0E7A               	swapf	(??_ISR+3)^(0+-128),w
  1821  01C3  0083               	movwf	3
  1822  01C4  0EFE               	swapf	126,f
  1823  01C5  0E7E               	swapf	126,w
  1824  01C6  0009               	retfie
  1825  01C7                     __end_of_ISR:	
  1826                           
  1827                           	psect	intentry
  1828  0004                     __pintentry:	
  1829                           ;incstack = 0
  1830                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1831                           
  1832  0004                     interrupt_function:	
  1833  007E                     saved_w	set	btemp
  1834  0004  00FE               	movwf	btemp
  1835  0005  0E03               	swapf	3,w
  1836  0006  00FA               	movwf	??_ISR+3
  1837  0007  0804               	movf	4,w
  1838  0008  00FB               	movwf	??_ISR+4
  1839  0009  080A               	movf	10,w
  1840  000A  00FC               	movwf	??_ISR+5
  1841  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1842  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1843  000D  087F               	movf	btemp+1,w
  1844  000E  00FD               	movwf	??_ISR+6
  1845  000F  120A  118A  2901   	ljmp	_ISR
  1846                           
  1847                           	psect	text12
  1848  02FF                     __ptext12:	
  1849 ;; *************** function _timer1_stop *****************
  1850 ;; Defined at:
  1851 ;;		line 142 in file "util.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;		None
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;		None               void
  1858 ;; Registers used:
  1859 ;;		None
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1865 ;;      Params:         0       0       0       0       0
  1866 ;;      Locals:         0       0       0       0       0
  1867 ;;      Temps:          0       0       0       0       0
  1868 ;;      Totals:         0       0       0       0       0
  1869 ;;Total ram usage:        0 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; This function calls:
  1872 ;;		Nothing
  1873 ;; This function is called by:
  1874 ;;		_ISR
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           
  1879                           ;psect for function _timer1_stop
  1880  02FF                     _timer1_stop:	
  1881                           
  1882                           ;util.c: 143: T1CONbits.TMR1ON = 0;
  1883                           
  1884                           ;incstack = 0
  1885                           ; Regs used in _timer1_stop: []
  1886  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  1887  0300  1303               	bcf	3,6	;RP1=0, select bank0
  1888  0301  1010               	bcf	16,0	;volatile
  1889                           
  1890                           ;util.c: 144: T1CONbits.T1OSCEN =0;
  1891  0302  1190               	bcf	16,3	;volatile
  1892                           
  1893                           ;util.c: 145: PIE1bits.TMR1IE = 0;
  1894  0303  1683               	bsf	3,5	;RP0=1, select bank1
  1895  0304  1303               	bcf	3,6	;RP1=0, select bank1
  1896  0305  100C               	bcf	12,0	;volatile
  1897  0306  0008               	return
  1898  0307                     __end_of_timer1_stop:	
  1899                           
  1900                           	psect	text13
  1901  024D                     __ptext13:	
  1902 ;; *************** function ___awmod *****************
  1903 ;; Defined at:
  1904 ;;		line 6 in file "/opt/microchip/xc8/v1.34/sources/common/awmod.c"
  1905 ;; Parameters:    Size  Location     Type
  1906 ;;  divisor         2    0[COMMON] int 
  1907 ;;  dividend        2    2[COMMON] int 
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;  sign            1    6[COMMON] unsigned char 
  1910 ;;  counter         1    5[COMMON] unsigned char 
  1911 ;; Return value:  Size  Location     Type
  1912 ;;                  2    0[COMMON] int 
  1913 ;; Registers used:
  1914 ;;		wreg, status,2, status,0
  1915 ;; Tracked objects:
  1916 ;;		On entry : 0/0
  1917 ;;		On exit  : 0/0
  1918 ;;		Unchanged: 0/0
  1919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1920 ;;      Params:         4       0       0       0       0
  1921 ;;      Locals:         2       0       0       0       0
  1922 ;;      Temps:          1       0       0       0       0
  1923 ;;      Totals:         7       0       0       0       0
  1924 ;;Total ram usage:        7 bytes
  1925 ;; Hardware stack levels used:    1
  1926 ;; This function calls:
  1927 ;;		Nothing
  1928 ;; This function is called by:
  1929 ;;		_ISR
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           
  1934                           ;psect for function ___awmod
  1935  024D                     ___awmod:	
  1936                           
  1937                           ;incstack = 0
  1938                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1939  024D  01F6               	clrf	___awmod@sign
  1940  024E  1FF3               	btfss	___awmod@dividend+1,7
  1941  024F  2A57               	goto	i1l1019
  1942  0250  09F2               	comf	___awmod@dividend,f
  1943  0251  09F3               	comf	___awmod@dividend+1,f
  1944  0252  0AF2               	incf	___awmod@dividend,f
  1945  0253  1903               	skipnz
  1946  0254  0AF3               	incf	___awmod@dividend+1,f
  1947  0255  01F6               	clrf	___awmod@sign
  1948  0256  0AF6               	incf	___awmod@sign,f
  1949  0257                     i1l1019:	
  1950  0257  1FF1               	btfss	___awmod@divisor+1,7
  1951  0258  2A5E               	goto	i1l1023
  1952  0259  09F0               	comf	___awmod@divisor,f
  1953  025A  09F1               	comf	___awmod@divisor+1,f
  1954  025B  0AF0               	incf	___awmod@divisor,f
  1955  025C  1903               	skipnz
  1956  025D  0AF1               	incf	___awmod@divisor+1,f
  1957  025E                     i1l1023:	
  1958  025E  0870               	movf	___awmod@divisor,w
  1959  025F  0471               	iorwf	___awmod@divisor+1,w
  1960  0260  1903               	btfsc	3,2
  1961  0261  2A8B               	goto	i1l1041
  1962  0262  01F5               	clrf	___awmod@counter
  1963  0263  0AF5               	incf	___awmod@counter,f
  1964  0264                     i1l1031:	
  1965  0264  1BF1               	btfsc	___awmod@divisor+1,7
  1966  0265  2A72               	goto	i1l1033
  1967  0266  3001               	movlw	1
  1968  0267                     u49_25:	
  1969  0267  1003               	clrc
  1970  0268  0DF0               	rlf	___awmod@divisor,f
  1971  0269  0DF1               	rlf	___awmod@divisor+1,f
  1972  026A  3EFF               	addlw	-1
  1973  026B  1D03               	skipz
  1974  026C  2A67               	goto	u49_25
  1975  026D  3001               	movlw	1
  1976  026E  00F4               	movwf	??___awmod
  1977  026F  0874               	movf	??___awmod,w
  1978  0270  07F5               	addwf	___awmod@counter,f
  1979  0271  2A64               	goto	i1l1031
  1980  0272                     i1l1033:	
  1981  0272  0871               	movf	___awmod@divisor+1,w
  1982  0273  0273               	subwf	___awmod@dividend+1,w
  1983  0274  1D03               	skipz
  1984  0275  2A78               	goto	u51_25
  1985  0276  0870               	movf	___awmod@divisor,w
  1986  0277  0272               	subwf	___awmod@dividend,w
  1987  0278                     u51_25:	
  1988  0278  1C03               	skipc
  1989  0279  2A80               	goto	i1l1037
  1990  027A  0870               	movf	___awmod@divisor,w
  1991  027B  02F2               	subwf	___awmod@dividend,f
  1992  027C  0871               	movf	___awmod@divisor+1,w
  1993  027D  1C03               	skipc
  1994  027E  03F3               	decf	___awmod@dividend+1,f
  1995  027F  02F3               	subwf	___awmod@dividend+1,f
  1996  0280                     i1l1037:	
  1997  0280  3001               	movlw	1
  1998  0281                     u52_25:	
  1999  0281  1003               	clrc
  2000  0282  0CF1               	rrf	___awmod@divisor+1,f
  2001  0283  0CF0               	rrf	___awmod@divisor,f
  2002  0284  3EFF               	addlw	-1
  2003  0285  1D03               	skipz
  2004  0286  2A81               	goto	u52_25
  2005  0287  3001               	movlw	1
  2006  0288  02F5               	subwf	___awmod@counter,f
  2007  0289  1D03               	btfss	3,2
  2008  028A  2A72               	goto	i1l1033
  2009  028B                     i1l1041:	
  2010  028B  0876               	movf	___awmod@sign,w
  2011  028C  1903               	btfsc	3,2
  2012  028D  2A93               	goto	i1l1045
  2013  028E  09F2               	comf	___awmod@dividend,f
  2014  028F  09F3               	comf	___awmod@dividend+1,f
  2015  0290  0AF2               	incf	___awmod@dividend,f
  2016  0291  1903               	skipnz
  2017  0292  0AF3               	incf	___awmod@dividend+1,f
  2018  0293                     i1l1045:	
  2019  0293  0873               	movf	___awmod@dividend+1,w
  2020  0294  00F1               	movwf	?___awmod+1
  2021  0295  0872               	movf	___awmod@dividend,w
  2022  0296  00F0               	movwf	?___awmod
  2023  0297  0008               	return
  2024  0298                     __end_of___awmod:	
  2025  007E                     btemp	set	126	;btemp
  2026  007E                     wtemp	set	126
  2027  007E                     wtemp0	set	126
  2028  0080                     wtemp1	set	128
  2029  0082                     wtemp2	set	130
  2030  0084                     wtemp3	set	132
  2031  0086                     wtemp4	set	134
  2032  0088                     wtemp5	set	136
  2033  007F                     wtemp6	set	127
  2034  007E                     ttemp	set	126
  2035  007E                     ttemp0	set	126
  2036  0081                     ttemp1	set	129
  2037  0084                     ttemp2	set	132
  2038  0087                     ttemp3	set	135
  2039  007F                     ttemp4	set	127
  2040  007E                     ltemp	set	126
  2041  007E                     ltemp0	set	126
  2042  0082                     ltemp1	set	130
  2043  0086                     ltemp2	set	134
  2044  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    4
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      9      27
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    init_sensor@theSensor_init	PTR volatile struct levelSensor size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 

    checkSensorState@theSensor	PTR volatile struct levelSensor size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 

    checkTankStatus@theSensor	PTR volatile struct levelSensor size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awmod

Critical Paths under _main in BANK0

    _main->_checkSensorState

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     792
                                              6 BANK0      3     3      0
                       _adc_init_CH0
                   _checkSensorState
                    _checkTankStatus
                        _hello_world
                        _init_sensor
                        _timer0_init
                       _timer0_start
                        _timer1_init
                        _timer2_init
                       _timer2_start
 ---------------------------------------------------------------------------------
 (1) _timer2_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_sensor                                          2     2      0     142
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _hello_world                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkTankStatus                                      2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _checkSensorState                                     6     6      0     511
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _adc_init_CH0                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  7     7      0     614
                                              7 COMMON     7     7      0
                            ___awmod
                        _timer1_stop
 ---------------------------------------------------------------------------------
 (3) _timer1_stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     614
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc_init_CH0
   _checkSensorState
   _checkTankStatus
   _hello_world
   _init_sensor
   _timer0_init
   _timer0_start
   _timer1_init
   _timer2_init
   _timer2_start

 _ISR (ROOT)
   ___awmod
   _timer1_stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      29       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      9      1B       5       33.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      29      12        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Jun 21 02:13:16 2015

                         pc 0002                 __CFG_CP$OFF 0000                ?_hello_world 0070  
                        fsr 0004                         l147 0100                         l961 02C1  
                       l971 0039                         l965 0024                         l991 009A  
                       l993 00A1                         l985 0081                         l977 0049  
                       l969 0032                         l999 00B4                         u405 006F  
              __CFG_CPD$OFF 0000                         _ISR 0101                         u455 00DA  
                       u695 0242                 __CFG_WRT$ON 0000                         fsr0 0004  
                       indf 0000                ___awmod@sign 0076                __CFG_FOSC$HS 0000  
              __CFG_LVP$OFF 0000                        ?_ISR 0070                        l1009 00EC  
                      l1133 0213                        l1143 0231                        _ADIE 0466  
                      _ADIF 0066     __end_of_checkTankStatus 02C6                        i1l82 0174  
                      i1l76 0120                        i1l93 01BB                        i1l79 0177  
     __size_of_adc_init_CH0 000C                        _main 01C7                        btemp 007E  
             __CFG_BOREN$ON 0000                        ltemp 007E                        start 0012  
                      ttemp 007E                        wtemp 007E                       ??_ISR 0077  
                     ?_main 0070               __CFG_WDTE$OFF 0000             __end_of___awmod 0298  
                     _PORTB 0006                       _PORTC 0007                       u51_25 0278  
                     u52_25 0281                       _TRISA 0085                       _TRISB 0086  
                     u49_25 0267                       _TRISC 0087                _adc_init_CH0 02C6  
              ?_init_sensor 0070                       main@i 0039                       pclath 000A  
                     ltemp0 007E                       ltemp1 0082                       ltemp2 0086  
                     ltemp3 0080                       ttemp0 007E                       ttemp1 0081  
                     ttemp2 0084                       ttemp3 0087                       ttemp4 007F  
                     status 0003                       wtemp0 007E                       wtemp1 0080  
                     wtemp2 0082                       wtemp3 0084                       wtemp4 0086  
                     wtemp5 0088                       wtemp6 007F             __initialization 0015  
              __end_of_main 024D    __end_of_checkSensorState 0101                      ??_main 0038  
                    _ADRESH 001E                      _ADRESL 009E                      i1l1101 019A  
                    i1l1031 0264                      i1l1023 025E                      i1l1103 019B  
                    i1l1033 0272                      i1l1041 028B                      i1l1019 0257  
                    i1l1045 0293                      i1l1037 0280                      i1l1063 0122  
                    i1l1055 0106                      i1l1081 015C                      i1l1065 0127  
                    i1l1073 0151                      i1l1083 0161                      i1l1059 0108  
                    i1l1067 0135                      i1l1093 0187                      i1l1085 0167  
                    i1l1095 018D                      i1l1079 015A                      i1l1099 0194  
          ?_checkTankStatus 0070                      _TMR0IE 005D                      _TMR0IF 005A  
                    _TMR1IE 0460                      _TMR1IF 0060                      _TMR2IE 0461  
                    _TMR2IF 0061              __CFG_PWRTE$OFF 0000                   ??___awmod 0074  
              ?_timer0_init 0070                ?_timer1_init 0070                ?_timer2_init 0070  
              ?_timer1_stop 0070             ___awmod@divisor 0070             ___awmod@counter 0075  
      __size_of_hello_world 0001                      saved_w 007E     __end_of__initialization 001C  
            __pcstackCOMMON 0070              _OPTION_REGbits 0081        __size_of_init_sensor 0018  
                __pbssBANK0 0020                  __pmaintext 01C7                  _blinkState 0027  
                __pintentry 0004             ISR@blinkCounter 0025                  __stringtab 02D2  
                   ___awmod 024D        __size_of_timer0_init 0009           ?_checkSensorState 0070  
      __size_of_timer1_init 0006                     __ptext1 02DC                     __ptext2 02E5  
                   __ptext3 0307                     __ptext4 030D                     __ptext5 02EE  
                   __ptext6 0298                     __ptext7 0311                     __ptext8 02B0  
                   __ptext9 0020        __size_of_timer2_init 0009               ?_timer0_start 0070  
      __size_of_timer1_stop 0008               ?_timer2_start 0070           _FILTERTMR_TO_FULL 02DA  
              __size_of_ISR 00C6                   _T1CONbits 0010                   _T2CONbits 0012  
        ??_checkSensorState 0032            ___awmod@dividend 0072                     clrloop0 02F8  
      end_of_initialization 001C   __end_of_FILTERTMR_TO_FULL 02DC              ??_timer0_start 0032  
            ??_timer2_start 0032                ISR@adcResult 0023    __size_of_checkTankStatus 0016  
             ??_hello_world 0032  __end_of_FILTERTMR_TO_EMPTY 02DA         start_initialization 0015  
               __end_of_ISR 01C7    checkTankStatus@theSensor 0033               ?_adc_init_CH0 0070  
       __end_of_hello_world 0312               ??_init_sensor 0032                   ___latbits 0002  
             __pcstackBANK0 0032                _levelSensors 0028        __end_of_timer0_start 0311  
      __end_of_timer2_start 02E5                    ?___awmod 0070                   __pstrings 02D2  
         ??_checkTankStatus 0032              ??_adc_init_CH0 0032         __end_of_init_sensor 02B0  
 __size_of_checkSensorState 00E1           interrupt_function 0004                   clear_ram0 02F7  
                  _PIE1bits 008C               ??_timer0_init 0032               ??_timer1_init 0032  
             ??_timer2_init 0032               ??_timer1_stop 0070                 _hello_world 0311  
                _ADCON0bits 001F                 __stringbase 02D7                  _ADCON1bits 009F  
          __size_of___awmod 004B          __end_of__stringtab 02D8         __end_of_timer0_init 02F7  
       __end_of_timer1_init 030D         __end_of_timer2_init 02EE         __end_of_timer1_stop 0307  
               _init_sensor 0298                    __ptext10 02C6                    __ptext11 0101  
                  __ptext12 02FF                    __ptext13 024D       __size_of_timer0_start 0004  
     __size_of_timer2_start 0009          _FILTERTMR_TO_EMPTY 02D8               __size_of_main 0086  
                  _theAlarm 0020        __end_of_adc_init_CH0 02D2   checkSensorState@theSensor 0037  
              _timer0_start 030D                _timer2_start 02DC                  _INTCONbits 000B  
                  intlevel1 0000            _checkSensorState 0020   init_sensor@theSensor_init 0033  
           _checkTankStatus 02B0                   stringcode 02D2                 _timer0_init 02EE  
               _timer1_init 0307                 _timer2_init 02E5                 _timer1_stop 02FF  
                  stringdir 02D2                    stringtab 02D2  
