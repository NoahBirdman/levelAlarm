

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Jun 21 19:55:38 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F876
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	dabs	1,0x7E,2
    32  0000                     	;# 
    33  0001                     	;# 
    34  0002                     	;# 
    35  0003                     	;# 
    36  0004                     	;# 
    37  0005                     	;# 
    38  0006                     	;# 
    39  0007                     	;# 
    40  000A                     	;# 
    41  000B                     	;# 
    42  000C                     	;# 
    43  000D                     	;# 
    44  000E                     	;# 
    45  000E                     	;# 
    46  000F                     	;# 
    47  0010                     	;# 
    48  0011                     	;# 
    49  0012                     	;# 
    50  0013                     	;# 
    51  0014                     	;# 
    52  0015                     	;# 
    53  0015                     	;# 
    54  0016                     	;# 
    55  0017                     	;# 
    56  0018                     	;# 
    57  0019                     	;# 
    58  001A                     	;# 
    59  001B                     	;# 
    60  001B                     	;# 
    61  001C                     	;# 
    62  001D                     	;# 
    63  001E                     	;# 
    64  001F                     	;# 
    65  0081                     	;# 
    66  0085                     	;# 
    67  0086                     	;# 
    68  0087                     	;# 
    69  008C                     	;# 
    70  008D                     	;# 
    71  008E                     	;# 
    72  0091                     	;# 
    73  0092                     	;# 
    74  0093                     	;# 
    75  0094                     	;# 
    76  0098                     	;# 
    77  0099                     	;# 
    78  009E                     	;# 
    79  009F                     	;# 
    80  010C                     	;# 
    81  010D                     	;# 
    82  010E                     	;# 
    83  010F                     	;# 
    84  018C                     	;# 
    85  018D                     	;# 
    86  0000                     	;# 
    87  0001                     	;# 
    88  0002                     	;# 
    89  0003                     	;# 
    90  0004                     	;# 
    91  0005                     	;# 
    92  0006                     	;# 
    93  0007                     	;# 
    94  000A                     	;# 
    95  000B                     	;# 
    96  000C                     	;# 
    97  000D                     	;# 
    98  000E                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0013                     	;# 
   105  0014                     	;# 
   106  0015                     	;# 
   107  0015                     	;# 
   108  0016                     	;# 
   109  0017                     	;# 
   110  0018                     	;# 
   111  0019                     	;# 
   112  001A                     	;# 
   113  001B                     	;# 
   114  001B                     	;# 
   115  001C                     	;# 
   116  001D                     	;# 
   117  001E                     	;# 
   118  001F                     	;# 
   119  0081                     	;# 
   120  0085                     	;# 
   121  0086                     	;# 
   122  0087                     	;# 
   123  008C                     	;# 
   124  008D                     	;# 
   125  008E                     	;# 
   126  0091                     	;# 
   127  0092                     	;# 
   128  0093                     	;# 
   129  0094                     	;# 
   130  0098                     	;# 
   131  0099                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  000A                     	;# 
   149  000B                     	;# 
   150  000C                     	;# 
   151  000D                     	;# 
   152  000E                     	;# 
   153  000E                     	;# 
   154  000F                     	;# 
   155  0010                     	;# 
   156  0011                     	;# 
   157  0012                     	;# 
   158  0013                     	;# 
   159  0014                     	;# 
   160  0015                     	;# 
   161  0015                     	;# 
   162  0016                     	;# 
   163  0017                     	;# 
   164  0018                     	;# 
   165  0019                     	;# 
   166  001A                     	;# 
   167  001B                     	;# 
   168  001B                     	;# 
   169  001C                     	;# 
   170  001D                     	;# 
   171  001E                     	;# 
   172  001F                     	;# 
   173  0081                     	;# 
   174  0085                     	;# 
   175  0086                     	;# 
   176  0087                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  0091                     	;# 
   181  0092                     	;# 
   182  0093                     	;# 
   183  0094                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009E                     	;# 
   187  009F                     	;# 
   188  010C                     	;# 
   189  010D                     	;# 
   190  010E                     	;# 
   191  010F                     	;# 
   192  018C                     	;# 
   193  018D                     	;# 
   194                           
   195                           	psect	strings
   196  03E8                     __pstrings:	
   197  03E8                     stringtab:	
   198  03E8                     __stringtab:	
   199  03E8                     stringcode:	
   200                           ;	String table - string pointers are 1 byte each
   201                           
   202  03E8                     stringdir:	
   203  03E8  3003               	movlw	high stringdir
   204  03E9  008A               	movwf	10
   205  03EA  0804               	movf	4,w
   206  03EB  0A84               	incf	4,f
   207  03EC  0782               	addwf	2,f
   208  03ED                     __stringbase:	
   209  03ED  3400               	retlw	0
   210  03EE                     __end_of__stringtab:	
   211  03EE                     _FILTERTMR_TO_EMPTY:	
   212  03EE  3432               	retlw	50
   213  03EF  3400               	retlw	0
   214  03F0                     __end_of_FILTERTMR_TO_EMPTY:	
   215  03F0                     _FILTERTMR_TO_FULL:	
   216  03F0  3432               	retlw	50
   217  03F1  3400               	retlw	0
   218  03F2                     __end_of_FILTERTMR_TO_FULL:	
   219  001F                     _ADCON0bits	set	31
   220  001E                     _ADRESH	set	30
   221  000B                     _INTCONbits	set	11
   222  0006                     _PORTB	set	6
   223  0007                     _PORTC	set	7
   224  0010                     _T1CONbits	set	16
   225  0012                     _T2CONbits	set	18
   226  0066                     _ADIF	set	102
   227  005D                     _TMR0IE	set	93
   228  005A                     _TMR0IF	set	90
   229  0060                     _TMR1IF	set	96
   230  0061                     _TMR2IF	set	97
   231  009F                     _ADCON1bits	set	159
   232  009E                     _ADRESL	set	158
   233  0081                     _OPTION_REGbits	set	129
   234  008C                     _PIE1bits	set	140
   235  0085                     _TRISA	set	133
   236  0086                     _TRISB	set	134
   237  0087                     _TRISC	set	135
   238  0466                     _ADIE	set	1126
   239  0460                     _TMR1IE	set	1120
   240  0461                     _TMR2IE	set	1121
   241                           
   242                           ; #config settings
   243  0000                     
   244                           	psect	cinit
   245  0015                     start_initialization:	
   246  0015                     __initialization:	
   247                           
   248                           ; Clear objects allocated to BANK0
   249  0015  1383               	bcf	3,7	;select IRP bank0
   250  0016  3020               	movlw	low __pbssBANK0
   251  0017  0084               	movwf	4
   252  0018  3032               	movlw	low (__pbssBANK0+18)
   253  0019  120A  118A  2421   	fcall	clear_ram0
   254  001C                     end_of_initialization:	
   255                           ;End of C runtime variable initialization code
   256                           
   257  001C                     __end_of__initialization:	
   258  001C  0183               	clrf	3
   259  001D  120A  118A  290B   	ljmp	_main	;jump to C main() function
   260                           
   261                           	psect	bssBANK0
   262  0020                     __pbssBANK0:	
   263  0020                     ISR@adcResult:	
   264  0020                     	ds	2
   265  0022                     ISR@blinkCounter:	
   266  0022                     	ds	2
   267  0024                     _levelSensors:	
   268  0024                     	ds	10
   269  002E                     _theAlarm:	
   270  002E                     	ds	3
   271  0031                     _blinkState:	
   272  0031                     	ds	1
   273                           
   274                           	psect	clrtext
   275  0421                     clear_ram0:	
   276                           ;	Called with FSR containing the base address, and
   277                           ;	W with the last address+1
   278                           
   279  0421  0064               	clrwdt	;clear the watchdog before getting into this loop
   280  0422                     clrloop0:	
   281  0422  0180               	clrf	0	;clear RAM location pointed to by FSR
   282  0423  0A84               	incf	4,f	;increment pointer
   283  0424  0604               	xorwf	4,w	;XOR with final address
   284  0425  1903               	btfsc	3,2	;have we reached the end yet?
   285  0426  3400               	retlw	0	;all done for this memory range, return
   286  0427  0604               	xorwf	4,w	;XOR again to restore value
   287  0428  2C22               	goto	clrloop0	;do the next byte
   288                           
   289                           	psect	cstackCOMMON
   290  0070                     __pcstackCOMMON:	
   291  0070                     ?_timer1_stop:	
   292  0070                     ?_init_sensor:	
   293                           ; 0 bytes @ 0x0
   294                           
   295  0070                     ?_timer0_init:	
   296                           ; 0 bytes @ 0x0
   297                           
   298  0070                     ?_timer1_init:	
   299                           ; 0 bytes @ 0x0
   300                           
   301  0070                     ?_timer2_init:	
   302                           ; 0 bytes @ 0x0
   303                           
   304  0070                     ?_adc_init_CH0:	
   305                           ; 0 bytes @ 0x0
   306                           
   307  0070                     ?_timer0_start:	
   308                           ; 0 bytes @ 0x0
   309                           
   310  0070                     ?_timer2_start:	
   311                           ; 0 bytes @ 0x0
   312                           
   313  0070                     ?_checkTankStatus:	
   314                           ; 0 bytes @ 0x0
   315                           
   316  0070                     ?_checkSensorState:	
   317                           ; 0 bytes @ 0x0
   318                           
   319  0070                     ?_turnAlarmOn:	
   320                           ; 0 bytes @ 0x0
   321                           
   322  0070                     ?_ISR:	
   323                           ; 0 bytes @ 0x0
   324                           
   325  0070                     ?_timer1_start:	
   326                           ; 0 bytes @ 0x0
   327                           
   328  0070                     ?_adc_start:	
   329                           ; 0 bytes @ 0x0
   330                           
   331  0070                     ?i1_timer1_stop:	
   332                           ; 0 bytes @ 0x0
   333                           
   334  0070                     ??i1_timer1_stop:	
   335                           ; 0 bytes @ 0x0
   336                           
   337  0070                     ?_main:	
   338                           ; 0 bytes @ 0x0
   339                           
   340  0070                     ?___awmod:	
   341                           ; 2 bytes @ 0x0
   342                           
   343  0070                     ___awmod@divisor:	
   344                           ; 2 bytes @ 0x0
   345                           
   346                           
   347                           ; 2 bytes @ 0x0
   348  0070                     	ds	2
   349  0072                     ___awmod@dividend:	
   350                           
   351                           ; 2 bytes @ 0x2
   352  0072                     	ds	2
   353  0074                     ??___awmod:	
   354                           
   355                           ; 0 bytes @ 0x4
   356  0074                     	ds	1
   357  0075                     ___awmod@counter:	
   358                           
   359                           ; 1 bytes @ 0x5
   360  0075                     	ds	1
   361  0076                     ___awmod@sign:	
   362                           
   363                           ; 1 bytes @ 0x6
   364  0076                     	ds	1
   365  0077                     ??_ISR:	
   366                           
   367                           ; 0 bytes @ 0x7
   368  0077                     	ds	7
   369                           
   370                           	psect	cstackBANK0
   371  0032                     __pcstackBANK0:	
   372  0032                     ??_timer1_stop:	
   373  0032                     ??_init_sensor:	
   374                           ; 0 bytes @ 0x0
   375                           
   376  0032                     ??_timer0_init:	
   377                           ; 0 bytes @ 0x0
   378                           
   379  0032                     ??_timer1_init:	
   380                           ; 0 bytes @ 0x0
   381                           
   382  0032                     ??_timer2_init:	
   383                           ; 0 bytes @ 0x0
   384                           
   385  0032                     ??_adc_init_CH0:	
   386                           ; 0 bytes @ 0x0
   387                           
   388  0032                     ??_timer0_start:	
   389                           ; 0 bytes @ 0x0
   390                           
   391  0032                     ??_timer2_start:	
   392                           ; 0 bytes @ 0x0
   393                           
   394  0032                     ??_checkTankStatus:	
   395                           ; 0 bytes @ 0x0
   396                           
   397  0032                     ??_checkSensorState:	
   398                           ; 0 bytes @ 0x0
   399                           
   400  0032                     ?_blinkLed:	
   401                           ; 0 bytes @ 0x0
   402                           
   403  0032                     ??_turnAlarmOn:	
   404                           ; 0 bytes @ 0x0
   405                           
   406  0032                     ??_timer1_start:	
   407                           ; 0 bytes @ 0x0
   408                           
   409  0032                     ??_adc_start:	
   410                           ; 0 bytes @ 0x0
   411                           
   412  0032                     ?___bmul:	
   413                           ; 0 bytes @ 0x0
   414                           
   415  0032                     blinkLed@stateTwo:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0032                     ___bmul@multiplicand:	
   419                           ; 1 bytes @ 0x0
   420                           
   421                           
   422                           ; 1 bytes @ 0x0
   423  0032                     	ds	1
   424  0033                     ??___bmul:	
   425  0033                     checkTankStatus@theSensor:	
   426                           ; 0 bytes @ 0x1
   427                           
   428  0033                     init_sensor@theSensor_init:	
   429                           ; 1 bytes @ 0x1
   430                           
   431  0033                     blinkLed@almState:	
   432                           ; 1 bytes @ 0x1
   433                           
   434  0033                     turnAlarmOn@theAlarm:	
   435                           ; 1 bytes @ 0x1
   436                           
   437                           
   438                           ; 1 bytes @ 0x1
   439  0033                     	ds	1
   440  0034                     blinkLed@blinkState:	
   441  0034                     ___bmul@product:	
   442                           ; 1 bytes @ 0x2
   443                           
   444                           
   445                           ; 1 bytes @ 0x2
   446  0034                     	ds	1
   447  0035                     ??_blinkLed:	
   448  0035                     ___bmul@multiplier:	
   449                           ; 0 bytes @ 0x3
   450                           
   451                           
   452                           ; 1 bytes @ 0x3
   453  0035                     	ds	1
   454  0036                     ?_checkAlarmState:	
   455  0036                     blinkLed@stateOne:	
   456                           ; 0 bytes @ 0x4
   457                           
   458  0036                     checkAlarmState@theAlarm:	
   459                           ; 1 bytes @ 0x4
   460                           
   461                           
   462                           ; 1 bytes @ 0x4
   463  0036                     	ds	1
   464  0037                     ??_checkAlarmState:	
   465  0037                     checkSensorState@theSensor:	
   466                           ; 0 bytes @ 0x5
   467                           
   468                           
   469                           ; 1 bytes @ 0x5
   470  0037                     	ds	2
   471  0039                     checkAlarmState@theSensor:	
   472                           
   473                           ; 1 bytes @ 0x7
   474  0039                     	ds	1
   475  003A                     ??_main:	
   476                           
   477                           ; 0 bytes @ 0x8
   478  003A                     	ds	3
   479  003D                     main@i_139:	
   480                           
   481                           ; 2 bytes @ 0xB
   482  003D                     	ds	2
   483  003F                     main@i:	
   484                           
   485                           ; 1 bytes @ 0xD
   486  003F                     	ds	1
   487                           
   488                           	psect	maintext
   489  010B                     __pmaintext:	
   490 ;;
   491 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   492 ;;
   493 ;; *************** function _main *****************
   494 ;; Defined at:
   495 ;;		line 123 in file "main.c"
   496 ;; Parameters:    Size  Location     Type
   497 ;;		None
   498 ;; Auto vars:     Size  Location     Type
   499 ;;  i               2   11[BANK0 ] int 
   500 ;;  i               1   13[BANK0 ] unsigned char 
   501 ;; Return value:  Size  Location     Type
   502 ;;                  2   98[None  ] int 
   503 ;; Registers used:
   504 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   505 ;; Tracked objects:
   506 ;;		On entry : B00/0
   507 ;;		On exit  : 0/0
   508 ;;		Unchanged: 0/0
   509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   510 ;;      Params:         0       0       0       0       0
   511 ;;      Locals:         0       3       0       0       0
   512 ;;      Temps:          0       3       0       0       0
   513 ;;      Totals:         0       6       0       0       0
   514 ;;Total ram usage:        6 bytes
   515 ;; Hardware stack levels required when called:    5
   516 ;; This function calls:
   517 ;;		___bmul
   518 ;;		_adc_init_CH0
   519 ;;		_blinkLed
   520 ;;		_checkAlarmState
   521 ;;		_checkSensorState
   522 ;;		_checkTankStatus
   523 ;;		_init_sensor
   524 ;;		_timer0_init
   525 ;;		_timer0_start
   526 ;;		_timer1_init
   527 ;;		_timer2_init
   528 ;;		_timer2_start
   529 ;; This function is called by:
   530 ;;		Startup code after reset
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534                           
   535                           ;psect for function _main
   536  010B                     _main:	
   537                           
   538                           ;main.c: 125: char i = 0x00;
   539                           
   540                           ;incstack = 0
   541                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   542  010B  1283               	bcf	3,5	;RP0=0, select bank0
   543  010C  1303               	bcf	3,6	;RP1=0, select bank0
   544  010D  01BF               	clrf	main@i
   545                           
   546                           ;main.c: 127: TRISA |= (1<<0);
   547  010E  1683               	bsf	3,5	;RP0=1, select bank1
   548  010F  1303               	bcf	3,6	;RP1=0, select bank1
   549  0110  1405               	bsf	5,0	;volatile
   550                           
   551                           ;main.c: 128: i = 0;
   552  0111  1283               	bcf	3,5	;RP0=0, select bank0
   553  0112  1303               	bcf	3,6	;RP1=0, select bank0
   554  0113  01BF               	clrf	main@i
   555                           
   556                           ;main.c: 129: TRISB |= (1<<4)|(1<<5);
   557  0114  3030               	movlw	48
   558  0115  00BA               	movwf	??_main
   559  0116  083A               	movf	??_main,w
   560  0117  1683               	bsf	3,5	;RP0=1, select bank1
   561  0118  1303               	bcf	3,6	;RP1=0, select bank1
   562  0119  0486               	iorwf	6,f	;volatile
   563                           
   564                           ;main.c: 130: TRISC &= ~((1<<2)|(1<<3));
   565  011A  30F3               	movlw	243
   566  011B  1283               	bcf	3,5	;RP0=0, select bank0
   567  011C  1303               	bcf	3,6	;RP1=0, select bank0
   568  011D  00BA               	movwf	??_main
   569  011E  083A               	movf	??_main,w
   570  011F  1683               	bsf	3,5	;RP0=1, select bank1
   571  0120  1303               	bcf	3,6	;RP1=0, select bank1
   572  0121  0587               	andwf	7,f	;volatile
   573                           
   574                           ;main.c: 131: TRISB &= ~((1<<3)|(1<<2));
   575  0122  30F3               	movlw	243
   576  0123  1283               	bcf	3,5	;RP0=0, select bank0
   577  0124  1303               	bcf	3,6	;RP1=0, select bank0
   578  0125  00BA               	movwf	??_main
   579  0126  083A               	movf	??_main,w
   580  0127  1683               	bsf	3,5	;RP0=1, select bank1
   581  0128  1303               	bcf	3,6	;RP1=0, select bank1
   582  0129  0586               	andwf	6,f	;volatile
   583                           
   584                           ;main.c: 134: init_sensor(&levelSensors[0]);
   585  012A  3024               	movlw	(low (_levelSensors| 0))& (0+255)
   586  012B  120A  118A  239B  120A  118A  	fcall	_init_sensor
   587                           
   588                           ;main.c: 135: init_sensor(&levelSensors[1]);
   589  0130  3029               	movlw	(low ((_levelSensors| 0+5)))& (0+255)
   590  0131  120A  118A  239B  120A  118A  	fcall	_init_sensor
   591                           
   592                           ;main.c: 139: timer0_init();
   593  0136  120A  118A  2418  120A  118A  	fcall	_timer0_init
   594                           
   595                           ;main.c: 140: timer1_init();
   596  013B  120A  118A  2439  120A  118A  	fcall	_timer1_init
   597                           
   598                           ;main.c: 141: timer2_init();
   599  0140  120A  118A  240F  120A  118A  	fcall	_timer2_init
   600                           
   601                           ;main.c: 142: adc_init_CH0();
   602  0145  120A  118A  23DC  120A  118A  	fcall	_adc_init_CH0
   603                           
   604                           ;main.c: 144: PORTC |= (1<<2);
   605  014A  1283               	bcf	3,5	;RP0=0, select bank0
   606  014B  1303               	bcf	3,6	;RP1=0, select bank0
   607  014C  1507               	bsf	7,2	;volatile
   608                           
   609                           ;main.c: 145: PORTB &= ~((1<<2)|(1<<3));
   610  014D  30F3               	movlw	243
   611  014E  00BA               	movwf	??_main
   612  014F  083A               	movf	??_main,w
   613  0150  0586               	andwf	6,f	;volatile
   614                           
   615                           ;main.c: 147: timer0_start();
   616  0151  120A  118A  243F  120A  118A  	fcall	_timer0_start
   617                           
   618                           ;main.c: 148: timer2_start();
   619  0156  120A  118A  2406  120A  118A  	fcall	_timer2_start
   620  015B                     l1306:	
   621                           ;main.c: 151: while(1)
   622                           
   623                           
   624                           ;main.c: 152: {
   625                           ;main.c: 153: levelSensors[0].sensorRead = (PORTB & (1<<4));
   626  015B  1283               	bcf	3,5	;RP0=0, select bank0
   627  015C  1303               	bcf	3,6	;RP1=0, select bank0
   628  015D  0806               	movf	6,w	;volatile
   629  015E  3910               	andlw	16
   630  015F  00BA               	movwf	??_main
   631  0160  083A               	movf	??_main,w
   632  0161  00A5               	movwf	_levelSensors+1	;volatile
   633                           
   634                           ;main.c: 154: levelSensors[1].sensorRead = (PORTB & (1<<5));
   635  0162  0806               	movf	6,w	;volatile
   636  0163  3920               	andlw	32
   637  0164  00BA               	movwf	??_main
   638  0165  083A               	movf	??_main,w
   639  0166  00AA               	movwf	_levelSensors+6	;volatile
   640                           
   641                           ;main.c: 156: for(i = 0; i < 2;i++)
   642  0167  01BF               	clrf	main@i
   643  0168  3002               	movlw	2
   644  0169  023F               	subwf	main@i,w
   645  016A  1803               	btfsc	3,0
   646  016B  29AE               	goto	l1324
   647  016C                     l1314:	
   648                           
   649                           ;main.c: 157: {
   650                           ;main.c: 158: checkTankStatus(&levelSensors[i]);
   651  016C  3005               	movlw	5
   652  016D  00BA               	movwf	??_main
   653  016E  083A               	movf	??_main,w
   654  016F  00B2               	movwf	___bmul@multiplicand
   655  0170  083F               	movf	main@i,w
   656  0171  120A  118A  23C9  120A  118A  	fcall	___bmul
   657  0176  3E24               	addlw	(low (_levelSensors| 0))& (0+255)
   658  0177  120A  118A  23B3  120A  118A  	fcall	_checkTankStatus
   659                           
   660                           ;main.c: 160: checkSensorState(&levelSensors[i]);
   661  017C  3005               	movlw	5
   662  017D  1283               	bcf	3,5	;RP0=0, select bank0
   663  017E  1303               	bcf	3,6	;RP1=0, select bank0
   664  017F  00BA               	movwf	??_main
   665  0180  083A               	movf	??_main,w
   666  0181  00B2               	movwf	___bmul@multiplicand
   667  0182  083F               	movf	main@i,w
   668  0183  120A  118A  23C9  120A  118A  	fcall	___bmul
   669  0188  3E24               	addlw	(low (_levelSensors| 0))& (0+255)
   670  0189  120A  118A  2020  120A  118A  	fcall	_checkSensorState
   671                           
   672                           ;main.c: 162: checkAlarmState(&levelSensors[i], &theAlarm);
   673  018E  302E               	movlw	(low (_theAlarm| 0))& (0+255)
   674  018F  1283               	bcf	3,5	;RP0=0, select bank0
   675  0190  1303               	bcf	3,6	;RP1=0, select bank0
   676  0191  00BA               	movwf	??_main
   677  0192  083A               	movf	??_main,w
   678  0193  00B6               	movwf	checkAlarmState@theAlarm
   679  0194  3005               	movlw	5
   680  0195  00BB               	movwf	??_main+1
   681  0196  083B               	movf	??_main+1,w
   682  0197  00B2               	movwf	___bmul@multiplicand
   683  0198  083F               	movf	main@i,w
   684  0199  120A  118A  23C9  120A  118A  	fcall	___bmul
   685  019E  3E24               	addlw	(low (_levelSensors| 0))& (0+255)
   686  019F  120A  118A  2371  120A  118A  	fcall	_checkAlarmState
   687  01A4  3001               	movlw	1
   688  01A5  1283               	bcf	3,5	;RP0=0, select bank0
   689  01A6  1303               	bcf	3,6	;RP1=0, select bank0
   690  01A7  00BA               	movwf	??_main
   691  01A8  083A               	movf	??_main,w
   692  01A9  07BF               	addwf	main@i,f
   693  01AA  3002               	movlw	2
   694  01AB  023F               	subwf	main@i,w
   695  01AC  1C03               	skipc
   696  01AD  296C               	goto	l1314
   697  01AE                     l1324:	
   698                           
   699                           ;main.c: 163: }
   700                           ;main.c: 175: blinkLed(&(levelSensors[0].LEVEL_STATE), &(levelSensors[1].LEVEL_STATE), &
      +                          (theAlarm.ALARM_STATE), &blinkState);
   701  01AE  3029               	movlw	(low ((_levelSensors| 0+5)))& (0+255)
   702  01AF  00BA               	movwf	??_main
   703  01B0  083A               	movf	??_main,w
   704  01B1  00B2               	movwf	blinkLed@stateTwo
   705  01B2  302E               	movlw	(low (_theAlarm| 0))& (0+255)
   706  01B3  00BB               	movwf	??_main+1
   707  01B4  083B               	movf	??_main+1,w
   708  01B5  00B3               	movwf	blinkLed@almState
   709  01B6  3031               	movlw	(low (_blinkState| 0))& (0+255)
   710  01B7  00BC               	movwf	??_main+2
   711  01B8  083C               	movf	??_main+2,w
   712  01B9  00B4               	movwf	blinkLed@blinkState
   713  01BA  3024               	movlw	(low (_levelSensors| 0))& (0+255)
   714  01BB  120A  118A  22EE  120A  118A  	fcall	_blinkLed
   715  01C0  295B               	goto	l1306
   716  01C1                     l1326:	
   717                           ;main.c: 177: }
   718                           ;main.c: 182: while(1)
   719                           
   720                           
   721                           ;main.c: 183: {
   722                           ;main.c: 184: PORTC^=(1<<2);
   723  01C1  3004               	movlw	4
   724  01C2  1283               	bcf	3,5	;RP0=0, select bank0
   725  01C3  1303               	bcf	3,6	;RP1=0, select bank0
   726  01C4  00BA               	movwf	??_main
   727  01C5  083A               	movf	??_main,w
   728  01C6  0687               	xorwf	7,f	;volatile
   729                           
   730                           ;main.c: 185: for(int i=0;i<10000;i++);
   731  01C7  01BD               	clrf	main@i_139
   732  01C8  01BE               	clrf	main@i_139+1
   733  01C9                     L1:	
   734  01C9  083E               	movf	main@i_139+1,w
   735  01CA  3A80               	xorlw	128
   736  01CB  00FF               	movwf	127
   737  01CC  30A7               	movlw	167
   738  01CD  027F               	subwf	127,w
   739  01CE  1D03               	skipz
   740  01CF  29D2               	goto	u975
   741  01D0  3010               	movlw	16
   742  01D1  023D               	subwf	main@i_139,w
   743  01D2                     u975:	
   744  01D2  1803               	btfsc	3,0
   745  01D3  29C1               	goto	l1326
   746  01D4  3001               	movlw	1
   747  01D5  1283               	bcf	3,5	;RP0=0, select bank0
   748  01D6  1303               	bcf	3,6	;RP1=0, select bank0
   749  01D7  07BD               	addwf	main@i_139,f
   750  01D8  1803               	skipnc
   751  01D9  0ABE               	incf	main@i_139+1,f
   752  01DA  3000               	movlw	0
   753  01DB  07BE               	addwf	main@i_139+1,f
   754  01DC  29C9               	goto	L1
   755  01DD                     __end_of_main:	
   756                           ;main.c: 187: }
   757                           ;main.c: 188: return (0);
   758                           ;	Return value of _main is never used
   759                           
   760                           
   761                           	psect	text1
   762  0406                     __ptext1:	
   763 ;; *************** function _timer2_start *****************
   764 ;; Defined at:
   765 ;;		line 162 in file "util.c"
   766 ;; Parameters:    Size  Location     Type
   767 ;;		None
   768 ;; Auto vars:     Size  Location     Type
   769 ;;		None
   770 ;; Return value:  Size  Location     Type
   771 ;;		None               void
   772 ;; Registers used:
   773 ;;		None
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   779 ;;      Params:         0       0       0       0       0
   780 ;;      Locals:         0       0       0       0       0
   781 ;;      Temps:          0       0       0       0       0
   782 ;;      Totals:         0       0       0       0       0
   783 ;;Total ram usage:        0 bytes
   784 ;; Hardware stack levels used:    1
   785 ;; Hardware stack levels required when called:    2
   786 ;; This function calls:
   787 ;;		Nothing
   788 ;; This function is called by:
   789 ;;		_main
   790 ;; This function uses a non-reentrant model
   791 ;;
   792                           
   793                           
   794                           ;psect for function _timer2_start
   795  0406                     _timer2_start:	
   796                           
   797                           ;util.c: 163: PIE1bits.TMR2IE = 1;
   798                           
   799                           ;incstack = 0
   800                           ; Regs used in _timer2_start: []
   801  0406  1683               	bsf	3,5	;RP0=1, select bank1
   802  0407  1303               	bcf	3,6	;RP1=0, select bank1
   803  0408  148C               	bsf	12,1	;volatile
   804                           
   805                           ;util.c: 164: T2CONbits.TMR2ON = 1;
   806  0409  1283               	bcf	3,5	;RP0=0, select bank0
   807  040A  1303               	bcf	3,6	;RP1=0, select bank0
   808  040B  1512               	bsf	18,2	;volatile
   809                           
   810                           ;util.c: 165: INTCONbits.GIE = 1;
   811  040C  178B               	bsf	11,7	;volatile
   812                           
   813                           ;util.c: 166: INTCONbits.PEIE = 1;
   814  040D  170B               	bsf	11,6	;volatile
   815  040E  0008               	return
   816  040F                     __end_of_timer2_start:	
   817                           
   818                           	psect	text2
   819  040F                     __ptext2:	
   820 ;; *************** function _timer2_init *****************
   821 ;; Defined at:
   822 ;;		line 157 in file "util.c"
   823 ;; Parameters:    Size  Location     Type
   824 ;;		None
   825 ;; Auto vars:     Size  Location     Type
   826 ;;		None
   827 ;; Return value:  Size  Location     Type
   828 ;;		None               void
   829 ;; Registers used:
   830 ;;		wreg, status,2, status,0
   831 ;; Tracked objects:
   832 ;;		On entry : 0/0
   833 ;;		On exit  : 0/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   836 ;;      Params:         0       0       0       0       0
   837 ;;      Locals:         0       0       0       0       0
   838 ;;      Temps:          0       0       0       0       0
   839 ;;      Totals:         0       0       0       0       0
   840 ;;Total ram usage:        0 bytes
   841 ;; Hardware stack levels used:    1
   842 ;; Hardware stack levels required when called:    2
   843 ;; This function calls:
   844 ;;		Nothing
   845 ;; This function is called by:
   846 ;;		_main
   847 ;; This function uses a non-reentrant model
   848 ;;
   849                           
   850                           
   851                           ;psect for function _timer2_init
   852  040F                     _timer2_init:	
   853                           
   854                           ;util.c: 158: T2CONbits.T2CKPS = 0x02;
   855                           
   856                           ;incstack = 0
   857                           ; Regs used in _timer2_init: [wreg+status,2+status,0]
   858  040F  1283               	bcf	3,5	;RP0=0, select bank0
   859  0410  1303               	bcf	3,6	;RP1=0, select bank0
   860  0411  0812               	movf	18,w	;volatile
   861  0412  39FC               	andlw	-4
   862  0413  3802               	iorlw	2
   863  0414  0092               	movwf	18	;volatile
   864                           
   865                           ;util.c: 159: T2CONbits.TOUTPS = 0x0F;
   866  0415  3078               	movlw	120
   867  0416  0492               	iorwf	18,f	;volatile
   868  0417  0008               	return
   869  0418                     __end_of_timer2_init:	
   870                           
   871                           	psect	text3
   872  0439                     __ptext3:	
   873 ;; *************** function _timer1_init *****************
   874 ;; Defined at:
   875 ;;		line 128 in file "util.c"
   876 ;; Parameters:    Size  Location     Type
   877 ;;		None
   878 ;; Auto vars:     Size  Location     Type
   879 ;;		None
   880 ;; Return value:  Size  Location     Type
   881 ;;		None               void
   882 ;; Registers used:
   883 ;;		wreg, status,2, status,0
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   889 ;;      Params:         0       0       0       0       0
   890 ;;      Locals:         0       0       0       0       0
   891 ;;      Temps:          0       0       0       0       0
   892 ;;      Totals:         0       0       0       0       0
   893 ;;Total ram usage:        0 bytes
   894 ;; Hardware stack levels used:    1
   895 ;; Hardware stack levels required when called:    2
   896 ;; This function calls:
   897 ;;		Nothing
   898 ;; This function is called by:
   899 ;;		_main
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           
   904                           ;psect for function _timer1_init
   905  0439                     _timer1_init:	
   906                           
   907                           ;util.c: 134: T1CONbits.T1CKPS = 0x03;
   908                           
   909                           ;incstack = 0
   910                           ; Regs used in _timer1_init: [wreg+status,2+status,0]
   911  0439  3030               	movlw	48
   912  043A  1283               	bcf	3,5	;RP0=0, select bank0
   913  043B  1303               	bcf	3,6	;RP1=0, select bank0
   914  043C  0490               	iorwf	16,f	;volatile
   915                           
   916                           ;util.c: 135: T1CONbits.TMR1CS = 0;
   917  043D  1090               	bcf	16,1	;volatile
   918  043E  0008               	return
   919  043F                     __end_of_timer1_init:	
   920                           
   921                           	psect	text4
   922  043F                     __ptext4:	
   923 ;; *************** function _timer0_start *****************
   924 ;; Defined at:
   925 ;;		line 182 in file "util.c"
   926 ;; Parameters:    Size  Location     Type
   927 ;;		None
   928 ;; Auto vars:     Size  Location     Type
   929 ;;		None
   930 ;; Return value:  Size  Location     Type
   931 ;;		None               void
   932 ;; Registers used:
   933 ;;		None
   934 ;; Tracked objects:
   935 ;;		On entry : 0/0
   936 ;;		On exit  : 0/0
   937 ;;		Unchanged: 0/0
   938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   939 ;;      Params:         0       0       0       0       0
   940 ;;      Locals:         0       0       0       0       0
   941 ;;      Temps:          0       0       0       0       0
   942 ;;      Totals:         0       0       0       0       0
   943 ;;Total ram usage:        0 bytes
   944 ;; Hardware stack levels used:    1
   945 ;; Hardware stack levels required when called:    2
   946 ;; This function calls:
   947 ;;		Nothing
   948 ;; This function is called by:
   949 ;;		_main
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953                           
   954                           ;psect for function _timer0_start
   955  043F                     _timer0_start:	
   956                           
   957                           ;util.c: 183: INTCONbits.TMR0IE = 1;
   958                           
   959                           ;incstack = 0
   960                           ; Regs used in _timer0_start: []
   961  043F  168B               	bsf	11,5	;volatile
   962                           
   963                           ;util.c: 184: INTCONbits.GIE = 1;
   964  0440  178B               	bsf	11,7	;volatile
   965                           
   966                           ;util.c: 185: INTCONbits.PEIE = 1;
   967  0441  170B               	bsf	11,6	;volatile
   968  0442  0008               	return
   969  0443                     __end_of_timer0_start:	
   970                           
   971                           	psect	text5
   972  0418                     __ptext5:	
   973 ;; *************** function _timer0_init *****************
   974 ;; Defined at:
   975 ;;		line 175 in file "util.c"
   976 ;; Parameters:    Size  Location     Type
   977 ;;		None
   978 ;; Auto vars:     Size  Location     Type
   979 ;;		None
   980 ;; Return value:  Size  Location     Type
   981 ;;		None               void
   982 ;; Registers used:
   983 ;;		wreg, status,2, status,0
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   989 ;;      Params:         0       0       0       0       0
   990 ;;      Locals:         0       0       0       0       0
   991 ;;      Temps:          0       0       0       0       0
   992 ;;      Totals:         0       0       0       0       0
   993 ;;Total ram usage:        0 bytes
   994 ;; Hardware stack levels used:    1
   995 ;; Hardware stack levels required when called:    2
   996 ;; This function calls:
   997 ;;		Nothing
   998 ;; This function is called by:
   999 ;;		_main
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           
  1004                           ;psect for function _timer0_init
  1005  0418                     _timer0_init:	
  1006                           
  1007                           ;util.c: 176: OPTION_REGbits.T0CS = 0;
  1008                           
  1009                           ;incstack = 0
  1010                           ; Regs used in _timer0_init: [wreg+status,2+status,0]
  1011  0418  1683               	bsf	3,5	;RP0=1, select bank1
  1012  0419  1303               	bcf	3,6	;RP1=0, select bank1
  1013  041A  1281               	bcf	1,5	;volatile
  1014                           
  1015                           ;util.c: 177: OPTION_REGbits.PSA = 0;
  1016  041B  1181               	bcf	1,3	;volatile
  1017                           
  1018                           ;util.c: 178: OPTION_REGbits.PS = 0x04;
  1019  041C  0801               	movf	1,w	;volatile
  1020  041D  39F8               	andlw	-8
  1021  041E  3804               	iorlw	4
  1022  041F  0081               	movwf	1	;volatile
  1023  0420  0008               	return
  1024  0421                     __end_of_timer0_init:	
  1025                           
  1026                           	psect	text6
  1027  039B                     __ptext6:	
  1028 ;; *************** function _init_sensor *****************
  1029 ;; Defined at:
  1030 ;;		line 95 in file "util.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;  theSensor_in    1    wreg     PTR volatile struct leve
  1033 ;;		 -> levelSensors(10), 
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;  theSensor_in    1    1[BANK0 ] PTR volatile struct leve
  1036 ;;		 -> levelSensors(10), 
  1037 ;; Return value:  Size  Location     Type
  1038 ;;		None               void
  1039 ;; Registers used:
  1040 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1041 ;; Tracked objects:
  1042 ;;		On entry : 0/0
  1043 ;;		On exit  : 0/0
  1044 ;;		Unchanged: 0/0
  1045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1046 ;;      Params:         0       0       0       0       0
  1047 ;;      Locals:         0       1       0       0       0
  1048 ;;      Temps:          0       1       0       0       0
  1049 ;;      Totals:         0       2       0       0       0
  1050 ;;Total ram usage:        2 bytes
  1051 ;; Hardware stack levels used:    1
  1052 ;; Hardware stack levels required when called:    2
  1053 ;; This function calls:
  1054 ;;		Nothing
  1055 ;; This function is called by:
  1056 ;;		_main
  1057 ;; This function uses a non-reentrant model
  1058 ;;
  1059                           
  1060                           
  1061                           ;psect for function _init_sensor
  1062  039B                     _init_sensor:	
  1063                           
  1064                           ;incstack = 0
  1065                           ; Regs used in _init_sensor: [wreg-fsr0h+status,2+status,0]
  1066                           ;init_sensor@theSensor_init stored from wreg
  1067  039B  1283               	bcf	3,5	;RP0=0, select bank0
  1068  039C  1303               	bcf	3,6	;RP1=0, select bank0
  1069  039D  00B3               	movwf	init_sensor@theSensor_init
  1070                           
  1071                           ;util.c: 97: theSensor_init->counter = 0;
  1072  039E  0833               	movf	init_sensor@theSensor_init,w
  1073  039F  3E03               	addlw	3
  1074  03A0  0084               	movwf	4
  1075  03A1  1383               	bcf	3,7	;select IRP bank0
  1076  03A2  0180               	clrf	0
  1077  03A3  0A84               	incf	4,f
  1078  03A4  0180               	clrf	0
  1079                           
  1080                           ;util.c: 98: theSensor_init->LEVEL_STATE = INITIAL_STATE;
  1081  03A5  0833               	movf	init_sensor@theSensor_init,w
  1082  03A6  0084               	movwf	4
  1083  03A7  0180               	clrf	0
  1084                           
  1085                           ;util.c: 99: theSensor_init->sensorRead = 0;
  1086  03A8  0A33               	incf	init_sensor@theSensor_init,w
  1087  03A9  0084               	movwf	4
  1088  03AA  0180               	clrf	0
  1089                           
  1090                           ;util.c: 100: theSensor_init->TANK_STATE = TANK_IS_EMPTY;
  1091  03AB  3001               	movlw	1
  1092  03AC  00B2               	movwf	??_init_sensor
  1093  03AD  0833               	movf	init_sensor@theSensor_init,w
  1094  03AE  3E02               	addlw	2
  1095  03AF  0084               	movwf	4
  1096  03B0  0832               	movf	??_init_sensor,w
  1097  03B1  0080               	movwf	0
  1098  03B2  0008               	return
  1099  03B3                     __end_of_init_sensor:	
  1100                           
  1101                           	psect	text7
  1102  03B3                     __ptext7:	
  1103 ;; *************** function _checkTankStatus *****************
  1104 ;; Defined at:
  1105 ;;		line 4 in file "util.c"
  1106 ;; Parameters:    Size  Location     Type
  1107 ;;  theSensor       1    wreg     PTR volatile struct leve
  1108 ;;		 -> levelSensors(10), 
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;  theSensor       1    1[BANK0 ] PTR volatile struct leve
  1111 ;;		 -> levelSensors(10), 
  1112 ;; Return value:  Size  Location     Type
  1113 ;;		None               void
  1114 ;; Registers used:
  1115 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1116 ;; Tracked objects:
  1117 ;;		On entry : 0/0
  1118 ;;		On exit  : 0/0
  1119 ;;		Unchanged: 0/0
  1120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1121 ;;      Params:         0       0       0       0       0
  1122 ;;      Locals:         0       1       0       0       0
  1123 ;;      Temps:          0       1       0       0       0
  1124 ;;      Totals:         0       2       0       0       0
  1125 ;;Total ram usage:        2 bytes
  1126 ;; Hardware stack levels used:    1
  1127 ;; Hardware stack levels required when called:    2
  1128 ;; This function calls:
  1129 ;;		Nothing
  1130 ;; This function is called by:
  1131 ;;		_main
  1132 ;; This function uses a non-reentrant model
  1133 ;;
  1134                           
  1135                           
  1136                           ;psect for function _checkTankStatus
  1137  03B3                     _checkTankStatus:	
  1138                           
  1139                           ;incstack = 0
  1140                           ; Regs used in _checkTankStatus: [wreg-fsr0h+status,2+status,0]
  1141                           ;checkTankStatus@theSensor stored from wreg
  1142  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  1143  03B4  1303               	bcf	3,6	;RP1=0, select bank0
  1144  03B5  00B3               	movwf	checkTankStatus@theSensor
  1145                           
  1146                           ;util.c: 8: if (theSensor->sensorRead > 0)
  1147  03B6  0A33               	incf	checkTankStatus@theSensor,w
  1148  03B7  0084               	movwf	4
  1149  03B8  1383               	bcf	3,7	;select IRP bank0
  1150  03B9  0800               	movf	0,w
  1151  03BA  1903               	btfsc	3,2
  1152  03BB  2BC4               	goto	l1076
  1153                           
  1154                           ;util.c: 9: {
  1155                           ;util.c: 10: theSensor->TANK_STATE = TANK_IS_EMPTY;
  1156  03BC  3001               	movlw	1
  1157  03BD  00B2               	movwf	??_checkTankStatus
  1158  03BE  0833               	movf	checkTankStatus@theSensor,w
  1159  03BF  3E02               	addlw	2
  1160  03C0  0084               	movwf	4
  1161  03C1  0832               	movf	??_checkTankStatus,w
  1162  03C2  0080               	movwf	0
  1163                           
  1164                           ;util.c: 12: }else
  1165  03C3  0008               	return
  1166  03C4                     l1076:	
  1167                           
  1168                           ;util.c: 13: {
  1169                           ;util.c: 14: theSensor->TANK_STATE = TANK_IS_FULL;
  1170  03C4  0833               	movf	checkTankStatus@theSensor,w
  1171  03C5  3E02               	addlw	2
  1172  03C6  0084               	movwf	4
  1173  03C7  0180               	clrf	0
  1174  03C8  0008               	return
  1175  03C9                     __end_of_checkTankStatus:	
  1176                           
  1177                           	psect	text8
  1178  0020                     __ptext8:	
  1179 ;; *************** function _checkSensorState *****************
  1180 ;; Defined at:
  1181 ;;		line 20 in file "util.c"
  1182 ;; Parameters:    Size  Location     Type
  1183 ;;  theSensor       1    wreg     PTR volatile struct leve
  1184 ;;		 -> levelSensors(10), 
  1185 ;; Auto vars:     Size  Location     Type
  1186 ;;  theSensor       1    5[BANK0 ] PTR volatile struct leve
  1187 ;;		 -> levelSensors(10), 
  1188 ;; Return value:  Size  Location     Type
  1189 ;;		None               void
  1190 ;; Registers used:
  1191 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1192 ;; Tracked objects:
  1193 ;;		On entry : 0/0
  1194 ;;		On exit  : 0/0
  1195 ;;		Unchanged: 0/0
  1196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1197 ;;      Params:         0       0       0       0       0
  1198 ;;      Locals:         0       1       0       0       0
  1199 ;;      Temps:          0       5       0       0       0
  1200 ;;      Totals:         0       6       0       0       0
  1201 ;;Total ram usage:        6 bytes
  1202 ;; Hardware stack levels used:    1
  1203 ;; Hardware stack levels required when called:    2
  1204 ;; This function calls:
  1205 ;;		Nothing
  1206 ;; This function is called by:
  1207 ;;		_main
  1208 ;; This function uses a non-reentrant model
  1209 ;;
  1210                           
  1211                           
  1212                           ;psect for function _checkSensorState
  1213  0020                     _checkSensorState:	
  1214                           
  1215                           ;incstack = 0
  1216                           ; Regs used in _checkSensorState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1217                           ;checkSensorState@theSensor stored from wreg
  1218  0020  1283               	bcf	3,5	;RP0=0, select bank0
  1219  0021  1303               	bcf	3,6	;RP1=0, select bank0
  1220  0022  00B7               	movwf	checkSensorState@theSensor
  1221                           
  1222                           ;util.c: 22: switch(theSensor->LEVEL_STATE){
  1223  0023  28F3               	goto	l1126
  1224  0024                     l1080:	
  1225                           ;util.c: 23: case INITIAL_STATE :
  1226                           
  1227                           
  1228                           ;util.c: 26: if(theSensor->TANK_STATE == TANK_IS_EMPTY)
  1229  0024  0837               	movf	checkSensorState@theSensor,w
  1230  0025  3E02               	addlw	2
  1231  0026  0084               	movwf	4
  1232  0027  1383               	bcf	3,7	;select IRP bank0
  1233  0028  0300               	decf	0,w
  1234  0029  1D03               	btfss	3,2
  1235  002A  2832               	goto	l1084
  1236                           
  1237                           ;util.c: 27: {
  1238                           ;util.c: 28: theSensor->LEVEL_STATE = TRANSITION_TO_EMPTY;
  1239  002B  3001               	movlw	1
  1240  002C  00B2               	movwf	??_checkSensorState
  1241  002D  0837               	movf	checkSensorState@theSensor,w
  1242  002E  0084               	movwf	4
  1243  002F  0832               	movf	??_checkSensorState,w
  1244  0030  0080               	movwf	0
  1245                           
  1246                           ;util.c: 29: }else
  1247  0031  0008               	return
  1248  0032                     l1084:	
  1249                           
  1250                           ;util.c: 30: {
  1251                           ;util.c: 31: theSensor->counter = 0;
  1252  0032  0837               	movf	checkSensorState@theSensor,w
  1253  0033  3E03               	addlw	3
  1254  0034  0084               	movwf	4
  1255  0035  0180               	clrf	0
  1256  0036  0A84               	incf	4,f
  1257  0037  0180               	clrf	0
  1258                           
  1259                           ;util.c: 32: }
  1260                           ;util.c: 33: break;
  1261  0038  0008               	return
  1262  0039                     l1086:	
  1263                           ;util.c: 35: case TRANSITION_TO_EMPTY :
  1264                           
  1265                           
  1266                           ;util.c: 39: if(theSensor->TANK_STATE == TANK_IS_FULL)
  1267  0039  0837               	movf	checkSensorState@theSensor,w
  1268  003A  3E02               	addlw	2
  1269  003B  0084               	movwf	4
  1270  003C  0800               	movf	0,w
  1271  003D  1D03               	btfss	3,2
  1272  003E  2849               	goto	l1092
  1273                           
  1274                           ;util.c: 40: {
  1275                           ;util.c: 41: theSensor->counter = 0;
  1276  003F  0837               	movf	checkSensorState@theSensor,w
  1277  0040  3E03               	addlw	3
  1278  0041  0084               	movwf	4
  1279  0042  0180               	clrf	0
  1280  0043  0A84               	incf	4,f
  1281  0044  0180               	clrf	0
  1282                           
  1283                           ;util.c: 42: theSensor->LEVEL_STATE = INITIAL_STATE;
  1284  0045  0837               	movf	checkSensorState@theSensor,w
  1285  0046  0084               	movwf	4
  1286  0047  0180               	clrf	0
  1287                           
  1288                           ;util.c: 44: }else if(theSensor->TANK_STATE == TANK_IS_EMPTY && theSensor->counter >= FI
      +                          LTERTMR_TO_EMPTY)
  1289  0048  0008               	return
  1290  0049                     l1092:	
  1291  0049  0837               	movf	checkSensorState@theSensor,w
  1292  004A  3E02               	addlw	2
  1293  004B  0084               	movwf	4
  1294  004C  0300               	decf	0,w
  1295  004D  1D03               	btfss	3,2
  1296  004E  0008               	return
  1297  004F  3001               	movlw	low (_FILTERTMR_TO_EMPTY-__stringbase)
  1298  0050  0084               	movwf	4
  1299  0051  120A  118A  23E8  120A  118A  	fcall	stringdir
  1300  0056  00B2               	movwf	??_checkSensorState
  1301  0057  120A  118A  23E8  120A  118A  	fcall	stringdir
  1302  005C  00B3               	movwf	??_checkSensorState+1
  1303  005D  0837               	movf	checkSensorState@theSensor,w
  1304  005E  3E03               	addlw	3
  1305  005F  0084               	movwf	4
  1306  0060  0800               	movf	0,w
  1307  0061  00B4               	movwf	??_checkSensorState+2
  1308  0062  0A84               	incf	4,f
  1309  0063  0800               	movf	0,w
  1310  0064  00B5               	movwf	??_checkSensorState+3
  1311  0065  0835               	movf	??_checkSensorState+3,w
  1312  0066  3A80               	xorlw	128
  1313  0067  00B6               	movwf	??_checkSensorState+4
  1314  0068  0833               	movf	??_checkSensorState+1,w
  1315  0069  3A80               	xorlw	128
  1316  006A  0236               	subwf	??_checkSensorState+4,w
  1317  006B  1D03               	skipz
  1318  006C  286F               	goto	u555
  1319  006D  0832               	movf	??_checkSensorState,w
  1320  006E  0234               	subwf	??_checkSensorState+2,w
  1321  006F                     u555:	
  1322  006F  1C03               	skipc
  1323  0070  0008               	return
  1324                           
  1325                           ;util.c: 45: {
  1326                           ;util.c: 46: theSensor->counter = 0;
  1327  0071  1283               	bcf	3,5	;RP0=0, select bank0
  1328  0072  1303               	bcf	3,6	;RP1=0, select bank0
  1329  0073  0837               	movf	checkSensorState@theSensor,w
  1330  0074  3E03               	addlw	3
  1331  0075  0084               	movwf	4
  1332  0076  1383               	bcf	3,7	;select IRP bank0
  1333  0077  0180               	clrf	0
  1334  0078  0A84               	incf	4,f
  1335  0079  0180               	clrf	0
  1336                           
  1337                           ;util.c: 47: theSensor->LEVEL_STATE = EMPTY;
  1338  007A  3002               	movlw	2
  1339  007B  00B2               	movwf	??_checkSensorState
  1340  007C  0837               	movf	checkSensorState@theSensor,w
  1341  007D  0084               	movwf	4
  1342  007E  0832               	movf	??_checkSensorState,w
  1343  007F  0080               	movwf	0
  1344                           
  1345                           ;util.c: 49: }
  1346                           ;util.c: 50: break;
  1347  0080  0008               	return
  1348  0081                     l1100:	
  1349                           ;util.c: 52: case EMPTY:
  1350                           
  1351                           
  1352                           ;util.c: 54: if(theSensor->TANK_STATE == TANK_IS_FULL && theSensor->counter == 0){
  1353  0081  0837               	movf	checkSensorState@theSensor,w
  1354  0082  3E02               	addlw	2
  1355  0083  0084               	movwf	4
  1356  0084  0800               	movf	0,w
  1357  0085  1D03               	btfss	3,2
  1358  0086  289A               	goto	l1106
  1359  0087  0837               	movf	checkSensorState@theSensor,w
  1360  0088  3E03               	addlw	3
  1361  0089  0084               	movwf	4
  1362  008A  0800               	movf	0,w
  1363  008B  00B2               	movwf	??_checkSensorState
  1364  008C  0A84               	incf	4,f
  1365  008D  0800               	movf	0,w
  1366  008E  00B3               	movwf	??_checkSensorState+1
  1367  008F  0832               	movf	??_checkSensorState,w
  1368  0090  0433               	iorwf	??_checkSensorState+1,w
  1369  0091  1D03               	btfss	3,2
  1370  0092  289A               	goto	l1106
  1371                           
  1372                           ;util.c: 55: theSensor->LEVEL_STATE = TRANSITION_TO_FULL;
  1373  0093  3003               	movlw	3
  1374  0094  00B2               	movwf	??_checkSensorState
  1375  0095  0837               	movf	checkSensorState@theSensor,w
  1376  0096  0084               	movwf	4
  1377  0097  0832               	movf	??_checkSensorState,w
  1378  0098  0080               	movwf	0
  1379                           
  1380                           ;util.c: 57: }else{
  1381  0099  0008               	return
  1382  009A                     l1106:	
  1383                           
  1384                           ;util.c: 58: theSensor->counter = 0;
  1385  009A  0837               	movf	checkSensorState@theSensor,w
  1386  009B  3E03               	addlw	3
  1387  009C  0084               	movwf	4
  1388  009D  0180               	clrf	0
  1389  009E  0A84               	incf	4,f
  1390  009F  0180               	clrf	0
  1391                           
  1392                           ;util.c: 60: }
  1393                           ;util.c: 61: break;
  1394  00A0  0008               	return
  1395  00A1                     l1108:	
  1396                           ;util.c: 63: case TRANSITION_TO_FULL:
  1397                           
  1398                           
  1399                           ;util.c: 65: if(theSensor->TANK_STATE == TANK_IS_EMPTY){
  1400  00A1  0837               	movf	checkSensorState@theSensor,w
  1401  00A2  3E02               	addlw	2
  1402  00A3  0084               	movwf	4
  1403  00A4  0300               	decf	0,w
  1404  00A5  1D03               	btfss	3,2
  1405  00A6  28B4               	goto	l1114
  1406                           
  1407                           ;util.c: 66: theSensor->counter = 0;
  1408  00A7  0837               	movf	checkSensorState@theSensor,w
  1409  00A8  3E03               	addlw	3
  1410  00A9  0084               	movwf	4
  1411  00AA  0180               	clrf	0
  1412  00AB  0A84               	incf	4,f
  1413  00AC  0180               	clrf	0
  1414                           
  1415                           ;util.c: 67: theSensor->LEVEL_STATE = EMPTY;
  1416  00AD  3002               	movlw	2
  1417  00AE  00B2               	movwf	??_checkSensorState
  1418  00AF  0837               	movf	checkSensorState@theSensor,w
  1419  00B0  0084               	movwf	4
  1420  00B1  0832               	movf	??_checkSensorState,w
  1421  00B2  0080               	movwf	0
  1422                           
  1423                           ;util.c: 70: }else if(theSensor->TANK_STATE == TANK_IS_FULL && theSensor->counter > FILT
      +                          ERTMR_TO_FULL){
  1424  00B3  0008               	return
  1425  00B4                     l1114:	
  1426  00B4  0837               	movf	checkSensorState@theSensor,w
  1427  00B5  3E02               	addlw	2
  1428  00B6  0084               	movwf	4
  1429  00B7  0800               	movf	0,w
  1430  00B8  1D03               	btfss	3,2
  1431  00B9  0008               	return
  1432  00BA  0837               	movf	checkSensorState@theSensor,w
  1433  00BB  3E03               	addlw	3
  1434  00BC  0084               	movwf	4
  1435  00BD  0800               	movf	0,w
  1436  00BE  00B2               	movwf	??_checkSensorState
  1437  00BF  0A84               	incf	4,f
  1438  00C0  0800               	movf	0,w
  1439  00C1  00B3               	movwf	??_checkSensorState+1
  1440  00C2  3003               	movlw	low (_FILTERTMR_TO_FULL-__stringbase)
  1441  00C3  0084               	movwf	4
  1442  00C4  120A  118A  23E8  120A  118A  	fcall	stringdir
  1443  00C9  00B4               	movwf	??_checkSensorState+2
  1444  00CA  120A  118A  23E8  120A  118A  	fcall	stringdir
  1445  00CF  00B5               	movwf	??_checkSensorState+3
  1446  00D0  0835               	movf	??_checkSensorState+3,w
  1447  00D1  3A80               	xorlw	128
  1448  00D2  00B6               	movwf	??_checkSensorState+4
  1449  00D3  0833               	movf	??_checkSensorState+1,w
  1450  00D4  3A80               	xorlw	128
  1451  00D5  0236               	subwf	??_checkSensorState+4,w
  1452  00D6  1D03               	skipz
  1453  00D7  28DA               	goto	u605
  1454  00D8  0832               	movf	??_checkSensorState,w
  1455  00D9  0234               	subwf	??_checkSensorState+2,w
  1456  00DA                     u605:	
  1457  00DA  1803               	skipnc
  1458  00DB  0008               	return
  1459                           
  1460                           ;util.c: 72: theSensor->counter = 0;
  1461  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  1462  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  1463  00DE  0837               	movf	checkSensorState@theSensor,w
  1464  00DF  3E03               	addlw	3
  1465  00E0  0084               	movwf	4
  1466  00E1  1383               	bcf	3,7	;select IRP bank0
  1467  00E2  0180               	clrf	0
  1468  00E3  0A84               	incf	4,f
  1469  00E4  0180               	clrf	0
  1470                           
  1471                           ;util.c: 73: theSensor->LEVEL_STATE = TURN_ON_ALARM;
  1472  00E5  3004               	movlw	4
  1473  00E6  00B2               	movwf	??_checkSensorState
  1474  00E7  0837               	movf	checkSensorState@theSensor,w
  1475  00E8  0084               	movwf	4
  1476  00E9  0832               	movf	??_checkSensorState,w
  1477  00EA  0080               	movwf	0
  1478                           
  1479                           ;util.c: 75: }
  1480                           ;util.c: 76: break;
  1481  00EB  0008               	return
  1482  00EC                     l1122:	
  1483                           ;util.c: 79: case TURN_ON_ALARM :
  1484                           
  1485                           
  1486                           ;util.c: 82: theSensor->LEVEL_STATE = FINAL_STATE;
  1487  00EC  3005               	movlw	5
  1488  00ED  00B2               	movwf	??_checkSensorState
  1489  00EE  0837               	movf	checkSensorState@theSensor,w
  1490  00EF  0084               	movwf	4
  1491  00F0  0832               	movf	??_checkSensorState,w
  1492  00F1  0080               	movwf	0
  1493                           
  1494                           ;util.c: 89: }
  1495                           
  1496                           ;util.c: 88: break;
  1497                           
  1498                           ;util.c: 86: default:
  1499                           
  1500                           ;util.c: 85: case FINAL_STATE:
  1501                           
  1502                           ;util.c: 83: break;
  1503  00F2  0008               	return
  1504  00F3                     l1126:	
  1505  00F3  0837               	movf	checkSensorState@theSensor,w
  1506  00F4  0084               	movwf	4
  1507  00F5  1383               	bcf	3,7	;select IRP bank0
  1508  00F6  0800               	movf	0,w
  1509                           
  1510                           ; Switch size 1, requested type "space"
  1511                           ; Number of cases is 6, Range of values is 0 to 5
  1512                           ; switch strategies available:
  1513                           ; Name         Instructions Cycles
  1514                           ; simple_byte           19    10 (average)
  1515                           ; direct_byte           26     8 (fixed)
  1516                           ; jumptable            260     6 (fixed)
  1517                           ;	Chosen strategy is simple_byte
  1518  00F7  3A00               	xorlw	0	; case 0
  1519  00F8  1903               	skipnz
  1520  00F9  2824               	goto	l1080
  1521  00FA  3A01               	xorlw	1	; case 1
  1522  00FB  1903               	skipnz
  1523  00FC  2839               	goto	l1086
  1524  00FD  3A03               	xorlw	3	; case 2
  1525  00FE  1903               	skipnz
  1526  00FF  2881               	goto	l1100
  1527  0100  3A01               	xorlw	1	; case 3
  1528  0101  1903               	skipnz
  1529  0102  28A1               	goto	l1108
  1530  0103  3A07               	xorlw	7	; case 4
  1531  0104  1903               	skipnz
  1532  0105  28EC               	goto	l1122
  1533  0106  3A01               	xorlw	1	; case 5
  1534  0107  1903               	skipnz
  1535  0108  290A               	goto	l154
  1536  0109  290A               	goto	l154
  1537  010A                     l154:	
  1538  010A  0008               	return
  1539  010B                     __end_of_checkSensorState:	
  1540                           
  1541                           	psect	text9
  1542  0371                     __ptext9:	
  1543 ;; *************** function _checkAlarmState *****************
  1544 ;; Defined at:
  1545 ;;		line 4 in file "alarm_source.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;  theSensor       1    wreg     PTR volatile struct leve
  1548 ;;		 -> levelSensors(10), 
  1549 ;;  theAlarm        1    4[BANK0 ] PTR volatile struct Alar
  1550 ;;		 -> theAlarm(3), 
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;  theSensor       1    7[BANK0 ] PTR volatile struct leve
  1553 ;;		 -> levelSensors(10), 
  1554 ;; Return value:  Size  Location     Type
  1555 ;;		None               void
  1556 ;; Registers used:
  1557 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1558 ;; Tracked objects:
  1559 ;;		On entry : 0/0
  1560 ;;		On exit  : 0/0
  1561 ;;		Unchanged: 0/0
  1562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1563 ;;      Params:         0       1       0       0       0
  1564 ;;      Locals:         0       1       0       0       0
  1565 ;;      Temps:          0       2       0       0       0
  1566 ;;      Totals:         0       4       0       0       0
  1567 ;;Total ram usage:        4 bytes
  1568 ;; Hardware stack levels used:    1
  1569 ;; Hardware stack levels required when called:    4
  1570 ;; This function calls:
  1571 ;;		_timer1_stop
  1572 ;;		_turnAlarmOn
  1573 ;; This function is called by:
  1574 ;;		_main
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578                           
  1579                           ;psect for function _checkAlarmState
  1580  0371                     _checkAlarmState:	
  1581                           
  1582                           ;incstack = 0
  1583                           ; Regs used in _checkAlarmState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1584                           ;checkAlarmState@theSensor stored from wreg
  1585  0371  1283               	bcf	3,5	;RP0=0, select bank0
  1586  0372  1303               	bcf	3,6	;RP1=0, select bank0
  1587  0373  00B9               	movwf	checkAlarmState@theSensor
  1588                           
  1589                           ;alarm_source.c: 6: if(theSensor->LEVEL_STATE == TURN_ON_ALARM)
  1590  0374  0839               	movf	checkAlarmState@theSensor,w
  1591  0375  0084               	movwf	4
  1592  0376  3004               	movlw	4
  1593  0377  1383               	bcf	3,7	;select IRP bank0
  1594  0378  0600               	xorwf	0,w
  1595  0379  1D03               	btfss	3,2
  1596  037A  2B81               	goto	l1132
  1597                           
  1598                           ;alarm_source.c: 7: {
  1599                           ;alarm_source.c: 8: turnAlarmOn(theAlarm);
  1600  037B  0836               	movf	checkAlarmState@theAlarm,w
  1601  037C  120A  118A  2332  120A  118A  	fcall	_turnAlarmOn
  1602  0381                     l1132:	
  1603                           
  1604                           ;alarm_source.c: 9: }
  1605                           ;alarm_source.c: 11: if(theAlarm->current_value > theAlarm->trigger_value)
  1606  0381  1283               	bcf	3,5	;RP0=0, select bank0
  1607  0382  1303               	bcf	3,6	;RP1=0, select bank0
  1608  0383  0A36               	incf	checkAlarmState@theAlarm,w
  1609  0384  0084               	movwf	4
  1610  0385  1383               	bcf	3,7	;select IRP bank0
  1611  0386  0800               	movf	0,w
  1612  0387  00B7               	movwf	??_checkAlarmState
  1613  0388  0836               	movf	checkAlarmState@theAlarm,w
  1614  0389  3E02               	addlw	2
  1615  038A  0084               	movwf	4
  1616  038B  0800               	movf	0,w
  1617  038C  00B8               	movwf	??_checkAlarmState+1
  1618  038D  0837               	movf	??_checkAlarmState,w
  1619  038E  0238               	subwf	??_checkAlarmState+1,w
  1620  038F  1803               	skipnc
  1621  0390  0008               	return
  1622                           
  1623                           ;alarm_source.c: 12: {
  1624                           ;alarm_source.c: 14: theAlarm->ALARM_STATE = ALARM_FINAL_STATE;
  1625  0391  3003               	movlw	3
  1626  0392  00B7               	movwf	??_checkAlarmState
  1627  0393  0836               	movf	checkAlarmState@theAlarm,w
  1628  0394  0084               	movwf	4
  1629  0395  0837               	movf	??_checkAlarmState,w
  1630  0396  0080               	movwf	0
  1631                           
  1632                           ;alarm_source.c: 15: timer1_stop();
  1633  0397  120A  118A  2429   	fcall	_timer1_stop
  1634  039A  0008               	return
  1635  039B                     __end_of_checkAlarmState:	
  1636                           
  1637                           	psect	text10
  1638  0332                     __ptext10:	
  1639 ;; *************** function _turnAlarmOn *****************
  1640 ;; Defined at:
  1641 ;;		line 21 in file "alarm_source.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;  theAlarm        1    wreg     PTR volatile struct Alar
  1644 ;;		 -> theAlarm(3), 
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  theAlarm        1    1[BANK0 ] PTR volatile struct Alar
  1647 ;;		 -> theAlarm(3), 
  1648 ;; Return value:  Size  Location     Type
  1649 ;;		None               void
  1650 ;; Registers used:
  1651 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1652 ;; Tracked objects:
  1653 ;;		On entry : 0/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1657 ;;      Params:         0       0       0       0       0
  1658 ;;      Locals:         0       1       0       0       0
  1659 ;;      Temps:          0       1       0       0       0
  1660 ;;      Totals:         0       2       0       0       0
  1661 ;;Total ram usage:        2 bytes
  1662 ;; Hardware stack levels used:    1
  1663 ;; Hardware stack levels required when called:    3
  1664 ;; This function calls:
  1665 ;;		_adc_start
  1666 ;;		_timer1_start
  1667 ;; This function is called by:
  1668 ;;		_checkAlarmState
  1669 ;; This function uses a non-reentrant model
  1670 ;;
  1671                           
  1672                           
  1673                           ;psect for function _turnAlarmOn
  1674  0332                     _turnAlarmOn:	
  1675                           
  1676                           ;incstack = 0
  1677                           ; Regs used in _turnAlarmOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1678                           ;turnAlarmOn@theAlarm stored from wreg
  1679  0332  1283               	bcf	3,5	;RP0=0, select bank0
  1680  0333  1303               	bcf	3,6	;RP1=0, select bank0
  1681  0334  00B3               	movwf	turnAlarmOn@theAlarm
  1682                           
  1683                           ;alarm_source.c: 23: switch(theAlarm->ALARM_STATE)
  1684  0335  2B4F               	goto	l1040
  1685  0336                     l1030:	
  1686                           ;alarm_source.c: 24: {
  1687                           ;alarm_source.c: 25: case ALARM_OFF:
  1688                           
  1689                           
  1690                           ;alarm_source.c: 26: adc_start();
  1691  0336  120A  118A  23FC  120A  118A  	fcall	_adc_start
  1692                           
  1693                           ;alarm_source.c: 27: timer1_start();
  1694  033B  120A  118A  23F2  120A  118A  	fcall	_timer1_start
  1695                           
  1696                           ;alarm_source.c: 28: theAlarm->current_value = 0;
  1697  0340  1283               	bcf	3,5	;RP0=0, select bank0
  1698  0341  1303               	bcf	3,6	;RP1=0, select bank0
  1699  0342  0A33               	incf	turnAlarmOn@theAlarm,w
  1700  0343  0084               	movwf	4
  1701  0344  1383               	bcf	3,7	;select IRP bank0
  1702  0345  0180               	clrf	0
  1703                           
  1704                           ;alarm_source.c: 29: theAlarm->ALARM_STATE = ALARM_ON;
  1705  0346  3001               	movlw	1
  1706  0347  2B49               	goto	L2
  1707  0348                     l1036:	
  1708                           ;alarm_source.c: 32: case ALARM_DOUBLE_TIME:
  1709                           ;alarm_source.c: 33: default:
  1710                           
  1711                           ;alarm_source.c: 31: case ALARM_ON:
  1712                           
  1713                           ;alarm_source.c: 30: break;
  1714                           
  1715                           
  1716                           ;alarm_source.c: 34: theAlarm->ALARM_STATE = ALARM_DOUBLE_TIME;
  1717  0348  3002               	movlw	2
  1718  0349                     L2:	
  1719  0349  00B2               	movwf	??_turnAlarmOn
  1720  034A  0833               	movf	turnAlarmOn@theAlarm,w
  1721  034B  0084               	movwf	4
  1722  034C  0832               	movf	??_turnAlarmOn,w
  1723  034D  0080               	movwf	0
  1724                           
  1725                           ;alarm_source.c: 36: }
  1726                           
  1727                           ;alarm_source.c: 35: break;
  1728  034E  2B5D               	goto	l1042
  1729  034F                     l1040:	
  1730  034F  0833               	movf	turnAlarmOn@theAlarm,w
  1731  0350  0084               	movwf	4
  1732  0351  1383               	bcf	3,7	;select IRP bank0
  1733  0352  0800               	movf	0,w
  1734                           
  1735                           ; Switch size 1, requested type "space"
  1736                           ; Number of cases is 3, Range of values is 0 to 2
  1737                           ; switch strategies available:
  1738                           ; Name         Instructions Cycles
  1739                           ; simple_byte           10     6 (average)
  1740                           ; direct_byte           17     8 (fixed)
  1741                           ; jumptable            260     6 (fixed)
  1742                           ;	Chosen strategy is simple_byte
  1743  0353  3A00               	xorlw	0	; case 0
  1744  0354  1903               	skipnz
  1745  0355  2B36               	goto	l1030
  1746  0356  3A01               	xorlw	1	; case 1
  1747  0357  1903               	skipnz
  1748  0358  2B48               	goto	l1036
  1749  0359  3A03               	xorlw	3	; case 2
  1750  035A  1903               	skipnz
  1751  035B  2B48               	goto	l1036
  1752  035C  2B48               	goto	l1036
  1753  035D                     l1042:	
  1754                           
  1755                           ;alarm_source.c: 37: if(theAlarm->ALARM_STATE == ALARM_OFF)
  1756  035D  0833               	movf	turnAlarmOn@theAlarm,w
  1757  035E  0084               	movwf	4
  1758  035F  0800               	movf	0,w
  1759  0360  1D03               	btfss	3,2
  1760  0361  0008               	return
  1761                           
  1762                           ;alarm_source.c: 38: {
  1763                           ;alarm_source.c: 39: adc_start();
  1764  0362  120A  118A  23FC  120A  118A  	fcall	_adc_start
  1765                           
  1766                           ;alarm_source.c: 40: timer1_start();
  1767  0367  120A  118A  23F2   	fcall	_timer1_start
  1768                           
  1769                           ;alarm_source.c: 41: theAlarm->current_value = 0;
  1770  036A  1283               	bcf	3,5	;RP0=0, select bank0
  1771  036B  1303               	bcf	3,6	;RP1=0, select bank0
  1772  036C  0A33               	incf	turnAlarmOn@theAlarm,w
  1773  036D  0084               	movwf	4
  1774  036E  1383               	bcf	3,7	;select IRP bank0
  1775  036F  0180               	clrf	0
  1776  0370  0008               	return
  1777  0371                     __end_of_turnAlarmOn:	
  1778                           
  1779                           	psect	text11
  1780  03F2                     __ptext11:	
  1781 ;; *************** function _timer1_start *****************
  1782 ;; Defined at:
  1783 ;;		line 139 in file "util.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;		None
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;		None               void
  1790 ;; Registers used:
  1791 ;;		None
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1797 ;;      Params:         0       0       0       0       0
  1798 ;;      Locals:         0       0       0       0       0
  1799 ;;      Temps:          0       0       0       0       0
  1800 ;;      Totals:         0       0       0       0       0
  1801 ;;Total ram usage:        0 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    2
  1804 ;; This function calls:
  1805 ;;		Nothing
  1806 ;; This function is called by:
  1807 ;;		_turnAlarmOn
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           
  1812                           ;psect for function _timer1_start
  1813  03F2                     _timer1_start:	
  1814                           
  1815                           ;util.c: 140: T1CONbits.T1OSCEN = 1;
  1816                           
  1817                           ;incstack = 0
  1818                           ; Regs used in _timer1_start: []
  1819  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  1820  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  1821  03F4  1590               	bsf	16,3	;volatile
  1822                           
  1823                           ;util.c: 141: T1CONbits.TMR1ON = 1;
  1824  03F5  1410               	bsf	16,0	;volatile
  1825                           
  1826                           ;util.c: 142: PIE1bits.TMR1IE = 1;
  1827  03F6  1683               	bsf	3,5	;RP0=1, select bank1
  1828  03F7  1303               	bcf	3,6	;RP1=0, select bank1
  1829  03F8  140C               	bsf	12,0	;volatile
  1830                           
  1831                           ;util.c: 143: INTCONbits.GIE = 1;
  1832  03F9  178B               	bsf	11,7	;volatile
  1833                           
  1834                           ;util.c: 144: INTCONbits.PEIE = 1;
  1835  03FA  170B               	bsf	11,6	;volatile
  1836  03FB  0008               	return
  1837  03FC                     __end_of_timer1_start:	
  1838                           
  1839                           	psect	text12
  1840  03FC                     __ptext12:	
  1841 ;; *************** function _adc_start *****************
  1842 ;; Defined at:
  1843 ;;		line 205 in file "util.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;		None
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;		None
  1848 ;; Return value:  Size  Location     Type
  1849 ;;		None               void
  1850 ;; Registers used:
  1851 ;;		None
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1857 ;;      Params:         0       0       0       0       0
  1858 ;;      Locals:         0       0       0       0       0
  1859 ;;      Temps:          0       0       0       0       0
  1860 ;;      Totals:         0       0       0       0       0
  1861 ;;Total ram usage:        0 bytes
  1862 ;; Hardware stack levels used:    1
  1863 ;; Hardware stack levels required when called:    2
  1864 ;; This function calls:
  1865 ;;		Nothing
  1866 ;; This function is called by:
  1867 ;;		_turnAlarmOn
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           
  1872                           ;psect for function _adc_start
  1873  03FC                     _adc_start:	
  1874                           
  1875                           ;util.c: 206: ADCON0bits.ADON =1;
  1876                           
  1877                           ;incstack = 0
  1878                           ; Regs used in _adc_start: []
  1879  03FC  1283               	bcf	3,5	;RP0=0, select bank0
  1880  03FD  1303               	bcf	3,6	;RP1=0, select bank0
  1881  03FE  141F               	bsf	31,0	;volatile
  1882                           
  1883                           ;util.c: 207: ADCON0bits.GO_nDONE = 1;
  1884  03FF  151F               	bsf	31,2	;volatile
  1885                           
  1886                           ;util.c: 208: PIE1bits.ADIE =1;
  1887  0400  1683               	bsf	3,5	;RP0=1, select bank1
  1888  0401  1303               	bcf	3,6	;RP1=0, select bank1
  1889  0402  170C               	bsf	12,6	;volatile
  1890                           
  1891                           ;util.c: 209: INTCONbits.GIE =1;
  1892  0403  178B               	bsf	11,7	;volatile
  1893                           
  1894                           ;util.c: 210: INTCONbits.PEIE = 1;
  1895  0404  170B               	bsf	11,6	;volatile
  1896  0405  0008               	return
  1897  0406                     __end_of_adc_start:	
  1898                           
  1899                           	psect	text13
  1900  0429                     __ptext13:	
  1901 ;; *************** function _timer1_stop *****************
  1902 ;; Defined at:
  1903 ;;		line 149 in file "util.c"
  1904 ;; Parameters:    Size  Location     Type
  1905 ;;		None
  1906 ;; Auto vars:     Size  Location     Type
  1907 ;;		None
  1908 ;; Return value:  Size  Location     Type
  1909 ;;		None               void
  1910 ;; Registers used:
  1911 ;;		None
  1912 ;; Tracked objects:
  1913 ;;		On entry : 0/0
  1914 ;;		On exit  : 0/0
  1915 ;;		Unchanged: 0/0
  1916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1917 ;;      Params:         0       0       0       0       0
  1918 ;;      Locals:         0       0       0       0       0
  1919 ;;      Temps:          0       0       0       0       0
  1920 ;;      Totals:         0       0       0       0       0
  1921 ;;Total ram usage:        0 bytes
  1922 ;; Hardware stack levels used:    1
  1923 ;; Hardware stack levels required when called:    2
  1924 ;; This function calls:
  1925 ;;		Nothing
  1926 ;; This function is called by:
  1927 ;;		_checkAlarmState
  1928 ;;		_turnAlarmOff
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           
  1933                           ;psect for function _timer1_stop
  1934  0429                     _timer1_stop:	
  1935                           
  1936                           ;util.c: 150: T1CONbits.TMR1ON = 0;
  1937                           
  1938                           ;incstack = 0
  1939                           ; Regs used in _timer1_stop: []
  1940  0429  1283               	bcf	3,5	;RP0=0, select bank0
  1941  042A  1303               	bcf	3,6	;RP1=0, select bank0
  1942  042B  1010               	bcf	16,0	;volatile
  1943                           
  1944                           ;util.c: 151: T1CONbits.T1OSCEN =0;
  1945  042C  1190               	bcf	16,3	;volatile
  1946                           
  1947                           ;util.c: 152: PIE1bits.TMR1IE = 0;
  1948  042D  1683               	bsf	3,5	;RP0=1, select bank1
  1949  042E  1303               	bcf	3,6	;RP1=0, select bank1
  1950  042F  100C               	bcf	12,0	;volatile
  1951  0430  0008               	return
  1952  0431                     __end_of_timer1_stop:	
  1953                           
  1954                           	psect	text14
  1955  02EE                     __ptext14:	
  1956 ;; *************** function _blinkLed *****************
  1957 ;; Defined at:
  1958 ;;		line 104 in file "util.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;  stateOne        1    wreg     PTR enum E1033
  1961 ;;		 -> levelSensors(10), 
  1962 ;;  stateTwo        1    0[BANK0 ] PTR enum E1033
  1963 ;;		 -> levelSensors(10), 
  1964 ;;  almState        1    1[BANK0 ] PTR enum E1005
  1965 ;;		 -> theAlarm(3), 
  1966 ;;  blinkState      1    2[BANK0 ] PTR enum E1026
  1967 ;;		 -> blinkState(1), 
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;  stateOne        1    4[BANK0 ] PTR enum E1033
  1970 ;;		 -> levelSensors(10), 
  1971 ;; Return value:  Size  Location     Type
  1972 ;;		None               void
  1973 ;; Registers used:
  1974 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1980 ;;      Params:         0       3       0       0       0
  1981 ;;      Locals:         0       1       0       0       0
  1982 ;;      Temps:          0       1       0       0       0
  1983 ;;      Totals:         0       5       0       0       0
  1984 ;;Total ram usage:        5 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    2
  1987 ;; This function calls:
  1988 ;;		Nothing
  1989 ;; This function is called by:
  1990 ;;		_main
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           
  1995                           ;psect for function _blinkLed
  1996  02EE                     _blinkLed:	
  1997                           
  1998                           ;incstack = 0
  1999                           ; Regs used in _blinkLed: [wreg-fsr0h+status,2+status,0]
  2000                           ;blinkLed@stateOne stored from wreg
  2001  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  2002  02EF  1303               	bcf	3,6	;RP1=0, select bank0
  2003  02F0  00B6               	movwf	blinkLed@stateOne
  2004                           
  2005                           ;util.c: 106: if(*stateOne == TRANSITION_TO_EMPTY || *stateOne == TRANSITION_TO_FULL || 
      +                          *stateTwo == TRANSITION_TO_EMPTY || *stateTwo == TRANSITION_TO_FULL)
  2006  02F1  0836               	movf	blinkLed@stateOne,w
  2007  02F2  0084               	movwf	4
  2008  02F3  1383               	bcf	3,7	;select IRP bank0
  2009  02F4  0300               	decf	0,w
  2010  02F5  1903               	btfsc	3,2
  2011  02F6  2B08               	goto	l1146
  2012  02F7  0836               	movf	blinkLed@stateOne,w
  2013  02F8  0084               	movwf	4
  2014  02F9  3003               	movlw	3
  2015  02FA  0600               	xorwf	0,w
  2016  02FB  1903               	btfsc	3,2
  2017  02FC  2B08               	goto	l1146
  2018  02FD  0832               	movf	blinkLed@stateTwo,w
  2019  02FE  0084               	movwf	4
  2020  02FF  0300               	decf	0,w
  2021  0300  1903               	btfsc	3,2
  2022  0301  2B08               	goto	l1146
  2023  0302  0832               	movf	blinkLed@stateTwo,w
  2024  0303  0084               	movwf	4
  2025  0304  3003               	movlw	3
  2026  0305  0600               	xorwf	0,w
  2027  0306  1D03               	btfss	3,2
  2028  0307  2B0F               	goto	l1148
  2029  0308                     l1146:	
  2030                           
  2031                           ;util.c: 107: {
  2032                           ;util.c: 108: *blinkState = FILTER_BLINK_FAST ;
  2033  0308  3002               	movlw	2
  2034  0309  00B5               	movwf	??_blinkLed
  2035  030A  0834               	movf	blinkLed@blinkState,w
  2036  030B  0084               	movwf	4
  2037  030C  0835               	movf	??_blinkLed,w
  2038  030D  0080               	movwf	0
  2039                           
  2040                           ;util.c: 110: }
  2041  030E  0008               	return
  2042  030F                     l1148:	
  2043                           
  2044                           ;util.c: 111: else if(*almState == ALARM_ON || *almState == ALARM_DOUBLE_TIME)
  2045  030F  0833               	movf	blinkLed@almState,w
  2046  0310  0084               	movwf	4
  2047  0311  0300               	decf	0,w
  2048  0312  1903               	btfsc	3,2
  2049  0313  2B1A               	goto	l1152
  2050  0314  0833               	movf	blinkLed@almState,w
  2051  0315  0084               	movwf	4
  2052  0316  3002               	movlw	2
  2053  0317  0600               	xorwf	0,w
  2054  0318  1D03               	btfss	3,2
  2055  0319  2B21               	goto	l1154
  2056  031A                     l1152:	
  2057                           
  2058                           ;util.c: 112: {
  2059                           ;util.c: 113: *blinkState = ALARM_BLINK_SLOW;
  2060  031A  3003               	movlw	3
  2061  031B  00B5               	movwf	??_blinkLed
  2062  031C  0834               	movf	blinkLed@blinkState,w
  2063  031D  0084               	movwf	4
  2064  031E  0835               	movf	??_blinkLed,w
  2065  031F  0080               	movwf	0
  2066                           
  2067                           ;util.c: 115: }else if (*almState == ALARM_FINAL_STATE)
  2068  0320  0008               	return
  2069  0321                     l1154:	
  2070  0321  0833               	movf	blinkLed@almState,w
  2071  0322  0084               	movwf	4
  2072  0323  3003               	movlw	3
  2073  0324  0600               	xorwf	0,w
  2074  0325  1D03               	btfss	3,2
  2075  0326  2B2E               	goto	l1158
  2076                           
  2077                           ;util.c: 116: {
  2078                           ;util.c: 117: *blinkState = ALARM_SOLID_ON;
  2079  0327  3004               	movlw	4
  2080  0328  00B5               	movwf	??_blinkLed
  2081  0329  0834               	movf	blinkLed@blinkState,w
  2082  032A  0084               	movwf	4
  2083  032B  0835               	movf	??_blinkLed,w
  2084  032C  0080               	movwf	0
  2085                           
  2086                           ;util.c: 119: }else
  2087  032D  0008               	return
  2088  032E                     l1158:	
  2089                           
  2090                           ;util.c: 120: {
  2091                           ;util.c: 121: *blinkState = LIGHTS_OFF;
  2092  032E  0834               	movf	blinkLed@blinkState,w
  2093  032F  0084               	movwf	4
  2094  0330  0180               	clrf	0
  2095  0331  0008               	return
  2096  0332                     __end_of_blinkLed:	
  2097                           
  2098                           	psect	text15
  2099  03DC                     __ptext15:	
  2100 ;; *************** function _adc_init_CH0 *****************
  2101 ;; Defined at:
  2102 ;;		line 195 in file "util.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;		None
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;		None
  2107 ;; Return value:  Size  Location     Type
  2108 ;;		None               void
  2109 ;; Registers used:
  2110 ;;		wreg, status,2, status,0
  2111 ;; Tracked objects:
  2112 ;;		On entry : 0/0
  2113 ;;		On exit  : 0/0
  2114 ;;		Unchanged: 0/0
  2115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2116 ;;      Params:         0       0       0       0       0
  2117 ;;      Locals:         0       0       0       0       0
  2118 ;;      Temps:          0       0       0       0       0
  2119 ;;      Totals:         0       0       0       0       0
  2120 ;;Total ram usage:        0 bytes
  2121 ;; Hardware stack levels used:    1
  2122 ;; Hardware stack levels required when called:    2
  2123 ;; This function calls:
  2124 ;;		Nothing
  2125 ;; This function is called by:
  2126 ;;		_main
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           
  2131                           ;psect for function _adc_init_CH0
  2132  03DC                     _adc_init_CH0:	
  2133                           
  2134                           ;util.c: 196: ADCON0bits.ADCS = 0x00;
  2135                           
  2136                           ;incstack = 0
  2137                           ; Regs used in _adc_init_CH0: [wreg+status,2+status,0]
  2138  03DC  303F               	movlw	-193
  2139  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  2140  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  2141  03DF  059F               	andwf	31,f	;volatile
  2142                           
  2143                           ;util.c: 197: ADCON0bits.CHS = 0x00;
  2144  03E0  30C7               	movlw	-57
  2145  03E1  059F               	andwf	31,f	;volatile
  2146                           
  2147                           ;util.c: 199: ADCON1bits.ADFM = 1;
  2148  03E2  1683               	bsf	3,5	;RP0=1, select bank1
  2149  03E3  1303               	bcf	3,6	;RP1=0, select bank1
  2150  03E4  179F               	bsf	31,7	;volatile
  2151                           
  2152                           ;util.c: 200: ADCON1bits.PCFG = 0x00;
  2153  03E5  30F0               	movlw	-16
  2154  03E6  059F               	andwf	31,f	;volatile
  2155  03E7  0008               	return
  2156  03E8                     __end_of_adc_init_CH0:	
  2157                           
  2158                           	psect	text16
  2159  03C9                     __ptext16:	
  2160 ;; *************** function ___bmul *****************
  2161 ;; Defined at:
  2162 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/Umul8.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;  multiplier      1    wreg     unsigned char 
  2165 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2168 ;;  product         1    2[BANK0 ] unsigned char 
  2169 ;; Return value:  Size  Location     Type
  2170 ;;                  1    wreg      unsigned char 
  2171 ;; Registers used:
  2172 ;;		wreg, status,2, status,0
  2173 ;; Tracked objects:
  2174 ;;		On entry : 0/0
  2175 ;;		On exit  : 0/0
  2176 ;;		Unchanged: 0/0
  2177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2178 ;;      Params:         0       1       0       0       0
  2179 ;;      Locals:         0       2       0       0       0
  2180 ;;      Temps:          0       1       0       0       0
  2181 ;;      Totals:         0       4       0       0       0
  2182 ;;Total ram usage:        4 bytes
  2183 ;; Hardware stack levels used:    1
  2184 ;; Hardware stack levels required when called:    2
  2185 ;; This function calls:
  2186 ;;		Nothing
  2187 ;; This function is called by:
  2188 ;;		_main
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           
  2192                           
  2193                           ;psect for function ___bmul
  2194  03C9                     ___bmul:	
  2195                           
  2196                           ;incstack = 0
  2197                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2198                           ;___bmul@multiplier stored from wreg
  2199  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  2200  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  2201  03CB  00B5               	movwf	___bmul@multiplier
  2202  03CC  01B4               	clrf	___bmul@product
  2203  03CD                     l1162:	
  2204  03CD  1C35               	btfss	___bmul@multiplier,0
  2205  03CE  2BD3               	goto	l1166
  2206  03CF  0832               	movf	___bmul@multiplicand,w
  2207  03D0  00B3               	movwf	??___bmul
  2208  03D1  0833               	movf	??___bmul,w
  2209  03D2  07B4               	addwf	___bmul@product,f
  2210  03D3                     l1166:	
  2211  03D3  1003               	clrc
  2212  03D4  0DB2               	rlf	___bmul@multiplicand,f
  2213  03D5  1003               	clrc
  2214  03D6  0CB5               	rrf	___bmul@multiplier,f
  2215  03D7  0835               	movf	___bmul@multiplier,w
  2216  03D8  1D03               	btfss	3,2
  2217  03D9  2BCD               	goto	l1162
  2218  03DA  0834               	movf	___bmul@product,w
  2219  03DB  0008               	return
  2220  03DC                     __end_of___bmul:	
  2221                           
  2222                           	psect	text17
  2223  01DD                     __ptext17:	
  2224 ;; *************** function _ISR *****************
  2225 ;; Defined at:
  2226 ;;		line 43 in file "main.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;		None
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;		None
  2231 ;; Return value:  Size  Location     Type
  2232 ;;		None               void
  2233 ;; Registers used:
  2234 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2240 ;;      Params:         0       0       0       0       0
  2241 ;;      Locals:         0       0       0       0       0
  2242 ;;      Temps:          7       0       0       0       0
  2243 ;;      Totals:         7       0       0       0       0
  2244 ;;Total ram usage:        7 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    1
  2247 ;; This function calls:
  2248 ;;		___awmod
  2249 ;;		i1_timer1_stop
  2250 ;; This function is called by:
  2251 ;;		Interrupt level 1
  2252 ;; This function uses a non-reentrant model
  2253 ;;
  2254                           
  2255                           
  2256                           ;psect for function _ISR
  2257  01DD                     _ISR:	
  2258                           
  2259                           ;main.c: 44: static int adcResult = 0;
  2260                           ;main.c: 45: static int blinkCounter =0;
  2261                           ;main.c: 49: if(TMR0IF && TMR0IE){
  2262  01DD  1D0B               	btfss	11,2	;volatile
  2263  01DE  2A2D               	goto	i1l1238
  2264  01DF  1A8B               	btfsc	11,5	;volatile
  2265  01E0  2A03               	goto	i1l1230
  2266  01E1  2A2D               	goto	i1l1238
  2267  01E2                     i1l1220:	
  2268                           ;main.c: 52: {
  2269                           ;main.c: 53: case FILTER_BLINK_FAST:
  2270                           
  2271                           ;main.c: 51: switch(blinkState)
  2272                           
  2273                           
  2274                           ;main.c: 54: if((blinkCounter % 5) == 0)
  2275  01E2  3005               	movlw	5
  2276  01E3  29E5               	goto	L4
  2277  01E4                     i1l1224:	
  2278                           ;main.c: 60: case ALARM_BLINK_SLOW:
  2279                           
  2280                           ;main.c: 57: }
  2281                           ;main.c: 58: break;
  2282                           
  2283                           ;main.c: 55: {
  2284                           ;main.c: 56: PORTC ^= (1<<3);
  2285                           
  2286                           
  2287                           ;main.c: 61: if((blinkCounter % 15) == 0)
  2288  01E4  300F               	movlw	15
  2289  01E5                     L4:	
  2290  01E5  00F0               	movwf	___awmod@divisor
  2291  01E6  3000               	movlw	0
  2292  01E7  00F1               	movwf	___awmod@divisor+1
  2293  01E8  0823               	movf	ISR@blinkCounter+1,w
  2294  01E9  00F3               	movwf	___awmod@dividend+1
  2295  01EA  0822               	movf	ISR@blinkCounter,w
  2296  01EB  00F2               	movwf	___awmod@dividend
  2297  01EC  120A  118A  22A3  120A  118A  	fcall	___awmod
  2298  01F1  0870               	movf	?___awmod,w
  2299  01F2  0471               	iorwf	?___awmod+1,w
  2300  01F3  1D03               	btfss	3,2
  2301  01F4  2A11               	goto	i1l1232
  2302                           
  2303                           ;main.c: 62: {
  2304                           ;main.c: 63: PORTC ^= (1<<3);
  2305  01F5  3008               	movlw	8
  2306  01F6  00F7               	movwf	??_ISR
  2307  01F7  0877               	movf	??_ISR,w
  2308  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  2309  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  2310  01FA  0687               	xorwf	7,f	;volatile
  2311                           
  2312                           ;main.c: 64: }
  2313                           ;main.c: 65: break;
  2314  01FB  2A11               	goto	i1l1232
  2315  01FC                     i1l78:	
  2316                           ;main.c: 67: case ALARM_SOLID_ON:
  2317                           
  2318                           
  2319                           ;main.c: 68: PORTC |= (1<<3);
  2320  01FC  1587               	bsf	7,3	;volatile
  2321                           
  2322                           ;main.c: 69: break;
  2323  01FD  2A11               	goto	i1l1232
  2324  01FE                     i1l1228:	
  2325                           ;main.c: 72: default:
  2326                           
  2327                           ;main.c: 71: case LIGHTS_OFF:
  2328                           
  2329                           
  2330                           ;main.c: 73: PORTC &= ~((1<<3));
  2331  01FE  30F7               	movlw	247
  2332  01FF  00F7               	movwf	??_ISR
  2333  0200  0877               	movf	??_ISR,w
  2334  0201  0587               	andwf	7,f	;volatile
  2335                           
  2336                           ;main.c: 74: }
  2337  0202  2A11               	goto	i1l1232
  2338  0203                     i1l1230:	
  2339  0203  0831               	movf	_blinkState,w
  2340                           
  2341                           ; Switch size 1, requested type "space"
  2342                           ; Number of cases is 4, Range of values is 0 to 4
  2343                           ; switch strategies available:
  2344                           ; Name         Instructions Cycles
  2345                           ; simple_byte           13     7 (average)
  2346                           ; direct_byte           23     8 (fixed)
  2347                           ; jumptable            260     6 (fixed)
  2348                           ;	Chosen strategy is simple_byte
  2349  0204  3A00               	xorlw	0	; case 0
  2350  0205  1903               	skipnz
  2351  0206  29FE               	goto	i1l1228
  2352  0207  3A02               	xorlw	2	; case 2
  2353  0208  1903               	skipnz
  2354  0209  29E2               	goto	i1l1220
  2355  020A  3A01               	xorlw	1	; case 3
  2356  020B  1903               	skipnz
  2357  020C  29E4               	goto	i1l1224
  2358  020D  3A07               	xorlw	7	; case 4
  2359  020E  1903               	skipnz
  2360  020F  29FC               	goto	i1l78
  2361  0210  29FE               	goto	i1l1228
  2362  0211                     i1l1232:	
  2363                           
  2364                           ;main.c: 75: blinkCounter ++;
  2365  0211  3001               	movlw	1
  2366  0212  1283               	bcf	3,5	;RP0=0, select bank0
  2367  0213  1303               	bcf	3,6	;RP1=0, select bank0
  2368  0214  07A2               	addwf	ISR@blinkCounter,f
  2369  0215  1803               	skipnc
  2370  0216  0AA3               	incf	ISR@blinkCounter+1,f
  2371  0217  3000               	movlw	0
  2372  0218  07A3               	addwf	ISR@blinkCounter+1,f
  2373                           
  2374                           ;main.c: 76: blinkCounter %= 1000;
  2375  0219  30E8               	movlw	232
  2376  021A  00F0               	movwf	___awmod@divisor
  2377  021B  3003               	movlw	3
  2378  021C  00F1               	movwf	___awmod@divisor+1
  2379  021D  0823               	movf	ISR@blinkCounter+1,w
  2380  021E  00F3               	movwf	___awmod@dividend+1
  2381  021F  0822               	movf	ISR@blinkCounter,w
  2382  0220  00F2               	movwf	___awmod@dividend
  2383  0221  120A  118A  22A3  120A  118A  	fcall	___awmod
  2384  0226  0871               	movf	?___awmod+1,w
  2385  0227  1283               	bcf	3,5	;RP0=0, select bank0
  2386  0228  1303               	bcf	3,6	;RP1=0, select bank0
  2387  0229  00A3               	movwf	ISR@blinkCounter+1
  2388  022A  0870               	movf	?___awmod,w
  2389  022B  00A2               	movwf	ISR@blinkCounter
  2390                           
  2391                           ;main.c: 77: TMR0IF = 0;
  2392  022C  110B               	bcf	11,2	;volatile
  2393  022D                     i1l1238:	
  2394                           
  2395                           ;main.c: 78: }
  2396                           ;main.c: 81: if(TMR1IE && TMR1IF){
  2397  022D  1683               	bsf	3,5	;RP0=1, select bank1
  2398  022E  1303               	bcf	3,6	;RP1=0, select bank1
  2399  022F  1C0C               	btfss	12,0	;volatile
  2400  0230  2A53               	goto	i1l81
  2401  0231  1283               	bcf	3,5	;RP0=0, select bank0
  2402  0232  1303               	bcf	3,6	;RP1=0, select bank0
  2403  0233  180C               	btfsc	12,0	;volatile
  2404  0234  2A43               	goto	i1l1250
  2405  0235  2A53               	goto	i1l81
  2406  0236                     i1l1244:	
  2407                           ;main.c: 84: case ALARM_ON:
  2408                           
  2409                           ;main.c: 83: switch(theAlarm.ALARM_STATE){
  2410                           
  2411                           
  2412                           ;main.c: 85: theAlarm.current_value += 1;
  2413  0236  3001               	movlw	1
  2414  0237  2A39               	goto	L3
  2415  0238                     i1l1246:	
  2416                           ;main.c: 87: case ALARM_DOUBLE_TIME:
  2417                           
  2418                           ;main.c: 86: break;
  2419                           
  2420                           
  2421                           ;main.c: 88: theAlarm.current_value += 3;
  2422  0238  3003               	movlw	3
  2423  0239                     L3:	
  2424  0239  00F7               	movwf	??_ISR
  2425  023A  0877               	movf	??_ISR,w
  2426  023B  07AF               	addwf	_theAlarm+1,f	;volatile
  2427                           
  2428                           ;main.c: 89: break;
  2429  023C  2A50               	goto	i1l84
  2430  023D                     i1l1248:	
  2431                           ;main.c: 91: default:
  2432                           
  2433                           ;main.c: 90: case ALARM_FINAL_STATE:
  2434                           
  2435                           
  2436                           ;main.c: 92: timer1_stop();
  2437  023D  120A  118A  2431  120A  118A  	fcall	i1_timer1_stop
  2438                           
  2439                           ;main.c: 93: }
  2440  0242  2A50               	goto	i1l84
  2441  0243                     i1l1250:	
  2442  0243  1283               	bcf	3,5	;RP0=0, select bank0
  2443  0244  1303               	bcf	3,6	;RP1=0, select bank0
  2444  0245  082E               	movf	_theAlarm,w	;volatile
  2445                           
  2446                           ; Switch size 1, requested type "space"
  2447                           ; Number of cases is 3, Range of values is 1 to 3
  2448                           ; switch strategies available:
  2449                           ; Name         Instructions Cycles
  2450                           ; simple_byte           10     6 (average)
  2451                           ; direct_byte           20    11 (fixed)
  2452                           ; jumptable            263     9 (fixed)
  2453                           ;	Chosen strategy is simple_byte
  2454  0246  3A01               	xorlw	1	; case 1
  2455  0247  1903               	skipnz
  2456  0248  2A36               	goto	i1l1244
  2457  0249  3A03               	xorlw	3	; case 2
  2458  024A  1903               	skipnz
  2459  024B  2A38               	goto	i1l1246
  2460  024C  3A01               	xorlw	1	; case 3
  2461  024D  1903               	skipnz
  2462  024E  2A3D               	goto	i1l1248
  2463  024F  2A3D               	goto	i1l1248
  2464  0250                     i1l84:	
  2465                           
  2466                           ;main.c: 94: TMR1IF = 0;
  2467  0250  1283               	bcf	3,5	;RP0=0, select bank0
  2468  0251  1303               	bcf	3,6	;RP1=0, select bank0
  2469  0252  100C               	bcf	12,0	;volatile
  2470  0253                     i1l81:	
  2471                           
  2472                           ;main.c: 95: }
  2473                           ;main.c: 98: if(TMR2IF && TMR2IE){
  2474  0253  1283               	bcf	3,5	;RP0=0, select bank0
  2475  0254  1C8C               	btfss	12,1	;volatile
  2476  0255  2A77               	goto	i1l1268
  2477  0256  1683               	bsf	3,5	;RP0=1, select bank1
  2478  0257  1303               	bcf	3,6	;RP1=0, select bank1
  2479  0258  1C8C               	btfss	12,1	;volatile
  2480  0259  2A77               	goto	i1l1268
  2481                           
  2482                           ;main.c: 99: if(levelSensors[0].LEVEL_STATE == TRANSITION_TO_EMPTY || levelSensors[0].LE
      +                          VEL_STATE == TRANSITION_TO_FULL){
  2483  025A  1283               	bcf	3,5	;RP0=0, select bank0
  2484  025B  1303               	bcf	3,6	;RP1=0, select bank0
  2485  025C  0324               	decf	_levelSensors,w	;volatile
  2486  025D  1903               	btfsc	3,2
  2487  025E  2A63               	goto	i1l1258
  2488  025F  3003               	movlw	3
  2489  0260  0624               	xorwf	_levelSensors,w	;volatile
  2490  0261  1D03               	btfss	3,2
  2491  0262  2A69               	goto	i1l1260
  2492  0263                     i1l1258:	
  2493                           
  2494                           ;main.c: 100: levelSensors[0].counter++;
  2495  0263  3001               	movlw	1
  2496  0264  07A7               	addwf	_levelSensors+3,f	;volatile
  2497  0265  1803               	skipnc
  2498  0266  0AA8               	incf	_levelSensors+4,f	;volatile
  2499  0267  3000               	movlw	0
  2500  0268  07A8               	addwf	_levelSensors+4,f	;volatile
  2501  0269                     i1l1260:	
  2502                           
  2503                           ;main.c: 101: }
  2504                           ;main.c: 103: if(levelSensors[1].LEVEL_STATE == TRANSITION_TO_EMPTY || levelSensors[1].L
      +                          EVEL_STATE == TRANSITION_TO_FULL){
  2505  0269  0329               	decf	_levelSensors+5,w	;volatile
  2506  026A  1903               	btfsc	3,2
  2507  026B  2A70               	goto	i1l1264
  2508  026C  3003               	movlw	3
  2509  026D  0629               	xorwf	_levelSensors+5,w	;volatile
  2510  026E  1D03               	btfss	3,2
  2511  026F  2A76               	goto	i1l1266
  2512  0270                     i1l1264:	
  2513                           
  2514                           ;main.c: 104: levelSensors[1].counter++;
  2515  0270  3001               	movlw	1
  2516  0271  07AC               	addwf	_levelSensors+8,f	;volatile
  2517  0272  1803               	skipnc
  2518  0273  0AAD               	incf	_levelSensors+9,f	;volatile
  2519  0274  3000               	movlw	0
  2520  0275  07AD               	addwf	_levelSensors+9,f	;volatile
  2521  0276                     i1l1266:	
  2522                           
  2523                           ;main.c: 105: }
  2524                           ;main.c: 106: TMR2IF = 0;
  2525  0276  108C               	bcf	12,1	;volatile
  2526  0277                     i1l1268:	
  2527                           
  2528                           ;main.c: 107: }
  2529                           ;main.c: 110: if(ADIF && ADIE){
  2530  0277  1283               	bcf	3,5	;RP0=0, select bank0
  2531  0278  1F0C               	btfss	12,6	;volatile
  2532  0279  2A97               	goto	i1l96
  2533  027A  1683               	bsf	3,5	;RP0=1, select bank1
  2534  027B  1303               	bcf	3,6	;RP1=0, select bank1
  2535  027C  1F0C               	btfss	12,6	;volatile
  2536  027D  2A97               	goto	i1l96
  2537                           
  2538                           ;main.c: 111: adcResult = (ADRESH <<8) | (ADRESL);
  2539  027E  1283               	bcf	3,5	;RP0=0, select bank0
  2540  027F  1303               	bcf	3,6	;RP1=0, select bank0
  2541  0280  081E               	movf	30,w	;volatile
  2542  0281  00A1               	movwf	ISR@adcResult+1
  2543  0282  1683               	bsf	3,5	;RP0=1, select bank1
  2544  0283  1303               	bcf	3,6	;RP1=0, select bank1
  2545  0284  081E               	movf	30,w	;volatile
  2546  0285  1283               	bcf	3,5	;RP0=0, select bank0
  2547  0286  1303               	bcf	3,6	;RP1=0, select bank0
  2548  0287  00A0               	movwf	ISR@adcResult
  2549                           
  2550                           ;main.c: 112: theAlarm.trigger_value = adcResult >> 2;
  2551  0288  0821               	movf	ISR@adcResult+1,w
  2552  0289  00F8               	movwf	??_ISR+1
  2553  028A  0820               	movf	ISR@adcResult,w
  2554  028B  00F7               	movwf	??_ISR
  2555  028C  0D78               	rlf	??_ISR+1,w
  2556  028D  0CF8               	rrf	??_ISR+1,f
  2557  028E  0CF7               	rrf	??_ISR,f
  2558  028F  0D78               	rlf	??_ISR+1,w
  2559  0290  0CF8               	rrf	??_ISR+1,f
  2560  0291  0CF7               	rrf	??_ISR,f
  2561  0292  0877               	movf	??_ISR,w
  2562  0293  00F9               	movwf	??_ISR+2
  2563  0294  0879               	movf	??_ISR+2,w
  2564  0295  00B0               	movwf	_theAlarm+2	;volatile
  2565                           
  2566                           ;main.c: 113: ADIF = 0;
  2567  0296  130C               	bcf	12,6	;volatile
  2568  0297                     i1l96:	
  2569  0297  087D               	movf	??_ISR+6,w
  2570  0298  1283               	bcf	3,5	;RP0=0, select bank0
  2571  0299  00FF               	movwf	127
  2572  029A  087C               	movf	??_ISR+5,w
  2573  029B  008A               	movwf	10
  2574  029C  087B               	movf	??_ISR+4,w
  2575  029D  0084               	movwf	4
  2576  029E  0E7A               	swapf	(??_ISR+3)^(0+-128),w
  2577  029F  0083               	movwf	3
  2578  02A0  0EFE               	swapf	126,f
  2579  02A1  0E7E               	swapf	126,w
  2580  02A2  0009               	retfie
  2581  02A3                     __end_of_ISR:	
  2582                           
  2583                           	psect	intentry
  2584  0004                     __pintentry:	
  2585                           ;incstack = 0
  2586                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2587                           
  2588  0004                     interrupt_function:	
  2589  007E                     saved_w	set	btemp
  2590  0004  00FE               	movwf	btemp
  2591  0005  0E03               	swapf	3,w
  2592  0006  00FA               	movwf	??_ISR+3
  2593  0007  0804               	movf	4,w
  2594  0008  00FB               	movwf	??_ISR+4
  2595  0009  080A               	movf	10,w
  2596  000A  00FC               	movwf	??_ISR+5
  2597  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2598  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2599  000D  087F               	movf	btemp+1,w
  2600  000E  00FD               	movwf	??_ISR+6
  2601  000F  120A  118A  29DD   	ljmp	_ISR
  2602                           
  2603                           	psect	text18
  2604  0431                     __ptext18:	
  2605 ;; *************** function i1_timer1_stop *****************
  2606 ;; Defined at:
  2607 ;;		line 149 in file "util.c"
  2608 ;; Parameters:    Size  Location     Type
  2609 ;;		None
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;		None
  2612 ;; Return value:  Size  Location     Type
  2613 ;;		None               void
  2614 ;; Registers used:
  2615 ;;		None
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2621 ;;      Params:         0       0       0       0       0
  2622 ;;      Locals:         0       0       0       0       0
  2623 ;;      Temps:          0       0       0       0       0
  2624 ;;      Totals:         0       0       0       0       0
  2625 ;;Total ram usage:        0 bytes
  2626 ;; Hardware stack levels used:    1
  2627 ;; This function calls:
  2628 ;;		Nothing
  2629 ;; This function is called by:
  2630 ;;		_ISR
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           
  2635                           ;psect for function i1_timer1_stop
  2636  0431                     i1_timer1_stop:	
  2637                           
  2638                           ;util.c: 150: T1CONbits.TMR1ON = 0;
  2639                           
  2640                           ;incstack = 0
  2641                           ; Regs used in i1_timer1_stop: []
  2642  0431  1283               	bcf	3,5	;RP0=0, select bank0
  2643  0432  1303               	bcf	3,6	;RP1=0, select bank0
  2644  0433  1010               	bcf	16,0	;volatile
  2645                           
  2646                           ;util.c: 151: T1CONbits.T1OSCEN =0;
  2647  0434  1190               	bcf	16,3	;volatile
  2648                           
  2649                           ;util.c: 152: PIE1bits.TMR1IE = 0;
  2650  0435  1683               	bsf	3,5	;RP0=1, select bank1
  2651  0436  1303               	bcf	3,6	;RP1=0, select bank1
  2652  0437  100C               	bcf	12,0	;volatile
  2653  0438  0008               	return
  2654  0439                     __end_ofi1_timer1_stop:	
  2655                           
  2656                           	psect	text19
  2657  02A3                     __ptext19:	
  2658 ;; *************** function ___awmod *****************
  2659 ;; Defined at:
  2660 ;;		line 6 in file "/opt/microchip/xc8/v1.34/sources/common/awmod.c"
  2661 ;; Parameters:    Size  Location     Type
  2662 ;;  divisor         2    0[COMMON] int 
  2663 ;;  dividend        2    2[COMMON] int 
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;  sign            1    6[COMMON] unsigned char 
  2666 ;;  counter         1    5[COMMON] unsigned char 
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  2    0[COMMON] int 
  2669 ;; Registers used:
  2670 ;;		wreg, status,2, status,0
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2676 ;;      Params:         4       0       0       0       0
  2677 ;;      Locals:         2       0       0       0       0
  2678 ;;      Temps:          1       0       0       0       0
  2679 ;;      Totals:         7       0       0       0       0
  2680 ;;Total ram usage:        7 bytes
  2681 ;; Hardware stack levels used:    1
  2682 ;; This function calls:
  2683 ;;		Nothing
  2684 ;; This function is called by:
  2685 ;;		_ISR
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           
  2690                           ;psect for function ___awmod
  2691  02A3                     ___awmod:	
  2692                           
  2693                           ;incstack = 0
  2694                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2695  02A3  01F6               	clrf	___awmod@sign
  2696  02A4  1FF3               	btfss	___awmod@dividend+1,7
  2697  02A5  2AAD               	goto	i1l1182
  2698  02A6  09F2               	comf	___awmod@dividend,f
  2699  02A7  09F3               	comf	___awmod@dividend+1,f
  2700  02A8  0AF2               	incf	___awmod@dividend,f
  2701  02A9  1903               	skipnz
  2702  02AA  0AF3               	incf	___awmod@dividend+1,f
  2703  02AB  01F6               	clrf	___awmod@sign
  2704  02AC  0AF6               	incf	___awmod@sign,f
  2705  02AD                     i1l1182:	
  2706  02AD  1FF1               	btfss	___awmod@divisor+1,7
  2707  02AE  2AB4               	goto	i1l1186
  2708  02AF  09F0               	comf	___awmod@divisor,f
  2709  02B0  09F1               	comf	___awmod@divisor+1,f
  2710  02B1  0AF0               	incf	___awmod@divisor,f
  2711  02B2  1903               	skipnz
  2712  02B3  0AF1               	incf	___awmod@divisor+1,f
  2713  02B4                     i1l1186:	
  2714  02B4  0870               	movf	___awmod@divisor,w
  2715  02B5  0471               	iorwf	___awmod@divisor+1,w
  2716  02B6  1903               	btfsc	3,2
  2717  02B7  2AE1               	goto	i1l1204
  2718  02B8  01F5               	clrf	___awmod@counter
  2719  02B9  0AF5               	incf	___awmod@counter,f
  2720  02BA                     i1l1194:	
  2721  02BA  1BF1               	btfsc	___awmod@divisor+1,7
  2722  02BB  2AC8               	goto	i1l1196
  2723  02BC  3001               	movlw	1
  2724  02BD                     u75_25:	
  2725  02BD  1003               	clrc
  2726  02BE  0DF0               	rlf	___awmod@divisor,f
  2727  02BF  0DF1               	rlf	___awmod@divisor+1,f
  2728  02C0  3EFF               	addlw	-1
  2729  02C1  1D03               	skipz
  2730  02C2  2ABD               	goto	u75_25
  2731  02C3  3001               	movlw	1
  2732  02C4  00F4               	movwf	??___awmod
  2733  02C5  0874               	movf	??___awmod,w
  2734  02C6  07F5               	addwf	___awmod@counter,f
  2735  02C7  2ABA               	goto	i1l1194
  2736  02C8                     i1l1196:	
  2737  02C8  0871               	movf	___awmod@divisor+1,w
  2738  02C9  0273               	subwf	___awmod@dividend+1,w
  2739  02CA  1D03               	skipz
  2740  02CB  2ACE               	goto	u77_25
  2741  02CC  0870               	movf	___awmod@divisor,w
  2742  02CD  0272               	subwf	___awmod@dividend,w
  2743  02CE                     u77_25:	
  2744  02CE  1C03               	skipc
  2745  02CF  2AD6               	goto	i1l1200
  2746  02D0  0870               	movf	___awmod@divisor,w
  2747  02D1  02F2               	subwf	___awmod@dividend,f
  2748  02D2  0871               	movf	___awmod@divisor+1,w
  2749  02D3  1C03               	skipc
  2750  02D4  03F3               	decf	___awmod@dividend+1,f
  2751  02D5  02F3               	subwf	___awmod@dividend+1,f
  2752  02D6                     i1l1200:	
  2753  02D6  3001               	movlw	1
  2754  02D7                     u78_25:	
  2755  02D7  1003               	clrc
  2756  02D8  0CF1               	rrf	___awmod@divisor+1,f
  2757  02D9  0CF0               	rrf	___awmod@divisor,f
  2758  02DA  3EFF               	addlw	-1
  2759  02DB  1D03               	skipz
  2760  02DC  2AD7               	goto	u78_25
  2761  02DD  3001               	movlw	1
  2762  02DE  02F5               	subwf	___awmod@counter,f
  2763  02DF  1D03               	btfss	3,2
  2764  02E0  2AC8               	goto	i1l1196
  2765  02E1                     i1l1204:	
  2766  02E1  0876               	movf	___awmod@sign,w
  2767  02E2  1903               	btfsc	3,2
  2768  02E3  2AE9               	goto	i1l1208
  2769  02E4  09F2               	comf	___awmod@dividend,f
  2770  02E5  09F3               	comf	___awmod@dividend+1,f
  2771  02E6  0AF2               	incf	___awmod@dividend,f
  2772  02E7  1903               	skipnz
  2773  02E8  0AF3               	incf	___awmod@dividend+1,f
  2774  02E9                     i1l1208:	
  2775  02E9  0873               	movf	___awmod@dividend+1,w
  2776  02EA  00F1               	movwf	?___awmod+1
  2777  02EB  0872               	movf	___awmod@dividend,w
  2778  02EC  00F0               	movwf	?___awmod
  2779  02ED  0008               	return
  2780  02EE                     __end_of___awmod:	
  2781  007E                     btemp	set	126	;btemp
  2782  007E                     wtemp	set	126
  2783  007E                     wtemp0	set	126
  2784  0080                     wtemp1	set	128
  2785  0082                     wtemp2	set	130
  2786  0084                     wtemp3	set	132
  2787  0086                     wtemp4	set	134
  2788  0088                     wtemp5	set	136
  2789  007F                     wtemp6	set	127
  2790  007E                     ttemp	set	126
  2791  007E                     ttemp0	set	126
  2792  0081                     ttemp1	set	129
  2793  0084                     ttemp2	set	132
  2794  0087                     ttemp3	set	135
  2795  007F                     ttemp4	set	127
  2796  007E                     ltemp	set	126
  2797  007E                     ltemp0	set	126
  2798  0082                     ltemp1	set	130
  2799  0086                     ltemp2	set	134
  2800  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    4
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     14      32
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    turnAlarmOn@theAlarm	PTR volatile struct Alarm size(1) Largest target is 3
		 -> theAlarm(BANK0[3]), 

    checkAlarmState@theAlarm	PTR volatile struct Alarm size(1) Largest target is 3
		 -> theAlarm(BANK0[3]), 

    checkAlarmState@theSensor	PTR volatile struct levelSensor size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 

    blinkLed@almState	PTR enum E1005 size(1) Largest target is 3
		 -> theAlarm(BANK0[3]), 

    blinkLed@blinkState	PTR enum E1026 size(1) Largest target is 1
		 -> blinkState(BANK0[1]), 

    blinkLed@stateTwo	PTR enum E1033 size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 

    blinkLed@stateOne	PTR enum E1033 size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 

    init_sensor@theSensor_init	PTR volatile struct levelSensor size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 

    checkSensorState@theSensor	PTR volatile struct levelSensor size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 

    checkTankStatus@theSensor	PTR volatile struct levelSensor size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awmod

Critical Paths under _main in BANK0

    _main->_checkAlarmState
    _checkAlarmState->___bmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    1875
                                              8 BANK0      6     6      0
                             ___bmul
                       _adc_init_CH0
                           _blinkLed
                    _checkAlarmState
                   _checkSensorState
                    _checkTankStatus
                        _init_sensor
                        _timer0_init
                       _timer0_start
                        _timer1_init
                        _timer2_init
                       _timer2_start
 ---------------------------------------------------------------------------------
 (1) _timer2_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_sensor                                          2     2      0     142
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _checkTankStatus                                      2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _checkSensorState                                     6     6      0     533
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _checkAlarmState                                      4     3      1     349
                                              4 BANK0      4     3      1
                             ___bmul (ARG)
                        _timer1_stop
                        _turnAlarmOn
 ---------------------------------------------------------------------------------
 (2) _turnAlarmOn                                          2     2      0     159
                                              0 BANK0      2     2      0
                          _adc_start
                       _timer1_start
 ---------------------------------------------------------------------------------
 (3) _timer1_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _adc_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _timer1_stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _blinkLed                                             5     2      3     428
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _adc_init_CH0                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     170
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  7     7      0     614
                                              7 COMMON     7     7      0
                            ___awmod
                      i1_timer1_stop
 ---------------------------------------------------------------------------------
 (5) i1_timer1_stop                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              7     3      4     614
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___bmul
   _adc_init_CH0
   _blinkLed
   _checkAlarmState
     ___bmul (ARG)
     _timer1_stop (ARG)
     _turnAlarmOn (ARG)
       _adc_start
       _timer1_start
   _checkSensorState
   _checkTankStatus
   _init_sensor
   _timer0_init
   _timer0_start
   _timer1_init
   _timer2_init
   _timer2_start

 _ISR (ROOT)
   ___awmod
   i1_timer1_stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2E       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      E      20       5       40.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2E      12        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Jun 21 19:55:38 2015

                         pc 0002              ___bmul@product 0034                 __CFG_CP$OFF 0000  
     __end_ofi1_timer1_stop 0439                          fsr 0004                         l154 010A  
              __CFG_CPD$OFF 0000                         _ISR 01DD                         u605 00DA  
                       u555 006F                         u975 01D2                 __CFG_WRT$ON 0000  
                       fsr0 0004                         indf 0000                ___awmod@sign 0076  
              __CFG_FOSC$HS 0000                __CFG_LVP$OFF 0000                        ?_ISR 0070  
                      l1100 0081                        l1030 0336                        l1040 034F  
                      l1042 035D                        l1122 00EC                        l1114 00B4  
                      l1106 009A                        l1036 0348                        l1132 0381  
                      l1108 00A1                        l1126 00F3                        l1152 031A  
                      l1080 0024                        l1162 03CD                        l1154 0321  
                      l1146 0308                        l1314 016C                        l1306 015B  
                      l1148 030F                        l1092 0049                        l1084 0032  
                      l1076 03C4                        l1324 01AE                        l1166 03D3  
                      l1158 032E                        l1086 0039                        l1326 01C1  
                      _ADIE 0466                        _ADIF 0066     __end_of_checkTankStatus 03C9  
                      i1l81 0253                        i1l84 0250                        i1l78 01FC  
                      i1l96 0297       __size_of_adc_init_CH0 000C            ?_checkAlarmState 0036  
                      _main 010B                        btemp 007E               __CFG_BOREN$ON 0000  
                      ltemp 007E                        start 0012                        ttemp 007E  
                      wtemp 007E                 _turnAlarmOn 0332           ___bmul@multiplier 0035  
                     ??_ISR 0077            blinkLed@almState 0033                       ?_main 0070  
             __CFG_WDTE$OFF 0000             __end_of___awmod 02EE     checkAlarmState@theAlarm 0036  
                     _PORTB 0006                       _PORTC 0007                       _TRISA 0085  
                     _TRISB 0086                       _TRISC 0087                       u75_25 02BD  
                     u77_25 02CE                       u78_25 02D7                _adc_init_CH0 03DC  
              ?_init_sensor 0070                       main@i 003F                       pclath 000A  
                     ltemp0 007E                       ltemp1 0082                       ltemp2 0086  
                     ltemp3 0080                       ttemp0 007E                       ttemp1 0081  
                     ttemp2 0084                       ttemp3 0087                       ttemp4 007F  
                     status 0003                       wtemp0 007E                       wtemp1 0080  
                     wtemp2 0082                       wtemp3 0084                       wtemp4 0086  
                     wtemp5 0088                       wtemp6 007F            blinkLed@stateOne 0036  
          blinkLed@stateTwo 0032             __initialization 0015                __end_of_main 01DD  
  __end_of_checkSensorState 010B                      ??_main 003A                      _ADRESH 001E  
                    _ADRESL 009E                      i1l1200 02D6                      i1l1204 02E1  
                    i1l1220 01E2                      i1l1230 0203                      i1l1208 02E9  
                    i1l1224 01E4                      i1l1232 0211                      i1l1250 0243  
                    i1l1260 0269                      i1l1244 0236                      i1l1228 01FE  
                    i1l1182 02AD                      i1l1246 0238                      i1l1238 022D  
                    i1l1264 0270                      i1l1248 023D                      i1l1194 02BA  
                    i1l1186 02B4                      i1l1266 0276                      i1l1258 0263  
                    i1l1196 02C8                      i1l1268 0277            ?_checkTankStatus 0070  
                    _TMR0IE 005D                      _TMR0IF 005A                      _TMR1IE 0460  
                    _TMR1IF 0060                      _TMR2IE 0461                      _TMR2IF 0061  
  checkAlarmState@theSensor 0039            __end_of_blinkLed 0332              __CFG_PWRTE$OFF 0000  
                    ___bmul 03C9                   ??___awmod 0074                ?_timer0_init 0070  
              ?_timer1_init 0070                ?_timer2_init 0070                ?_timer1_stop 0070  
           ___awmod@divisor 0070             ___awmod@counter 0075                      saved_w 007E  
   __end_of__initialization 001C          __size_of_adc_start 000A         ___bmul@multiplicand 0032  
            __pcstackCOMMON 0070              _OPTION_REGbits 0081        __size_of_init_sensor 0018  
                __pbssBANK0 0020                ?_turnAlarmOn 0070                  __pmaintext 010B  
        blinkLed@blinkState 0034                     ?___bmul 0032                  _blinkState 0031  
                __pintentry 0004           __end_of_adc_start 0406                   ?_blinkLed 0032  
           ISR@blinkCounter 0022                  __stringtab 03E8      __size_ofi1_timer1_stop 0008  
  __size_of_checkAlarmState 002A             __size_of___bmul 0013                     ___awmod 02A3  
      __size_of_timer0_init 0009           ?_checkSensorState 0070        __size_of_timer1_init 0006  
                   __ptext1 0406                     __ptext2 040F                     __ptext3 0439  
                   __ptext4 043F                     __ptext5 0418                     __ptext6 039B  
                   __ptext7 03B3                     __ptext8 0020                     __ptext9 0371  
      __size_of_timer2_init 0009               ?_timer0_start 0070        __size_of_timer1_stop 0008  
             ?_timer1_start 0070               ?_timer2_start 0070           _FILTERTMR_TO_FULL 03F0  
              __size_of_ISR 00C6                   _T1CONbits 0010                   _T2CONbits 0012  
        ??_checkSensorState 0032            ___awmod@dividend 0072                  ??_blinkLed 0035  
                   clrloop0 0422        end_of_initialization 001C   __end_of_FILTERTMR_TO_FULL 03F2  
             i1_timer1_stop 0431              ??_timer0_start 0032              ??_timer1_start 0032  
            ??_timer2_start 0032                ISR@adcResult 0020    __size_of_checkTankStatus 0016  
      __size_of_turnAlarmOn 003F              __end_of___bmul 03DC              ?i1_timer1_stop 0070  
__end_of_FILTERTMR_TO_EMPTY 03F0         turnAlarmOn@theAlarm 0033           ??_checkAlarmState 0037  
       start_initialization 0015                 __end_of_ISR 02A3                    ??___bmul 0033  
  checkTankStatus@theSensor 0033               ?_adc_init_CH0 0070               ??_init_sensor 0032  
                 ___latbits 0002               __pcstackBANK0 0032                   _adc_start 03FC  
         __size_of_blinkLed 0044                _levelSensors 0024        __end_of_timer0_start 0443  
      __end_of_timer1_start 03FC        __end_of_timer2_start 040F             ??i1_timer1_stop 0070  
                  ?___awmod 0070                   __pstrings 03E8           ??_checkTankStatus 0032  
            ??_adc_init_CH0 0032                  ?_adc_start 0070         __end_of_init_sensor 03B3  
 __size_of_checkSensorState 00EB           interrupt_function 0004                   clear_ram0 0421  
                  _PIE1bits 008C               ??_timer0_init 0032               ??_timer1_init 0032  
             ??_timer2_init 0032               ??_timer1_stop 0032                  _ADCON0bits 001F  
               __stringbase 03ED                  _ADCON1bits 009F                   main@i_139 003D  
           _checkAlarmState 0371            __size_of___awmod 004B          __end_of__stringtab 03EE  
       __end_of_timer0_init 0421         __end_of_timer1_init 043F         __end_of_timer2_init 0418  
       __end_of_timer1_stop 0431                 _init_sensor 039B                    _blinkLed 02EE  
                  __ptext10 0332                    __ptext11 03F2                    __ptext12 03FC  
                  __ptext13 0429                    __ptext14 02EE                    __ptext15 03DC  
                  __ptext16 03C9                    __ptext17 01DD                    __ptext18 0431  
                  __ptext19 02A3       __size_of_timer0_start 0004                 ??_adc_start 0032  
     __size_of_timer1_start 000A       __size_of_timer2_start 0009          _FILTERTMR_TO_EMPTY 03EE  
             __size_of_main 00D2                    _theAlarm 002E        __end_of_adc_init_CH0 03E8  
             ??_turnAlarmOn 0032   checkSensorState@theSensor 0037                _timer0_start 043F  
              _timer1_start 03F2                _timer2_start 0406                  _INTCONbits 000B  
                  intlevel1 0000            _checkSensorState 0020     __end_of_checkAlarmState 039B  
 init_sensor@theSensor_init 0033             _checkTankStatus 03B3                   stringcode 03E8  
               _timer0_init 0418                 _timer1_init 0439                 _timer2_init 040F  
               _timer1_stop 0429         __end_of_turnAlarmOn 0371                    stringdir 03E8  
                  stringtab 03E8  
