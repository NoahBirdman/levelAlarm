

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Jun 21 19:54:41 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F876
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	dabs	1,0x7E,2
    32  0000                     	;# 
    33  0001                     	;# 
    34  0002                     	;# 
    35  0003                     	;# 
    36  0004                     	;# 
    37  0005                     	;# 
    38  0006                     	;# 
    39  0007                     	;# 
    40  000A                     	;# 
    41  000B                     	;# 
    42  000C                     	;# 
    43  000D                     	;# 
    44  000E                     	;# 
    45  000E                     	;# 
    46  000F                     	;# 
    47  0010                     	;# 
    48  0011                     	;# 
    49  0012                     	;# 
    50  0013                     	;# 
    51  0014                     	;# 
    52  0015                     	;# 
    53  0015                     	;# 
    54  0016                     	;# 
    55  0017                     	;# 
    56  0018                     	;# 
    57  0019                     	;# 
    58  001A                     	;# 
    59  001B                     	;# 
    60  001B                     	;# 
    61  001C                     	;# 
    62  001D                     	;# 
    63  001E                     	;# 
    64  001F                     	;# 
    65  0081                     	;# 
    66  0085                     	;# 
    67  0086                     	;# 
    68  0087                     	;# 
    69  008C                     	;# 
    70  008D                     	;# 
    71  008E                     	;# 
    72  0091                     	;# 
    73  0092                     	;# 
    74  0093                     	;# 
    75  0094                     	;# 
    76  0098                     	;# 
    77  0099                     	;# 
    78  009E                     	;# 
    79  009F                     	;# 
    80  010C                     	;# 
    81  010D                     	;# 
    82  010E                     	;# 
    83  010F                     	;# 
    84  018C                     	;# 
    85  018D                     	;# 
    86  0000                     	;# 
    87  0001                     	;# 
    88  0002                     	;# 
    89  0003                     	;# 
    90  0004                     	;# 
    91  0005                     	;# 
    92  0006                     	;# 
    93  0007                     	;# 
    94  000A                     	;# 
    95  000B                     	;# 
    96  000C                     	;# 
    97  000D                     	;# 
    98  000E                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0013                     	;# 
   105  0014                     	;# 
   106  0015                     	;# 
   107  0015                     	;# 
   108  0016                     	;# 
   109  0017                     	;# 
   110  0018                     	;# 
   111  0019                     	;# 
   112  001A                     	;# 
   113  001B                     	;# 
   114  001B                     	;# 
   115  001C                     	;# 
   116  001D                     	;# 
   117  001E                     	;# 
   118  001F                     	;# 
   119  0081                     	;# 
   120  0085                     	;# 
   121  0086                     	;# 
   122  0087                     	;# 
   123  008C                     	;# 
   124  008D                     	;# 
   125  008E                     	;# 
   126  0091                     	;# 
   127  0092                     	;# 
   128  0093                     	;# 
   129  0094                     	;# 
   130  0098                     	;# 
   131  0099                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  000A                     	;# 
   149  000B                     	;# 
   150  000C                     	;# 
   151  000D                     	;# 
   152  000E                     	;# 
   153  000E                     	;# 
   154  000F                     	;# 
   155  0010                     	;# 
   156  0011                     	;# 
   157  0012                     	;# 
   158  0013                     	;# 
   159  0014                     	;# 
   160  0015                     	;# 
   161  0015                     	;# 
   162  0016                     	;# 
   163  0017                     	;# 
   164  0018                     	;# 
   165  0019                     	;# 
   166  001A                     	;# 
   167  001B                     	;# 
   168  001B                     	;# 
   169  001C                     	;# 
   170  001D                     	;# 
   171  001E                     	;# 
   172  001F                     	;# 
   173  0081                     	;# 
   174  0085                     	;# 
   175  0086                     	;# 
   176  0087                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  0091                     	;# 
   181  0092                     	;# 
   182  0093                     	;# 
   183  0094                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009E                     	;# 
   187  009F                     	;# 
   188  010C                     	;# 
   189  010D                     	;# 
   190  010E                     	;# 
   191  010F                     	;# 
   192  018C                     	;# 
   193  018D                     	;# 
   194                           
   195                           	psect	strings
   196  0015                     __pstrings:	
   197  0015                     stringtab:	
   198  0015                     __stringtab:	
   199  0015                     stringcode:	
   200                           ;	String table - string pointers are 1 byte each
   201                           
   202  0015                     stringdir:	
   203  0015  3000               	movlw	high stringdir
   204  0016  008A               	movwf	10
   205  0017  0804               	movf	4,w
   206  0018  0A84               	incf	4,f
   207  0019  0782               	addwf	2,f
   208  001A                     __stringbase:	
   209  001A  3400               	retlw	0
   210  001B                     __end_of__stringtab:	
   211  001B                     _FILTERTMR_TO_EMPTY:	
   212  001B  3432               	retlw	50
   213  001C  3400               	retlw	0
   214  001D                     __end_of_FILTERTMR_TO_EMPTY:	
   215  001D                     _FILTERTMR_TO_FULL:	
   216  001D  3432               	retlw	50
   217  001E  3400               	retlw	0
   218  001F                     __end_of_FILTERTMR_TO_FULL:	
   219  001F                     _ADCON0bits	set	31
   220  001E                     _ADRESH	set	30
   221  000B                     _INTCONbits	set	11
   222  0006                     _PORTB	set	6
   223  0007                     _PORTC	set	7
   224  0010                     _T1CONbits	set	16
   225  0012                     _T2CONbits	set	18
   226  0066                     _ADIF	set	102
   227  005D                     _TMR0IE	set	93
   228  005A                     _TMR0IF	set	90
   229  0060                     _TMR1IF	set	96
   230  0061                     _TMR2IF	set	97
   231  009F                     _ADCON1bits	set	159
   232  009E                     _ADRESL	set	158
   233  0081                     _OPTION_REGbits	set	129
   234  008C                     _PIE1bits	set	140
   235  0085                     _TRISA	set	133
   236  0086                     _TRISB	set	134
   237  0087                     _TRISC	set	135
   238  0466                     _ADIE	set	1126
   239  0460                     _TMR1IE	set	1120
   240  0461                     _TMR2IE	set	1121
   241                           
   242                           ; #config settings
   243  0000                     
   244                           	psect	cinit
   245  07EA                     start_initialization:	
   246  07EA                     __initialization:	
   247                           
   248                           ; Clear objects allocated to COMMON
   249  07EA  01F8               	clrf	__pbssCOMMON& (0+127)
   250  07EB  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   251  07EC  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   252  07ED  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
   253  07EE  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
   254  07EF  01FD               	clrf	(__pbssCOMMON+5)& (0+127)
   255                           
   256                           ; Clear objects allocated to BANK0
   257  07F0  01B5               	clrf	__pbssBANK0& (0+127)
   258  07F1  01B6               	clrf	(__pbssBANK0+1)& (0+127)
   259  07F2  01B7               	clrf	(__pbssBANK0+2)& (0+127)
   260  07F3  01B8               	clrf	(__pbssBANK0+3)& (0+127)
   261  07F4  01B9               	clrf	(__pbssBANK0+4)& (0+127)
   262  07F5  01BA               	clrf	(__pbssBANK0+5)& (0+127)
   263  07F6  01BB               	clrf	(__pbssBANK0+6)& (0+127)
   264  07F7  01BC               	clrf	(__pbssBANK0+7)& (0+127)
   265  07F8  01BD               	clrf	(__pbssBANK0+8)& (0+127)
   266  07F9  01BE               	clrf	(__pbssBANK0+9)& (0+127)
   267  07FA  01BF               	clrf	(__pbssBANK0+10)& (0+127)
   268  07FB  01C0               	clrf	(__pbssBANK0+11)& (0+127)
   269  07FC                     end_of_initialization:	
   270                           ;End of C runtime variable initialization code
   271                           
   272  07FC                     __end_of__initialization:	
   273  07FC  0183               	clrf	3
   274  07FD  120A  118A  2E2D   	ljmp	_main	;jump to C main() function
   275                           
   276                           	psect	bssCOMMON
   277  0078                     __pbssCOMMON:	
   278  0078                     ISR@blinkCounter:	
   279  0078                     	ds	2
   280  007A                     _theAlarm:	
   281  007A                     	ds	3
   282  007D                     _blinkState:	
   283  007D                     	ds	1
   284                           
   285                           	psect	bssBANK0
   286  0035                     __pbssBANK0:	
   287  0035                     ISR@adcResult:	
   288  0035                     	ds	2
   289  0037                     _levelSensors:	
   290  0037                     	ds	10
   291                           
   292                           	psect	cstackCOMMON
   293  0071                     __pcstackCOMMON:	
   294  0071                     ?_timer1_stop:	
   295  0071                     ?_init_sensor:	
   296                           ; 0 bytes @ 0x0
   297                           
   298  0071                     ?_timer0_init:	
   299                           ; 0 bytes @ 0x0
   300                           
   301  0071                     ?_timer1_init:	
   302                           ; 0 bytes @ 0x0
   303                           
   304  0071                     ?_timer2_init:	
   305                           ; 0 bytes @ 0x0
   306                           
   307  0071                     ?_adc_init_CH0:	
   308                           ; 0 bytes @ 0x0
   309                           
   310  0071                     ?_timer0_start:	
   311                           ; 0 bytes @ 0x0
   312                           
   313  0071                     ?_timer2_start:	
   314                           ; 0 bytes @ 0x0
   315                           
   316  0071                     ?_checkTankStatus:	
   317                           ; 0 bytes @ 0x0
   318                           
   319  0071                     ?_checkSensorState:	
   320                           ; 0 bytes @ 0x0
   321                           
   322  0071                     ?_turnAlarmOn:	
   323                           ; 0 bytes @ 0x0
   324                           
   325  0071                     ?_ISR:	
   326                           ; 0 bytes @ 0x0
   327                           
   328  0071                     ?_timer1_start:	
   329                           ; 0 bytes @ 0x0
   330                           
   331  0071                     ?_adc_start:	
   332                           ; 0 bytes @ 0x0
   333                           
   334  0071                     ?i1_timer1_stop:	
   335                           ; 0 bytes @ 0x0
   336                           
   337  0071                     ??i1_timer1_stop:	
   338                           ; 0 bytes @ 0x0
   339                           
   340  0071                     ?_main:	
   341                           ; 0 bytes @ 0x0
   342                           
   343  0071                     ?___awmod:	
   344                           ; 2 bytes @ 0x0
   345                           
   346  0071                     ___awmod@divisor:	
   347                           ; 2 bytes @ 0x0
   348                           
   349                           
   350                           ; 2 bytes @ 0x0
   351  0071                     	ds	2
   352  0073                     ___awmod@dividend:	
   353                           
   354                           ; 2 bytes @ 0x2
   355  0073                     	ds	2
   356  0075                     ??___awmod:	
   357                           
   358                           ; 0 bytes @ 0x4
   359  0075                     	ds	1
   360  0076                     ___awmod@counter:	
   361                           
   362                           ; 1 bytes @ 0x5
   363  0076                     	ds	1
   364  0077                     ___awmod@sign:	
   365                           
   366                           ; 1 bytes @ 0x6
   367  0077                     	ds	1
   368                           
   369                           	psect	cstackBANK0
   370  0020                     __pcstackBANK0:	
   371  0020                     ??_ISR:	
   372                           
   373                           ; 0 bytes @ 0x0
   374  0020                     	ds	7
   375  0027                     ??_timer1_stop:	
   376  0027                     ??_init_sensor:	
   377                           ; 0 bytes @ 0x7
   378                           
   379  0027                     ??_timer0_init:	
   380                           ; 0 bytes @ 0x7
   381                           
   382  0027                     ??_timer1_init:	
   383                           ; 0 bytes @ 0x7
   384                           
   385  0027                     ??_timer2_init:	
   386                           ; 0 bytes @ 0x7
   387                           
   388  0027                     ??_adc_init_CH0:	
   389                           ; 0 bytes @ 0x7
   390                           
   391  0027                     ??_timer0_start:	
   392                           ; 0 bytes @ 0x7
   393                           
   394  0027                     ??_timer2_start:	
   395                           ; 0 bytes @ 0x7
   396                           
   397  0027                     ??_checkTankStatus:	
   398                           ; 0 bytes @ 0x7
   399                           
   400  0027                     ??_checkSensorState:	
   401                           ; 0 bytes @ 0x7
   402                           
   403  0027                     ?_blinkLed:	
   404                           ; 0 bytes @ 0x7
   405                           
   406  0027                     ??_turnAlarmOn:	
   407                           ; 0 bytes @ 0x7
   408                           
   409  0027                     ??_timer1_start:	
   410                           ; 0 bytes @ 0x7
   411                           
   412  0027                     ??_adc_start:	
   413                           ; 0 bytes @ 0x7
   414                           
   415  0027                     ?___bmul:	
   416                           ; 0 bytes @ 0x7
   417                           
   418  0027                     blinkLed@stateTwo:	
   419                           ; 1 bytes @ 0x7
   420                           
   421  0027                     ___bmul@multiplicand:	
   422                           ; 1 bytes @ 0x7
   423                           
   424                           
   425                           ; 1 bytes @ 0x7
   426  0027                     	ds	1
   427  0028                     ??___bmul:	
   428  0028                     checkTankStatus@theSensor:	
   429                           ; 0 bytes @ 0x8
   430                           
   431  0028                     init_sensor@theSensor_init:	
   432                           ; 1 bytes @ 0x8
   433                           
   434  0028                     blinkLed@almState:	
   435                           ; 1 bytes @ 0x8
   436                           
   437  0028                     turnAlarmOn@theAlarm:	
   438                           ; 1 bytes @ 0x8
   439                           
   440                           
   441                           ; 1 bytes @ 0x8
   442  0028                     	ds	1
   443  0029                     blinkLed@blinkState:	
   444  0029                     ___bmul@product:	
   445                           ; 1 bytes @ 0x9
   446                           
   447                           
   448                           ; 1 bytes @ 0x9
   449  0029                     	ds	1
   450  002A                     ??_blinkLed:	
   451  002A                     ___bmul@multiplier:	
   452                           ; 0 bytes @ 0xA
   453                           
   454                           
   455                           ; 1 bytes @ 0xA
   456  002A                     	ds	1
   457  002B                     ?_checkAlarmState:	
   458  002B                     blinkLed@stateOne:	
   459                           ; 0 bytes @ 0xB
   460                           
   461  002B                     checkAlarmState@theAlarm:	
   462                           ; 1 bytes @ 0xB
   463                           
   464                           
   465                           ; 1 bytes @ 0xB
   466  002B                     	ds	1
   467  002C                     ??_checkAlarmState:	
   468  002C                     checkSensorState@theSensor:	
   469                           ; 0 bytes @ 0xC
   470                           
   471                           
   472                           ; 1 bytes @ 0xC
   473  002C                     	ds	2
   474  002E                     checkAlarmState@theSensor:	
   475                           
   476                           ; 1 bytes @ 0xE
   477  002E                     	ds	1
   478  002F                     ??_main:	
   479                           
   480                           ; 0 bytes @ 0xF
   481  002F                     	ds	3
   482  0032                     main@i_139:	
   483                           
   484                           ; 2 bytes @ 0x12
   485  0032                     	ds	2
   486  0034                     main@i:	
   487                           
   488                           ; 1 bytes @ 0x14
   489  0034                     	ds	1
   490                           
   491                           	psect	maintext
   492  062D                     __pmaintext:	
   493 ;;
   494 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   495 ;;
   496 ;; *************** function _main *****************
   497 ;; Defined at:
   498 ;;		line 123 in file "main.c"
   499 ;; Parameters:    Size  Location     Type
   500 ;;		None
   501 ;; Auto vars:     Size  Location     Type
   502 ;;  i               2   18[BANK0 ] int 
   503 ;;  i               1   20[BANK0 ] unsigned char 
   504 ;; Return value:  Size  Location     Type
   505 ;;                  2   98[None  ] int 
   506 ;; Registers used:
   507 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   508 ;; Tracked objects:
   509 ;;		On entry : B00/0
   510 ;;		On exit  : 0/0
   511 ;;		Unchanged: 0/0
   512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   513 ;;      Params:         0       0       0       0       0
   514 ;;      Locals:         0       3       0       0       0
   515 ;;      Temps:          0       3       0       0       0
   516 ;;      Totals:         0       6       0       0       0
   517 ;;Total ram usage:        6 bytes
   518 ;; Hardware stack levels required when called:    5
   519 ;; This function calls:
   520 ;;		___bmul
   521 ;;		_adc_init_CH0
   522 ;;		_blinkLed
   523 ;;		_checkAlarmState
   524 ;;		_checkSensorState
   525 ;;		_checkTankStatus
   526 ;;		_init_sensor
   527 ;;		_timer0_init
   528 ;;		_timer0_start
   529 ;;		_timer1_init
   530 ;;		_timer2_init
   531 ;;		_timer2_start
   532 ;; This function is called by:
   533 ;;		Startup code after reset
   534 ;; This function uses a non-reentrant model
   535 ;;
   536                           
   537                           
   538                           ;psect for function _main
   539  062D                     _main:	
   540                           
   541                           ;main.c: 125: char i = 0x00;
   542                           
   543                           ;incstack = 0
   544                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   545  062D  1283               	bcf	3,5	;RP0=0, select bank0
   546  062E  1303               	bcf	3,6	;RP1=0, select bank0
   547  062F  01B4               	clrf	main@i
   548                           
   549                           ;main.c: 127: TRISA |= (1<<0);
   550  0630  1683               	bsf	3,5	;RP0=1, select bank1
   551  0631  1303               	bcf	3,6	;RP1=0, select bank1
   552  0632  1405               	bsf	5,0	;volatile
   553                           
   554                           ;main.c: 128: i = 0;
   555  0633  1283               	bcf	3,5	;RP0=0, select bank0
   556  0634  1303               	bcf	3,6	;RP1=0, select bank0
   557  0635  01B4               	clrf	main@i
   558                           
   559                           ;main.c: 129: TRISB |= (1<<4)|(1<<5);
   560  0636  3030               	movlw	48
   561  0637  00AF               	movwf	??_main
   562  0638  082F               	movf	??_main,w
   563  0639  1683               	bsf	3,5	;RP0=1, select bank1
   564  063A  1303               	bcf	3,6	;RP1=0, select bank1
   565  063B  0486               	iorwf	6,f	;volatile
   566                           
   567                           ;main.c: 130: TRISC &= ~((1<<2)|(1<<3));
   568  063C  30F3               	movlw	243
   569  063D  1283               	bcf	3,5	;RP0=0, select bank0
   570  063E  1303               	bcf	3,6	;RP1=0, select bank0
   571  063F  00AF               	movwf	??_main
   572  0640  082F               	movf	??_main,w
   573  0641  1683               	bsf	3,5	;RP0=1, select bank1
   574  0642  1303               	bcf	3,6	;RP1=0, select bank1
   575  0643  0587               	andwf	7,f	;volatile
   576                           
   577                           ;main.c: 131: TRISB &= ~((1<<3)|(1<<2));
   578  0644  30F3               	movlw	243
   579  0645  1283               	bcf	3,5	;RP0=0, select bank0
   580  0646  1303               	bcf	3,6	;RP1=0, select bank0
   581  0647  00AF               	movwf	??_main
   582  0648  082F               	movf	??_main,w
   583  0649  1683               	bsf	3,5	;RP0=1, select bank1
   584  064A  1303               	bcf	3,6	;RP1=0, select bank1
   585  064B  0586               	andwf	6,f	;volatile
   586                           
   587                           ;main.c: 134: init_sensor(&levelSensors[0]);
   588  064C  3037               	movlw	(low (_levelSensors| 0))& (0+255)
   589  064D  120A  118A  245F  120A  118A  	fcall	_init_sensor
   590                           
   591                           ;main.c: 135: init_sensor(&levelSensors[1]);
   592  0652  303C               	movlw	(low ((_levelSensors| 0+5)))& (0+255)
   593  0653  120A  118A  245F  120A  118A  	fcall	_init_sensor
   594                           
   595                           ;main.c: 139: timer0_init();
   596  0658  120A  118A  23FB  120A  118A  	fcall	_timer0_init
   597                           
   598                           ;main.c: 140: timer1_init();
   599  065D  120A  118A  23E5  120A  118A  	fcall	_timer1_init
   600                           
   601                           ;main.c: 141: timer2_init();
   602  0662  120A  118A  2404  120A  118A  	fcall	_timer2_init
   603                           
   604                           ;main.c: 142: adc_init_CH0();
   605  0667  120A  118A  242A  120A  118A  	fcall	_adc_init_CH0
   606                           
   607                           ;main.c: 144: PORTC |= (1<<2);
   608  066C  1283               	bcf	3,5	;RP0=0, select bank0
   609  066D  1303               	bcf	3,6	;RP1=0, select bank0
   610  066E  1507               	bsf	7,2	;volatile
   611                           
   612                           ;main.c: 145: PORTB &= ~((1<<2)|(1<<3));
   613  066F  30F3               	movlw	243
   614  0670  00AF               	movwf	??_main
   615  0671  082F               	movf	??_main,w
   616  0672  0586               	andwf	6,f	;volatile
   617                           
   618                           ;main.c: 147: timer0_start();
   619  0673  120A  118A  23E1  120A  118A  	fcall	_timer0_start
   620                           
   621                           ;main.c: 148: timer2_start();
   622  0678  120A  118A  240D  120A  118A  	fcall	_timer2_start
   623  067D                     l1306:	
   624                           ;main.c: 151: while(1)
   625                           
   626                           
   627                           ;main.c: 152: {
   628                           ;main.c: 153: levelSensors[0].sensorRead = (PORTB & (1<<4));
   629  067D  1283               	bcf	3,5	;RP0=0, select bank0
   630  067E  1303               	bcf	3,6	;RP1=0, select bank0
   631  067F  0806               	movf	6,w	;volatile
   632  0680  3910               	andlw	16
   633  0681  00AF               	movwf	??_main
   634  0682  082F               	movf	??_main,w
   635  0683  00B8               	movwf	_levelSensors+1	;volatile
   636                           
   637                           ;main.c: 154: levelSensors[1].sensorRead = (PORTB & (1<<5));
   638  0684  0806               	movf	6,w	;volatile
   639  0685  3920               	andlw	32
   640  0686  00AF               	movwf	??_main
   641  0687  082F               	movf	??_main,w
   642  0688  00BD               	movwf	_levelSensors+6	;volatile
   643                           
   644                           ;main.c: 156: for(i = 0; i < 2;i++)
   645  0689  01B4               	clrf	main@i
   646  068A  3002               	movlw	2
   647  068B  0234               	subwf	main@i,w
   648  068C  1803               	btfsc	3,0
   649  068D  2ED0               	goto	l1324
   650  068E                     l1314:	
   651                           
   652                           ;main.c: 157: {
   653                           ;main.c: 158: checkTankStatus(&levelSensors[i]);
   654  068E  3005               	movlw	5
   655  068F  00AF               	movwf	??_main
   656  0690  082F               	movf	??_main,w
   657  0691  00A7               	movwf	___bmul@multiplicand
   658  0692  0834               	movf	main@i,w
   659  0693  120A  118A  2436  120A  118A  	fcall	___bmul
   660  0698  3E37               	addlw	(low (_levelSensors| 0))& (0+255)
   661  0699  120A  118A  2449  120A  118A  	fcall	_checkTankStatus
   662                           
   663                           ;main.c: 160: checkSensorState(&levelSensors[i]);
   664  069E  3005               	movlw	5
   665  069F  1283               	bcf	3,5	;RP0=0, select bank0
   666  06A0  1303               	bcf	3,6	;RP1=0, select bank0
   667  06A1  00AF               	movwf	??_main
   668  06A2  082F               	movf	??_main,w
   669  06A3  00A7               	movwf	___bmul@multiplicand
   670  06A4  0834               	movf	main@i,w
   671  06A5  120A  118A  2436  120A  118A  	fcall	___bmul
   672  06AA  3E37               	addlw	(low (_levelSensors| 0))& (0+255)
   673  06AB  120A  118A  26FF  120A  118A  	fcall	_checkSensorState
   674                           
   675                           ;main.c: 162: checkAlarmState(&levelSensors[i], &theAlarm);
   676  06B0  307A               	movlw	(low (_theAlarm| 0))& (0+255)
   677  06B1  1283               	bcf	3,5	;RP0=0, select bank0
   678  06B2  1303               	bcf	3,6	;RP1=0, select bank0
   679  06B3  00AF               	movwf	??_main
   680  06B4  082F               	movf	??_main,w
   681  06B5  00AB               	movwf	checkAlarmState@theAlarm
   682  06B6  3005               	movlw	5
   683  06B7  00B0               	movwf	??_main+1
   684  06B8  0830               	movf	??_main+1,w
   685  06B9  00A7               	movwf	___bmul@multiplicand
   686  06BA  0834               	movf	main@i,w
   687  06BB  120A  118A  2436  120A  118A  	fcall	___bmul
   688  06C0  3E37               	addlw	(low (_levelSensors| 0))& (0+255)
   689  06C1  120A  118A  2477  120A  118A  	fcall	_checkAlarmState
   690  06C6  3001               	movlw	1
   691  06C7  1283               	bcf	3,5	;RP0=0, select bank0
   692  06C8  1303               	bcf	3,6	;RP1=0, select bank0
   693  06C9  00AF               	movwf	??_main
   694  06CA  082F               	movf	??_main,w
   695  06CB  07B4               	addwf	main@i,f
   696  06CC  3002               	movlw	2
   697  06CD  0234               	subwf	main@i,w
   698  06CE  1C03               	skipc
   699  06CF  2E8E               	goto	l1314
   700  06D0                     l1324:	
   701                           
   702                           ;main.c: 163: }
   703                           ;main.c: 175: blinkLed(&(levelSensors[0].LEVEL_STATE), &(levelSensors[1].LEVEL_STATE), &
      +                          (theAlarm.ALARM_STATE), &blinkState);
   704  06D0  303C               	movlw	(low ((_levelSensors| 0+5)))& (0+255)
   705  06D1  00AF               	movwf	??_main
   706  06D2  082F               	movf	??_main,w
   707  06D3  00A7               	movwf	blinkLed@stateTwo
   708  06D4  307A               	movlw	(low (_theAlarm| 0))& (0+255)
   709  06D5  00B0               	movwf	??_main+1
   710  06D6  0830               	movf	??_main+1,w
   711  06D7  00A8               	movwf	blinkLed@almState
   712  06D8  307D               	movlw	(low (_blinkState| 0))& (0+255)
   713  06D9  00B1               	movwf	??_main+2
   714  06DA  0831               	movf	??_main+2,w
   715  06DB  00A9               	movwf	blinkLed@blinkState
   716  06DC  3037               	movlw	(low (_levelSensors| 0))& (0+255)
   717  06DD  120A  118A  24DC  120A  118A  	fcall	_blinkLed
   718  06E2  2E7D               	goto	l1306
   719  06E3                     l1326:	
   720                           ;main.c: 177: }
   721                           ;main.c: 182: while(1)
   722                           
   723                           
   724                           ;main.c: 183: {
   725                           ;main.c: 184: PORTC^=(1<<2);
   726  06E3  3004               	movlw	4
   727  06E4  1283               	bcf	3,5	;RP0=0, select bank0
   728  06E5  1303               	bcf	3,6	;RP1=0, select bank0
   729  06E6  00AF               	movwf	??_main
   730  06E7  082F               	movf	??_main,w
   731  06E8  0687               	xorwf	7,f	;volatile
   732                           
   733                           ;main.c: 185: for(int i=0;i<10000;i++);
   734  06E9  01B2               	clrf	main@i_139
   735  06EA  01B3               	clrf	main@i_139+1
   736  06EB                     L1:	
   737  06EB  0833               	movf	main@i_139+1,w
   738  06EC  3A80               	xorlw	128
   739  06ED  00FF               	movwf	127
   740  06EE  30A7               	movlw	167
   741  06EF  027F               	subwf	127,w
   742  06F0  1D03               	skipz
   743  06F1  2EF4               	goto	u975
   744  06F2  3010               	movlw	16
   745  06F3  0232               	subwf	main@i_139,w
   746  06F4                     u975:	
   747  06F4  1803               	btfsc	3,0
   748  06F5  2EE3               	goto	l1326
   749  06F6  3001               	movlw	1
   750  06F7  1283               	bcf	3,5	;RP0=0, select bank0
   751  06F8  1303               	bcf	3,6	;RP1=0, select bank0
   752  06F9  07B2               	addwf	main@i_139,f
   753  06FA  1803               	skipnc
   754  06FB  0AB3               	incf	main@i_139+1,f
   755  06FC  3000               	movlw	0
   756  06FD  07B3               	addwf	main@i_139+1,f
   757  06FE  2EEB               	goto	L1
   758  06FF                     __end_of_main:	
   759                           ;main.c: 187: }
   760                           ;main.c: 188: return (0);
   761                           ;	Return value of _main is never used
   762                           
   763                           
   764                           	psect	text1
   765  040D                     __ptext1:	
   766 ;; *************** function _timer2_start *****************
   767 ;; Defined at:
   768 ;;		line 162 in file "util.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;		None
   771 ;; Auto vars:     Size  Location     Type
   772 ;;		None
   773 ;; Return value:  Size  Location     Type
   774 ;;		None               void
   775 ;; Registers used:
   776 ;;		None
   777 ;; Tracked objects:
   778 ;;		On entry : 0/0
   779 ;;		On exit  : 0/0
   780 ;;		Unchanged: 0/0
   781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   782 ;;      Params:         0       0       0       0       0
   783 ;;      Locals:         0       0       0       0       0
   784 ;;      Temps:          0       0       0       0       0
   785 ;;      Totals:         0       0       0       0       0
   786 ;;Total ram usage:        0 bytes
   787 ;; Hardware stack levels used:    1
   788 ;; Hardware stack levels required when called:    2
   789 ;; This function calls:
   790 ;;		Nothing
   791 ;; This function is called by:
   792 ;;		_main
   793 ;; This function uses a non-reentrant model
   794 ;;
   795                           
   796                           
   797                           ;psect for function _timer2_start
   798  040D                     _timer2_start:	
   799                           
   800                           ;util.c: 163: PIE1bits.TMR2IE = 1;
   801                           
   802                           ;incstack = 0
   803                           ; Regs used in _timer2_start: []
   804  040D  1683               	bsf	3,5	;RP0=1, select bank1
   805  040E  1303               	bcf	3,6	;RP1=0, select bank1
   806  040F  148C               	bsf	12,1	;volatile
   807                           
   808                           ;util.c: 164: T2CONbits.TMR2ON = 1;
   809  0410  1283               	bcf	3,5	;RP0=0, select bank0
   810  0411  1303               	bcf	3,6	;RP1=0, select bank0
   811  0412  1512               	bsf	18,2	;volatile
   812                           
   813                           ;util.c: 165: INTCONbits.GIE = 1;
   814  0413  178B               	bsf	11,7	;volatile
   815                           
   816                           ;util.c: 166: INTCONbits.PEIE = 1;
   817  0414  170B               	bsf	11,6	;volatile
   818  0415  0008               	return
   819  0416                     __end_of_timer2_start:	
   820                           
   821                           	psect	text2
   822  0404                     __ptext2:	
   823 ;; *************** function _timer2_init *****************
   824 ;; Defined at:
   825 ;;		line 157 in file "util.c"
   826 ;; Parameters:    Size  Location     Type
   827 ;;		None
   828 ;; Auto vars:     Size  Location     Type
   829 ;;		None
   830 ;; Return value:  Size  Location     Type
   831 ;;		None               void
   832 ;; Registers used:
   833 ;;		wreg, status,2, status,0
   834 ;; Tracked objects:
   835 ;;		On entry : 0/0
   836 ;;		On exit  : 0/0
   837 ;;		Unchanged: 0/0
   838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   839 ;;      Params:         0       0       0       0       0
   840 ;;      Locals:         0       0       0       0       0
   841 ;;      Temps:          0       0       0       0       0
   842 ;;      Totals:         0       0       0       0       0
   843 ;;Total ram usage:        0 bytes
   844 ;; Hardware stack levels used:    1
   845 ;; Hardware stack levels required when called:    2
   846 ;; This function calls:
   847 ;;		Nothing
   848 ;; This function is called by:
   849 ;;		_main
   850 ;; This function uses a non-reentrant model
   851 ;;
   852                           
   853                           
   854                           ;psect for function _timer2_init
   855  0404                     _timer2_init:	
   856                           
   857                           ;util.c: 158: T2CONbits.T2CKPS = 0x02;
   858                           
   859                           ;incstack = 0
   860                           ; Regs used in _timer2_init: [wreg+status,2+status,0]
   861  0404  1283               	bcf	3,5	;RP0=0, select bank0
   862  0405  1303               	bcf	3,6	;RP1=0, select bank0
   863  0406  0812               	movf	18,w	;volatile
   864  0407  39FC               	andlw	-4
   865  0408  3802               	iorlw	2
   866  0409  0092               	movwf	18	;volatile
   867                           
   868                           ;util.c: 159: T2CONbits.TOUTPS = 0x0F;
   869  040A  3078               	movlw	120
   870  040B  0492               	iorwf	18,f	;volatile
   871  040C  0008               	return
   872  040D                     __end_of_timer2_init:	
   873                           
   874                           	psect	text3
   875  03E5                     __ptext3:	
   876 ;; *************** function _timer1_init *****************
   877 ;; Defined at:
   878 ;;		line 128 in file "util.c"
   879 ;; Parameters:    Size  Location     Type
   880 ;;		None
   881 ;; Auto vars:     Size  Location     Type
   882 ;;		None
   883 ;; Return value:  Size  Location     Type
   884 ;;		None               void
   885 ;; Registers used:
   886 ;;		wreg, status,2, status,0
   887 ;; Tracked objects:
   888 ;;		On entry : 0/0
   889 ;;		On exit  : 0/0
   890 ;;		Unchanged: 0/0
   891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   892 ;;      Params:         0       0       0       0       0
   893 ;;      Locals:         0       0       0       0       0
   894 ;;      Temps:          0       0       0       0       0
   895 ;;      Totals:         0       0       0       0       0
   896 ;;Total ram usage:        0 bytes
   897 ;; Hardware stack levels used:    1
   898 ;; Hardware stack levels required when called:    2
   899 ;; This function calls:
   900 ;;		Nothing
   901 ;; This function is called by:
   902 ;;		_main
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906                           
   907                           ;psect for function _timer1_init
   908  03E5                     _timer1_init:	
   909                           
   910                           ;util.c: 134: T1CONbits.T1CKPS = 0x03;
   911                           
   912                           ;incstack = 0
   913                           ; Regs used in _timer1_init: [wreg+status,2+status,0]
   914  03E5  3030               	movlw	48
   915  03E6  1283               	bcf	3,5	;RP0=0, select bank0
   916  03E7  1303               	bcf	3,6	;RP1=0, select bank0
   917  03E8  0490               	iorwf	16,f	;volatile
   918                           
   919                           ;util.c: 135: T1CONbits.TMR1CS = 0;
   920  03E9  1090               	bcf	16,1	;volatile
   921  03EA  0008               	return
   922  03EB                     __end_of_timer1_init:	
   923                           
   924                           	psect	text4
   925  03E1                     __ptext4:	
   926 ;; *************** function _timer0_start *****************
   927 ;; Defined at:
   928 ;;		line 182 in file "util.c"
   929 ;; Parameters:    Size  Location     Type
   930 ;;		None
   931 ;; Auto vars:     Size  Location     Type
   932 ;;		None
   933 ;; Return value:  Size  Location     Type
   934 ;;		None               void
   935 ;; Registers used:
   936 ;;		None
   937 ;; Tracked objects:
   938 ;;		On entry : 0/0
   939 ;;		On exit  : 0/0
   940 ;;		Unchanged: 0/0
   941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   942 ;;      Params:         0       0       0       0       0
   943 ;;      Locals:         0       0       0       0       0
   944 ;;      Temps:          0       0       0       0       0
   945 ;;      Totals:         0       0       0       0       0
   946 ;;Total ram usage:        0 bytes
   947 ;; Hardware stack levels used:    1
   948 ;; Hardware stack levels required when called:    2
   949 ;; This function calls:
   950 ;;		Nothing
   951 ;; This function is called by:
   952 ;;		_main
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956                           
   957                           ;psect for function _timer0_start
   958  03E1                     _timer0_start:	
   959                           
   960                           ;util.c: 183: INTCONbits.TMR0IE = 1;
   961                           
   962                           ;incstack = 0
   963                           ; Regs used in _timer0_start: []
   964  03E1  168B               	bsf	11,5	;volatile
   965                           
   966                           ;util.c: 184: INTCONbits.GIE = 1;
   967  03E2  178B               	bsf	11,7	;volatile
   968                           
   969                           ;util.c: 185: INTCONbits.PEIE = 1;
   970  03E3  170B               	bsf	11,6	;volatile
   971  03E4  0008               	return
   972  03E5                     __end_of_timer0_start:	
   973                           
   974                           	psect	text5
   975  03FB                     __ptext5:	
   976 ;; *************** function _timer0_init *****************
   977 ;; Defined at:
   978 ;;		line 175 in file "util.c"
   979 ;; Parameters:    Size  Location     Type
   980 ;;		None
   981 ;; Auto vars:     Size  Location     Type
   982 ;;		None
   983 ;; Return value:  Size  Location     Type
   984 ;;		None               void
   985 ;; Registers used:
   986 ;;		wreg, status,2, status,0
   987 ;; Tracked objects:
   988 ;;		On entry : 0/0
   989 ;;		On exit  : 0/0
   990 ;;		Unchanged: 0/0
   991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   992 ;;      Params:         0       0       0       0       0
   993 ;;      Locals:         0       0       0       0       0
   994 ;;      Temps:          0       0       0       0       0
   995 ;;      Totals:         0       0       0       0       0
   996 ;;Total ram usage:        0 bytes
   997 ;; Hardware stack levels used:    1
   998 ;; Hardware stack levels required when called:    2
   999 ;; This function calls:
  1000 ;;		Nothing
  1001 ;; This function is called by:
  1002 ;;		_main
  1003 ;; This function uses a non-reentrant model
  1004 ;;
  1005                           
  1006                           
  1007                           ;psect for function _timer0_init
  1008  03FB                     _timer0_init:	
  1009                           
  1010                           ;util.c: 176: OPTION_REGbits.T0CS = 0;
  1011                           
  1012                           ;incstack = 0
  1013                           ; Regs used in _timer0_init: [wreg+status,2+status,0]
  1014  03FB  1683               	bsf	3,5	;RP0=1, select bank1
  1015  03FC  1303               	bcf	3,6	;RP1=0, select bank1
  1016  03FD  1281               	bcf	1,5	;volatile
  1017                           
  1018                           ;util.c: 177: OPTION_REGbits.PSA = 0;
  1019  03FE  1181               	bcf	1,3	;volatile
  1020                           
  1021                           ;util.c: 178: OPTION_REGbits.PS = 0x04;
  1022  03FF  0801               	movf	1,w	;volatile
  1023  0400  39F8               	andlw	-8
  1024  0401  3804               	iorlw	4
  1025  0402  0081               	movwf	1	;volatile
  1026  0403  0008               	return
  1027  0404                     __end_of_timer0_init:	
  1028                           
  1029                           	psect	text6
  1030  045F                     __ptext6:	
  1031 ;; *************** function _init_sensor *****************
  1032 ;; Defined at:
  1033 ;;		line 95 in file "util.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;  theSensor_in    1    wreg     PTR volatile struct leve
  1036 ;;		 -> levelSensors(10), 
  1037 ;; Auto vars:     Size  Location     Type
  1038 ;;  theSensor_in    1    8[BANK0 ] PTR volatile struct leve
  1039 ;;		 -> levelSensors(10), 
  1040 ;; Return value:  Size  Location     Type
  1041 ;;		None               void
  1042 ;; Registers used:
  1043 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1044 ;; Tracked objects:
  1045 ;;		On entry : 0/0
  1046 ;;		On exit  : 0/0
  1047 ;;		Unchanged: 0/0
  1048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1049 ;;      Params:         0       0       0       0       0
  1050 ;;      Locals:         0       1       0       0       0
  1051 ;;      Temps:          0       1       0       0       0
  1052 ;;      Totals:         0       2       0       0       0
  1053 ;;Total ram usage:        2 bytes
  1054 ;; Hardware stack levels used:    1
  1055 ;; Hardware stack levels required when called:    2
  1056 ;; This function calls:
  1057 ;;		Nothing
  1058 ;; This function is called by:
  1059 ;;		_main
  1060 ;; This function uses a non-reentrant model
  1061 ;;
  1062                           
  1063                           
  1064                           ;psect for function _init_sensor
  1065  045F                     _init_sensor:	
  1066                           
  1067                           ;incstack = 0
  1068                           ; Regs used in _init_sensor: [wreg-fsr0h+status,2+status,0]
  1069                           ;init_sensor@theSensor_init stored from wreg
  1070  045F  1283               	bcf	3,5	;RP0=0, select bank0
  1071  0460  1303               	bcf	3,6	;RP1=0, select bank0
  1072  0461  00A8               	movwf	init_sensor@theSensor_init
  1073                           
  1074                           ;util.c: 97: theSensor_init->counter = 0;
  1075  0462  0828               	movf	init_sensor@theSensor_init,w
  1076  0463  3E03               	addlw	3
  1077  0464  0084               	movwf	4
  1078  0465  1383               	bcf	3,7	;select IRP bank0
  1079  0466  0180               	clrf	0
  1080  0467  0A84               	incf	4,f
  1081  0468  0180               	clrf	0
  1082                           
  1083                           ;util.c: 98: theSensor_init->LEVEL_STATE = INITIAL_STATE;
  1084  0469  0828               	movf	init_sensor@theSensor_init,w
  1085  046A  0084               	movwf	4
  1086  046B  0180               	clrf	0
  1087                           
  1088                           ;util.c: 99: theSensor_init->sensorRead = 0;
  1089  046C  0A28               	incf	init_sensor@theSensor_init,w
  1090  046D  0084               	movwf	4
  1091  046E  0180               	clrf	0
  1092                           
  1093                           ;util.c: 100: theSensor_init->TANK_STATE = TANK_IS_EMPTY;
  1094  046F  3001               	movlw	1
  1095  0470  00A7               	movwf	??_init_sensor
  1096  0471  0828               	movf	init_sensor@theSensor_init,w
  1097  0472  3E02               	addlw	2
  1098  0473  0084               	movwf	4
  1099  0474  0827               	movf	??_init_sensor,w
  1100  0475  0080               	movwf	0
  1101  0476  0008               	return
  1102  0477                     __end_of_init_sensor:	
  1103                           
  1104                           	psect	text7
  1105  0449                     __ptext7:	
  1106 ;; *************** function _checkTankStatus *****************
  1107 ;; Defined at:
  1108 ;;		line 4 in file "util.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;  theSensor       1    wreg     PTR volatile struct leve
  1111 ;;		 -> levelSensors(10), 
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;  theSensor       1    8[BANK0 ] PTR volatile struct leve
  1114 ;;		 -> levelSensors(10), 
  1115 ;; Return value:  Size  Location     Type
  1116 ;;		None               void
  1117 ;; Registers used:
  1118 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1124 ;;      Params:         0       0       0       0       0
  1125 ;;      Locals:         0       1       0       0       0
  1126 ;;      Temps:          0       1       0       0       0
  1127 ;;      Totals:         0       2       0       0       0
  1128 ;;Total ram usage:        2 bytes
  1129 ;; Hardware stack levels used:    1
  1130 ;; Hardware stack levels required when called:    2
  1131 ;; This function calls:
  1132 ;;		Nothing
  1133 ;; This function is called by:
  1134 ;;		_main
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138                           
  1139                           ;psect for function _checkTankStatus
  1140  0449                     _checkTankStatus:	
  1141                           
  1142                           ;incstack = 0
  1143                           ; Regs used in _checkTankStatus: [wreg-fsr0h+status,2+status,0]
  1144                           ;checkTankStatus@theSensor stored from wreg
  1145  0449  1283               	bcf	3,5	;RP0=0, select bank0
  1146  044A  1303               	bcf	3,6	;RP1=0, select bank0
  1147  044B  00A8               	movwf	checkTankStatus@theSensor
  1148                           
  1149                           ;util.c: 8: if (theSensor->sensorRead > 0)
  1150  044C  0A28               	incf	checkTankStatus@theSensor,w
  1151  044D  0084               	movwf	4
  1152  044E  1383               	bcf	3,7	;select IRP bank0
  1153  044F  0800               	movf	0,w
  1154  0450  1903               	btfsc	3,2
  1155  0451  2C5A               	goto	l1076
  1156                           
  1157                           ;util.c: 9: {
  1158                           ;util.c: 10: theSensor->TANK_STATE = TANK_IS_EMPTY;
  1159  0452  3001               	movlw	1
  1160  0453  00A7               	movwf	??_checkTankStatus
  1161  0454  0828               	movf	checkTankStatus@theSensor,w
  1162  0455  3E02               	addlw	2
  1163  0456  0084               	movwf	4
  1164  0457  0827               	movf	??_checkTankStatus,w
  1165  0458  0080               	movwf	0
  1166                           
  1167                           ;util.c: 12: }else
  1168  0459  0008               	return
  1169  045A                     l1076:	
  1170                           
  1171                           ;util.c: 13: {
  1172                           ;util.c: 14: theSensor->TANK_STATE = TANK_IS_FULL;
  1173  045A  0828               	movf	checkTankStatus@theSensor,w
  1174  045B  3E02               	addlw	2
  1175  045C  0084               	movwf	4
  1176  045D  0180               	clrf	0
  1177  045E  0008               	return
  1178  045F                     __end_of_checkTankStatus:	
  1179                           
  1180                           	psect	text8
  1181  06FF                     __ptext8:	
  1182 ;; *************** function _checkSensorState *****************
  1183 ;; Defined at:
  1184 ;;		line 20 in file "util.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;  theSensor       1    wreg     PTR volatile struct leve
  1187 ;;		 -> levelSensors(10), 
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;  theSensor       1   12[BANK0 ] PTR volatile struct leve
  1190 ;;		 -> levelSensors(10), 
  1191 ;; Return value:  Size  Location     Type
  1192 ;;		None               void
  1193 ;; Registers used:
  1194 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1195 ;; Tracked objects:
  1196 ;;		On entry : 0/0
  1197 ;;		On exit  : 0/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1200 ;;      Params:         0       0       0       0       0
  1201 ;;      Locals:         0       1       0       0       0
  1202 ;;      Temps:          0       5       0       0       0
  1203 ;;      Totals:         0       6       0       0       0
  1204 ;;Total ram usage:        6 bytes
  1205 ;; Hardware stack levels used:    1
  1206 ;; Hardware stack levels required when called:    2
  1207 ;; This function calls:
  1208 ;;		Nothing
  1209 ;; This function is called by:
  1210 ;;		_main
  1211 ;; This function uses a non-reentrant model
  1212 ;;
  1213                           
  1214                           
  1215                           ;psect for function _checkSensorState
  1216  06FF                     _checkSensorState:	
  1217                           
  1218                           ;incstack = 0
  1219                           ; Regs used in _checkSensorState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1220                           ;checkSensorState@theSensor stored from wreg
  1221  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  1222  0700  1303               	bcf	3,6	;RP1=0, select bank0
  1223  0701  00AC               	movwf	checkSensorState@theSensor
  1224                           
  1225                           ;util.c: 22: switch(theSensor->LEVEL_STATE){
  1226  0702  2FD2               	goto	l1126
  1227  0703                     l1080:	
  1228                           ;util.c: 23: case INITIAL_STATE :
  1229                           
  1230                           
  1231                           ;util.c: 26: if(theSensor->TANK_STATE == TANK_IS_EMPTY)
  1232  0703  082C               	movf	checkSensorState@theSensor,w
  1233  0704  3E02               	addlw	2
  1234  0705  0084               	movwf	4
  1235  0706  1383               	bcf	3,7	;select IRP bank0
  1236  0707  0300               	decf	0,w
  1237  0708  1D03               	btfss	3,2
  1238  0709  2F11               	goto	l1084
  1239                           
  1240                           ;util.c: 27: {
  1241                           ;util.c: 28: theSensor->LEVEL_STATE = TRANSITION_TO_EMPTY;
  1242  070A  3001               	movlw	1
  1243  070B  00A7               	movwf	??_checkSensorState
  1244  070C  082C               	movf	checkSensorState@theSensor,w
  1245  070D  0084               	movwf	4
  1246  070E  0827               	movf	??_checkSensorState,w
  1247  070F  0080               	movwf	0
  1248                           
  1249                           ;util.c: 29: }else
  1250  0710  0008               	return
  1251  0711                     l1084:	
  1252                           
  1253                           ;util.c: 30: {
  1254                           ;util.c: 31: theSensor->counter = 0;
  1255  0711  082C               	movf	checkSensorState@theSensor,w
  1256  0712  3E03               	addlw	3
  1257  0713  0084               	movwf	4
  1258  0714  0180               	clrf	0
  1259  0715  0A84               	incf	4,f
  1260  0716  0180               	clrf	0
  1261                           
  1262                           ;util.c: 32: }
  1263                           ;util.c: 33: break;
  1264  0717  0008               	return
  1265  0718                     l1086:	
  1266                           ;util.c: 35: case TRANSITION_TO_EMPTY :
  1267                           
  1268                           
  1269                           ;util.c: 39: if(theSensor->TANK_STATE == TANK_IS_FULL)
  1270  0718  082C               	movf	checkSensorState@theSensor,w
  1271  0719  3E02               	addlw	2
  1272  071A  0084               	movwf	4
  1273  071B  0800               	movf	0,w
  1274  071C  1D03               	btfss	3,2
  1275  071D  2F28               	goto	l1092
  1276                           
  1277                           ;util.c: 40: {
  1278                           ;util.c: 41: theSensor->counter = 0;
  1279  071E  082C               	movf	checkSensorState@theSensor,w
  1280  071F  3E03               	addlw	3
  1281  0720  0084               	movwf	4
  1282  0721  0180               	clrf	0
  1283  0722  0A84               	incf	4,f
  1284  0723  0180               	clrf	0
  1285                           
  1286                           ;util.c: 42: theSensor->LEVEL_STATE = INITIAL_STATE;
  1287  0724  082C               	movf	checkSensorState@theSensor,w
  1288  0725  0084               	movwf	4
  1289  0726  0180               	clrf	0
  1290                           
  1291                           ;util.c: 44: }else if(theSensor->TANK_STATE == TANK_IS_EMPTY && theSensor->counter >= FI
      +                          LTERTMR_TO_EMPTY)
  1292  0727  0008               	return
  1293  0728                     l1092:	
  1294  0728  082C               	movf	checkSensorState@theSensor,w
  1295  0729  3E02               	addlw	2
  1296  072A  0084               	movwf	4
  1297  072B  0300               	decf	0,w
  1298  072C  1D03               	btfss	3,2
  1299  072D  0008               	return
  1300  072E  3001               	movlw	low (_FILTERTMR_TO_EMPTY-__stringbase)
  1301  072F  0084               	movwf	4
  1302  0730  120A  118A  2015  120A  118A  	fcall	stringdir
  1303  0735  00A7               	movwf	??_checkSensorState
  1304  0736  120A  118A  2015  120A  118A  	fcall	stringdir
  1305  073B  00A8               	movwf	??_checkSensorState+1
  1306  073C  082C               	movf	checkSensorState@theSensor,w
  1307  073D  3E03               	addlw	3
  1308  073E  0084               	movwf	4
  1309  073F  0800               	movf	0,w
  1310  0740  00A9               	movwf	??_checkSensorState+2
  1311  0741  0A84               	incf	4,f
  1312  0742  0800               	movf	0,w
  1313  0743  00AA               	movwf	??_checkSensorState+3
  1314  0744  082A               	movf	??_checkSensorState+3,w
  1315  0745  3A80               	xorlw	128
  1316  0746  00AB               	movwf	??_checkSensorState+4
  1317  0747  0828               	movf	??_checkSensorState+1,w
  1318  0748  3A80               	xorlw	128
  1319  0749  022B               	subwf	??_checkSensorState+4,w
  1320  074A  1D03               	skipz
  1321  074B  2F4E               	goto	u555
  1322  074C  0827               	movf	??_checkSensorState,w
  1323  074D  0229               	subwf	??_checkSensorState+2,w
  1324  074E                     u555:	
  1325  074E  1C03               	skipc
  1326  074F  0008               	return
  1327                           
  1328                           ;util.c: 45: {
  1329                           ;util.c: 46: theSensor->counter = 0;
  1330  0750  1283               	bcf	3,5	;RP0=0, select bank0
  1331  0751  1303               	bcf	3,6	;RP1=0, select bank0
  1332  0752  082C               	movf	checkSensorState@theSensor,w
  1333  0753  3E03               	addlw	3
  1334  0754  0084               	movwf	4
  1335  0755  1383               	bcf	3,7	;select IRP bank0
  1336  0756  0180               	clrf	0
  1337  0757  0A84               	incf	4,f
  1338  0758  0180               	clrf	0
  1339                           
  1340                           ;util.c: 47: theSensor->LEVEL_STATE = EMPTY;
  1341  0759  3002               	movlw	2
  1342  075A  00A7               	movwf	??_checkSensorState
  1343  075B  082C               	movf	checkSensorState@theSensor,w
  1344  075C  0084               	movwf	4
  1345  075D  0827               	movf	??_checkSensorState,w
  1346  075E  0080               	movwf	0
  1347                           
  1348                           ;util.c: 49: }
  1349                           ;util.c: 50: break;
  1350  075F  0008               	return
  1351  0760                     l1100:	
  1352                           ;util.c: 52: case EMPTY:
  1353                           
  1354                           
  1355                           ;util.c: 54: if(theSensor->TANK_STATE == TANK_IS_FULL && theSensor->counter == 0){
  1356  0760  082C               	movf	checkSensorState@theSensor,w
  1357  0761  3E02               	addlw	2
  1358  0762  0084               	movwf	4
  1359  0763  0800               	movf	0,w
  1360  0764  1D03               	btfss	3,2
  1361  0765  2F79               	goto	l1106
  1362  0766  082C               	movf	checkSensorState@theSensor,w
  1363  0767  3E03               	addlw	3
  1364  0768  0084               	movwf	4
  1365  0769  0800               	movf	0,w
  1366  076A  00A7               	movwf	??_checkSensorState
  1367  076B  0A84               	incf	4,f
  1368  076C  0800               	movf	0,w
  1369  076D  00A8               	movwf	??_checkSensorState+1
  1370  076E  0827               	movf	??_checkSensorState,w
  1371  076F  0428               	iorwf	??_checkSensorState+1,w
  1372  0770  1D03               	btfss	3,2
  1373  0771  2F79               	goto	l1106
  1374                           
  1375                           ;util.c: 55: theSensor->LEVEL_STATE = TRANSITION_TO_FULL;
  1376  0772  3003               	movlw	3
  1377  0773  00A7               	movwf	??_checkSensorState
  1378  0774  082C               	movf	checkSensorState@theSensor,w
  1379  0775  0084               	movwf	4
  1380  0776  0827               	movf	??_checkSensorState,w
  1381  0777  0080               	movwf	0
  1382                           
  1383                           ;util.c: 57: }else{
  1384  0778  0008               	return
  1385  0779                     l1106:	
  1386                           
  1387                           ;util.c: 58: theSensor->counter = 0;
  1388  0779  082C               	movf	checkSensorState@theSensor,w
  1389  077A  3E03               	addlw	3
  1390  077B  0084               	movwf	4
  1391  077C  0180               	clrf	0
  1392  077D  0A84               	incf	4,f
  1393  077E  0180               	clrf	0
  1394                           
  1395                           ;util.c: 60: }
  1396                           ;util.c: 61: break;
  1397  077F  0008               	return
  1398  0780                     l1108:	
  1399                           ;util.c: 63: case TRANSITION_TO_FULL:
  1400                           
  1401                           
  1402                           ;util.c: 65: if(theSensor->TANK_STATE == TANK_IS_EMPTY){
  1403  0780  082C               	movf	checkSensorState@theSensor,w
  1404  0781  3E02               	addlw	2
  1405  0782  0084               	movwf	4
  1406  0783  0300               	decf	0,w
  1407  0784  1D03               	btfss	3,2
  1408  0785  2F93               	goto	l1114
  1409                           
  1410                           ;util.c: 66: theSensor->counter = 0;
  1411  0786  082C               	movf	checkSensorState@theSensor,w
  1412  0787  3E03               	addlw	3
  1413  0788  0084               	movwf	4
  1414  0789  0180               	clrf	0
  1415  078A  0A84               	incf	4,f
  1416  078B  0180               	clrf	0
  1417                           
  1418                           ;util.c: 67: theSensor->LEVEL_STATE = EMPTY;
  1419  078C  3002               	movlw	2
  1420  078D  00A7               	movwf	??_checkSensorState
  1421  078E  082C               	movf	checkSensorState@theSensor,w
  1422  078F  0084               	movwf	4
  1423  0790  0827               	movf	??_checkSensorState,w
  1424  0791  0080               	movwf	0
  1425                           
  1426                           ;util.c: 70: }else if(theSensor->TANK_STATE == TANK_IS_FULL && theSensor->counter > FILT
      +                          ERTMR_TO_FULL){
  1427  0792  0008               	return
  1428  0793                     l1114:	
  1429  0793  082C               	movf	checkSensorState@theSensor,w
  1430  0794  3E02               	addlw	2
  1431  0795  0084               	movwf	4
  1432  0796  0800               	movf	0,w
  1433  0797  1D03               	btfss	3,2
  1434  0798  0008               	return
  1435  0799  082C               	movf	checkSensorState@theSensor,w
  1436  079A  3E03               	addlw	3
  1437  079B  0084               	movwf	4
  1438  079C  0800               	movf	0,w
  1439  079D  00A7               	movwf	??_checkSensorState
  1440  079E  0A84               	incf	4,f
  1441  079F  0800               	movf	0,w
  1442  07A0  00A8               	movwf	??_checkSensorState+1
  1443  07A1  3003               	movlw	low (_FILTERTMR_TO_FULL-__stringbase)
  1444  07A2  0084               	movwf	4
  1445  07A3  120A  118A  2015  120A  118A  	fcall	stringdir
  1446  07A8  00A9               	movwf	??_checkSensorState+2
  1447  07A9  120A  118A  2015  120A  118A  	fcall	stringdir
  1448  07AE  00AA               	movwf	??_checkSensorState+3
  1449  07AF  082A               	movf	??_checkSensorState+3,w
  1450  07B0  3A80               	xorlw	128
  1451  07B1  00AB               	movwf	??_checkSensorState+4
  1452  07B2  0828               	movf	??_checkSensorState+1,w
  1453  07B3  3A80               	xorlw	128
  1454  07B4  022B               	subwf	??_checkSensorState+4,w
  1455  07B5  1D03               	skipz
  1456  07B6  2FB9               	goto	u605
  1457  07B7  0827               	movf	??_checkSensorState,w
  1458  07B8  0229               	subwf	??_checkSensorState+2,w
  1459  07B9                     u605:	
  1460  07B9  1803               	skipnc
  1461  07BA  0008               	return
  1462                           
  1463                           ;util.c: 72: theSensor->counter = 0;
  1464  07BB  1283               	bcf	3,5	;RP0=0, select bank0
  1465  07BC  1303               	bcf	3,6	;RP1=0, select bank0
  1466  07BD  082C               	movf	checkSensorState@theSensor,w
  1467  07BE  3E03               	addlw	3
  1468  07BF  0084               	movwf	4
  1469  07C0  1383               	bcf	3,7	;select IRP bank0
  1470  07C1  0180               	clrf	0
  1471  07C2  0A84               	incf	4,f
  1472  07C3  0180               	clrf	0
  1473                           
  1474                           ;util.c: 73: theSensor->LEVEL_STATE = TURN_ON_ALARM;
  1475  07C4  3004               	movlw	4
  1476  07C5  00A7               	movwf	??_checkSensorState
  1477  07C6  082C               	movf	checkSensorState@theSensor,w
  1478  07C7  0084               	movwf	4
  1479  07C8  0827               	movf	??_checkSensorState,w
  1480  07C9  0080               	movwf	0
  1481                           
  1482                           ;util.c: 75: }
  1483                           ;util.c: 76: break;
  1484  07CA  0008               	return
  1485  07CB                     l1122:	
  1486                           ;util.c: 79: case TURN_ON_ALARM :
  1487                           
  1488                           
  1489                           ;util.c: 82: theSensor->LEVEL_STATE = FINAL_STATE;
  1490  07CB  3005               	movlw	5
  1491  07CC  00A7               	movwf	??_checkSensorState
  1492  07CD  082C               	movf	checkSensorState@theSensor,w
  1493  07CE  0084               	movwf	4
  1494  07CF  0827               	movf	??_checkSensorState,w
  1495  07D0  0080               	movwf	0
  1496                           
  1497                           ;util.c: 89: }
  1498                           
  1499                           ;util.c: 88: break;
  1500                           
  1501                           ;util.c: 86: default:
  1502                           
  1503                           ;util.c: 85: case FINAL_STATE:
  1504                           
  1505                           ;util.c: 83: break;
  1506  07D1  0008               	return
  1507  07D2                     l1126:	
  1508  07D2  082C               	movf	checkSensorState@theSensor,w
  1509  07D3  0084               	movwf	4
  1510  07D4  1383               	bcf	3,7	;select IRP bank0
  1511  07D5  0800               	movf	0,w
  1512                           
  1513                           ; Switch size 1, requested type "space"
  1514                           ; Number of cases is 6, Range of values is 0 to 5
  1515                           ; switch strategies available:
  1516                           ; Name         Instructions Cycles
  1517                           ; simple_byte           19    10 (average)
  1518                           ; direct_byte           26     8 (fixed)
  1519                           ; jumptable            260     6 (fixed)
  1520                           ;	Chosen strategy is simple_byte
  1521  07D6  3A00               	xorlw	0	; case 0
  1522  07D7  1903               	skipnz
  1523  07D8  2F03               	goto	l1080
  1524  07D9  3A01               	xorlw	1	; case 1
  1525  07DA  1903               	skipnz
  1526  07DB  2F18               	goto	l1086
  1527  07DC  3A03               	xorlw	3	; case 2
  1528  07DD  1903               	skipnz
  1529  07DE  2F60               	goto	l1100
  1530  07DF  3A01               	xorlw	1	; case 3
  1531  07E0  1903               	skipnz
  1532  07E1  2F80               	goto	l1108
  1533  07E2  3A07               	xorlw	7	; case 4
  1534  07E3  1903               	skipnz
  1535  07E4  2FCB               	goto	l1122
  1536  07E5  3A01               	xorlw	1	; case 5
  1537  07E6  1903               	skipnz
  1538  07E7  2FE9               	goto	l154
  1539  07E8  2FE9               	goto	l154
  1540  07E9                     l154:	
  1541  07E9  0008               	return
  1542  07EA                     __end_of_checkSensorState:	
  1543                           
  1544                           	psect	text9
  1545  0477                     __ptext9:	
  1546 ;; *************** function _checkAlarmState *****************
  1547 ;; Defined at:
  1548 ;;		line 4 in file "alarm_source.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;  theSensor       1    wreg     PTR volatile struct leve
  1551 ;;		 -> levelSensors(10), 
  1552 ;;  theAlarm        1   11[BANK0 ] PTR volatile struct Alar
  1553 ;;		 -> theAlarm(3), 
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;  theSensor       1   14[BANK0 ] PTR volatile struct leve
  1556 ;;		 -> levelSensors(10), 
  1557 ;; Return value:  Size  Location     Type
  1558 ;;		None               void
  1559 ;; Registers used:
  1560 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1566 ;;      Params:         0       1       0       0       0
  1567 ;;      Locals:         0       1       0       0       0
  1568 ;;      Temps:          0       2       0       0       0
  1569 ;;      Totals:         0       4       0       0       0
  1570 ;;Total ram usage:        4 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; Hardware stack levels required when called:    4
  1573 ;; This function calls:
  1574 ;;		_timer1_stop
  1575 ;;		_turnAlarmOn
  1576 ;; This function is called by:
  1577 ;;		_main
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           
  1582                           ;psect for function _checkAlarmState
  1583  0477                     _checkAlarmState:	
  1584                           
  1585                           ;incstack = 0
  1586                           ; Regs used in _checkAlarmState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1587                           ;checkAlarmState@theSensor stored from wreg
  1588  0477  1283               	bcf	3,5	;RP0=0, select bank0
  1589  0478  1303               	bcf	3,6	;RP1=0, select bank0
  1590  0479  00AE               	movwf	checkAlarmState@theSensor
  1591                           
  1592                           ;alarm_source.c: 6: if(theSensor->LEVEL_STATE == TURN_ON_ALARM)
  1593  047A  082E               	movf	checkAlarmState@theSensor,w
  1594  047B  0084               	movwf	4
  1595  047C  3004               	movlw	4
  1596  047D  1383               	bcf	3,7	;select IRP bank0
  1597  047E  0600               	xorwf	0,w
  1598  047F  1D03               	btfss	3,2
  1599  0480  2C87               	goto	l1132
  1600                           
  1601                           ;alarm_source.c: 7: {
  1602                           ;alarm_source.c: 8: turnAlarmOn(theAlarm);
  1603  0481  082B               	movf	checkAlarmState@theAlarm,w
  1604  0482  120A  118A  24A0  120A  118A  	fcall	_turnAlarmOn
  1605  0487                     l1132:	
  1606                           
  1607                           ;alarm_source.c: 9: }
  1608                           ;alarm_source.c: 11: if(theAlarm->current_value > theAlarm->trigger_value)
  1609  0487  1283               	bcf	3,5	;RP0=0, select bank0
  1610  0488  1303               	bcf	3,6	;RP1=0, select bank0
  1611  0489  0A2B               	incf	checkAlarmState@theAlarm,w
  1612  048A  0084               	movwf	4
  1613  048B  0800               	movf	0,w
  1614  048C  00AC               	movwf	??_checkAlarmState
  1615  048D  082B               	movf	checkAlarmState@theAlarm,w
  1616  048E  3E02               	addlw	2
  1617  048F  0084               	movwf	4
  1618  0490  0800               	movf	0,w
  1619  0491  00AD               	movwf	??_checkAlarmState+1
  1620  0492  082C               	movf	??_checkAlarmState,w
  1621  0493  022D               	subwf	??_checkAlarmState+1,w
  1622  0494  1803               	skipnc
  1623  0495  0008               	return
  1624                           
  1625                           ;alarm_source.c: 12: {
  1626                           ;alarm_source.c: 14: theAlarm->ALARM_STATE = ALARM_FINAL_STATE;
  1627  0496  3003               	movlw	3
  1628  0497  00AC               	movwf	??_checkAlarmState
  1629  0498  082B               	movf	checkAlarmState@theAlarm,w
  1630  0499  0084               	movwf	4
  1631  049A  082C               	movf	??_checkAlarmState,w
  1632  049B  0080               	movwf	0
  1633                           
  1634                           ;alarm_source.c: 15: timer1_stop();
  1635  049C  120A  118A  23F3   	fcall	_timer1_stop
  1636  049F  0008               	return
  1637  04A0                     __end_of_checkAlarmState:	
  1638                           
  1639                           	psect	text10
  1640  04A0                     __ptext10:	
  1641 ;; *************** function _turnAlarmOn *****************
  1642 ;; Defined at:
  1643 ;;		line 21 in file "alarm_source.c"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;  theAlarm        1    wreg     PTR volatile struct Alar
  1646 ;;		 -> theAlarm(3), 
  1647 ;; Auto vars:     Size  Location     Type
  1648 ;;  theAlarm        1    8[BANK0 ] PTR volatile struct Alar
  1649 ;;		 -> theAlarm(3), 
  1650 ;; Return value:  Size  Location     Type
  1651 ;;		None               void
  1652 ;; Registers used:
  1653 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1654 ;; Tracked objects:
  1655 ;;		On entry : 0/0
  1656 ;;		On exit  : 0/0
  1657 ;;		Unchanged: 0/0
  1658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1659 ;;      Params:         0       0       0       0       0
  1660 ;;      Locals:         0       1       0       0       0
  1661 ;;      Temps:          0       1       0       0       0
  1662 ;;      Totals:         0       2       0       0       0
  1663 ;;Total ram usage:        2 bytes
  1664 ;; Hardware stack levels used:    1
  1665 ;; Hardware stack levels required when called:    3
  1666 ;; This function calls:
  1667 ;;		_adc_start
  1668 ;;		_timer1_start
  1669 ;; This function is called by:
  1670 ;;		_checkAlarmState
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674                           
  1675                           ;psect for function _turnAlarmOn
  1676  04A0                     _turnAlarmOn:	
  1677                           
  1678                           ;incstack = 0
  1679                           ; Regs used in _turnAlarmOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1680                           ;turnAlarmOn@theAlarm stored from wreg
  1681  04A0  1283               	bcf	3,5	;RP0=0, select bank0
  1682  04A1  1303               	bcf	3,6	;RP1=0, select bank0
  1683  04A2  00A8               	movwf	turnAlarmOn@theAlarm
  1684                           
  1685                           ;alarm_source.c: 23: switch(theAlarm->ALARM_STATE)
  1686  04A3  2CBC               	goto	l1040
  1687  04A4                     l1030:	
  1688                           ;alarm_source.c: 24: {
  1689                           ;alarm_source.c: 25: case ALARM_OFF:
  1690                           
  1691                           
  1692                           ;alarm_source.c: 26: adc_start();
  1693  04A4  120A  118A  2416  120A  118A  	fcall	_adc_start
  1694                           
  1695                           ;alarm_source.c: 27: timer1_start();
  1696  04A9  120A  118A  2420  120A  118A  	fcall	_timer1_start
  1697                           
  1698                           ;alarm_source.c: 28: theAlarm->current_value = 0;
  1699  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  1700  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  1701  04B0  0A28               	incf	turnAlarmOn@theAlarm,w
  1702  04B1  0084               	movwf	4
  1703  04B2  0180               	clrf	0
  1704                           
  1705                           ;alarm_source.c: 29: theAlarm->ALARM_STATE = ALARM_ON;
  1706  04B3  3001               	movlw	1
  1707  04B4  2CB6               	goto	L2
  1708  04B5                     l1036:	
  1709                           ;alarm_source.c: 32: case ALARM_DOUBLE_TIME:
  1710                           ;alarm_source.c: 33: default:
  1711                           
  1712                           ;alarm_source.c: 31: case ALARM_ON:
  1713                           
  1714                           ;alarm_source.c: 30: break;
  1715                           
  1716                           
  1717                           ;alarm_source.c: 34: theAlarm->ALARM_STATE = ALARM_DOUBLE_TIME;
  1718  04B5  3002               	movlw	2
  1719  04B6                     L2:	
  1720  04B6  00A7               	movwf	??_turnAlarmOn
  1721  04B7  0828               	movf	turnAlarmOn@theAlarm,w
  1722  04B8  0084               	movwf	4
  1723  04B9  0827               	movf	??_turnAlarmOn,w
  1724  04BA  0080               	movwf	0
  1725                           
  1726                           ;alarm_source.c: 36: }
  1727                           
  1728                           ;alarm_source.c: 35: break;
  1729  04BB  2CC9               	goto	l1042
  1730  04BC                     l1040:	
  1731  04BC  0828               	movf	turnAlarmOn@theAlarm,w
  1732  04BD  0084               	movwf	4
  1733  04BE  0800               	movf	0,w
  1734                           
  1735                           ; Switch size 1, requested type "space"
  1736                           ; Number of cases is 3, Range of values is 0 to 2
  1737                           ; switch strategies available:
  1738                           ; Name         Instructions Cycles
  1739                           ; simple_byte           10     6 (average)
  1740                           ; direct_byte           17     8 (fixed)
  1741                           ; jumptable            260     6 (fixed)
  1742                           ;	Chosen strategy is simple_byte
  1743  04BF  3A00               	xorlw	0	; case 0
  1744  04C0  1903               	skipnz
  1745  04C1  2CA4               	goto	l1030
  1746  04C2  3A01               	xorlw	1	; case 1
  1747  04C3  1903               	skipnz
  1748  04C4  2CB5               	goto	l1036
  1749  04C5  3A03               	xorlw	3	; case 2
  1750  04C6  1903               	skipnz
  1751  04C7  2CB5               	goto	l1036
  1752  04C8  2CB5               	goto	l1036
  1753  04C9                     l1042:	
  1754                           
  1755                           ;alarm_source.c: 37: if(theAlarm->ALARM_STATE == ALARM_OFF)
  1756  04C9  0828               	movf	turnAlarmOn@theAlarm,w
  1757  04CA  0084               	movwf	4
  1758  04CB  0800               	movf	0,w
  1759  04CC  1D03               	btfss	3,2
  1760  04CD  0008               	return
  1761                           
  1762                           ;alarm_source.c: 38: {
  1763                           ;alarm_source.c: 39: adc_start();
  1764  04CE  120A  118A  2416  120A  118A  	fcall	_adc_start
  1765                           
  1766                           ;alarm_source.c: 40: timer1_start();
  1767  04D3  120A  118A  2420   	fcall	_timer1_start
  1768                           
  1769                           ;alarm_source.c: 41: theAlarm->current_value = 0;
  1770  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  1771  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  1772  04D8  0A28               	incf	turnAlarmOn@theAlarm,w
  1773  04D9  0084               	movwf	4
  1774  04DA  0180               	clrf	0
  1775  04DB  0008               	return
  1776  04DC                     __end_of_turnAlarmOn:	
  1777                           
  1778                           	psect	text11
  1779  0420                     __ptext11:	
  1780 ;; *************** function _timer1_start *****************
  1781 ;; Defined at:
  1782 ;;		line 139 in file "util.c"
  1783 ;; Parameters:    Size  Location     Type
  1784 ;;		None
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;		None
  1787 ;; Return value:  Size  Location     Type
  1788 ;;		None               void
  1789 ;; Registers used:
  1790 ;;		None
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1796 ;;      Params:         0       0       0       0       0
  1797 ;;      Locals:         0       0       0       0       0
  1798 ;;      Temps:          0       0       0       0       0
  1799 ;;      Totals:         0       0       0       0       0
  1800 ;;Total ram usage:        0 bytes
  1801 ;; Hardware stack levels used:    1
  1802 ;; Hardware stack levels required when called:    2
  1803 ;; This function calls:
  1804 ;;		Nothing
  1805 ;; This function is called by:
  1806 ;;		_turnAlarmOn
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           
  1811                           ;psect for function _timer1_start
  1812  0420                     _timer1_start:	
  1813                           
  1814                           ;util.c: 140: T1CONbits.T1OSCEN = 1;
  1815                           
  1816                           ;incstack = 0
  1817                           ; Regs used in _timer1_start: []
  1818  0420  1283               	bcf	3,5	;RP0=0, select bank0
  1819  0421  1303               	bcf	3,6	;RP1=0, select bank0
  1820  0422  1590               	bsf	16,3	;volatile
  1821                           
  1822                           ;util.c: 141: T1CONbits.TMR1ON = 1;
  1823  0423  1410               	bsf	16,0	;volatile
  1824                           
  1825                           ;util.c: 142: PIE1bits.TMR1IE = 1;
  1826  0424  1683               	bsf	3,5	;RP0=1, select bank1
  1827  0425  1303               	bcf	3,6	;RP1=0, select bank1
  1828  0426  140C               	bsf	12,0	;volatile
  1829                           
  1830                           ;util.c: 143: INTCONbits.GIE = 1;
  1831  0427  178B               	bsf	11,7	;volatile
  1832                           
  1833                           ;util.c: 144: INTCONbits.PEIE = 1;
  1834  0428  170B               	bsf	11,6	;volatile
  1835  0429  0008               	return
  1836  042A                     __end_of_timer1_start:	
  1837                           
  1838                           	psect	text12
  1839  0416                     __ptext12:	
  1840 ;; *************** function _adc_start *****************
  1841 ;; Defined at:
  1842 ;;		line 205 in file "util.c"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;		None
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;		None
  1847 ;; Return value:  Size  Location     Type
  1848 ;;		None               void
  1849 ;; Registers used:
  1850 ;;		None
  1851 ;; Tracked objects:
  1852 ;;		On entry : 0/0
  1853 ;;		On exit  : 0/0
  1854 ;;		Unchanged: 0/0
  1855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1856 ;;      Params:         0       0       0       0       0
  1857 ;;      Locals:         0       0       0       0       0
  1858 ;;      Temps:          0       0       0       0       0
  1859 ;;      Totals:         0       0       0       0       0
  1860 ;;Total ram usage:        0 bytes
  1861 ;; Hardware stack levels used:    1
  1862 ;; Hardware stack levels required when called:    2
  1863 ;; This function calls:
  1864 ;;		Nothing
  1865 ;; This function is called by:
  1866 ;;		_turnAlarmOn
  1867 ;; This function uses a non-reentrant model
  1868 ;;
  1869                           
  1870                           
  1871                           ;psect for function _adc_start
  1872  0416                     _adc_start:	
  1873                           
  1874                           ;util.c: 206: ADCON0bits.ADON =1;
  1875                           
  1876                           ;incstack = 0
  1877                           ; Regs used in _adc_start: []
  1878  0416  1283               	bcf	3,5	;RP0=0, select bank0
  1879  0417  1303               	bcf	3,6	;RP1=0, select bank0
  1880  0418  141F               	bsf	31,0	;volatile
  1881                           
  1882                           ;util.c: 207: ADCON0bits.GO_nDONE = 1;
  1883  0419  151F               	bsf	31,2	;volatile
  1884                           
  1885                           ;util.c: 208: PIE1bits.ADIE =1;
  1886  041A  1683               	bsf	3,5	;RP0=1, select bank1
  1887  041B  1303               	bcf	3,6	;RP1=0, select bank1
  1888  041C  170C               	bsf	12,6	;volatile
  1889                           
  1890                           ;util.c: 209: INTCONbits.GIE =1;
  1891  041D  178B               	bsf	11,7	;volatile
  1892                           
  1893                           ;util.c: 210: INTCONbits.PEIE = 1;
  1894  041E  170B               	bsf	11,6	;volatile
  1895  041F  0008               	return
  1896  0420                     __end_of_adc_start:	
  1897                           
  1898                           	psect	text13
  1899  03F3                     __ptext13:	
  1900 ;; *************** function _timer1_stop *****************
  1901 ;; Defined at:
  1902 ;;		line 149 in file "util.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;		None
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;		None
  1907 ;; Return value:  Size  Location     Type
  1908 ;;		None               void
  1909 ;; Registers used:
  1910 ;;		None
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1916 ;;      Params:         0       0       0       0       0
  1917 ;;      Locals:         0       0       0       0       0
  1918 ;;      Temps:          0       0       0       0       0
  1919 ;;      Totals:         0       0       0       0       0
  1920 ;;Total ram usage:        0 bytes
  1921 ;; Hardware stack levels used:    1
  1922 ;; Hardware stack levels required when called:    2
  1923 ;; This function calls:
  1924 ;;		Nothing
  1925 ;; This function is called by:
  1926 ;;		_checkAlarmState
  1927 ;;		_turnAlarmOff
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           
  1932                           ;psect for function _timer1_stop
  1933  03F3                     _timer1_stop:	
  1934                           
  1935                           ;util.c: 150: T1CONbits.TMR1ON = 0;
  1936                           
  1937                           ;incstack = 0
  1938                           ; Regs used in _timer1_stop: []
  1939  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  1940  03F4  1303               	bcf	3,6	;RP1=0, select bank0
  1941  03F5  1010               	bcf	16,0	;volatile
  1942                           
  1943                           ;util.c: 151: T1CONbits.T1OSCEN =0;
  1944  03F6  1190               	bcf	16,3	;volatile
  1945                           
  1946                           ;util.c: 152: PIE1bits.TMR1IE = 0;
  1947  03F7  1683               	bsf	3,5	;RP0=1, select bank1
  1948  03F8  1303               	bcf	3,6	;RP1=0, select bank1
  1949  03F9  100C               	bcf	12,0	;volatile
  1950  03FA  0008               	return
  1951  03FB                     __end_of_timer1_stop:	
  1952                           
  1953                           	psect	text14
  1954  04DC                     __ptext14:	
  1955 ;; *************** function _blinkLed *****************
  1956 ;; Defined at:
  1957 ;;		line 104 in file "util.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;  stateOne        1    wreg     PTR enum E1033
  1960 ;;		 -> levelSensors(10), 
  1961 ;;  stateTwo        1    7[BANK0 ] PTR enum E1033
  1962 ;;		 -> levelSensors(10), 
  1963 ;;  almState        1    8[BANK0 ] PTR enum E1005
  1964 ;;		 -> theAlarm(3), 
  1965 ;;  blinkState      1    9[BANK0 ] PTR enum E1026
  1966 ;;		 -> blinkState(1), 
  1967 ;; Auto vars:     Size  Location     Type
  1968 ;;  stateOne        1   11[BANK0 ] PTR enum E1033
  1969 ;;		 -> levelSensors(10), 
  1970 ;; Return value:  Size  Location     Type
  1971 ;;		None               void
  1972 ;; Registers used:
  1973 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1974 ;; Tracked objects:
  1975 ;;		On entry : 0/0
  1976 ;;		On exit  : 0/0
  1977 ;;		Unchanged: 0/0
  1978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1979 ;;      Params:         0       3       0       0       0
  1980 ;;      Locals:         0       1       0       0       0
  1981 ;;      Temps:          0       1       0       0       0
  1982 ;;      Totals:         0       5       0       0       0
  1983 ;;Total ram usage:        5 bytes
  1984 ;; Hardware stack levels used:    1
  1985 ;; Hardware stack levels required when called:    2
  1986 ;; This function calls:
  1987 ;;		Nothing
  1988 ;; This function is called by:
  1989 ;;		_main
  1990 ;; This function uses a non-reentrant model
  1991 ;;
  1992                           
  1993                           
  1994                           ;psect for function _blinkLed
  1995  04DC                     _blinkLed:	
  1996                           
  1997                           ;incstack = 0
  1998                           ; Regs used in _blinkLed: [wreg-fsr0h+status,2+status,0]
  1999                           ;blinkLed@stateOne stored from wreg
  2000  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  2001  04DD  1303               	bcf	3,6	;RP1=0, select bank0
  2002  04DE  00AB               	movwf	blinkLed@stateOne
  2003                           
  2004                           ;util.c: 106: if(*stateOne == TRANSITION_TO_EMPTY || *stateOne == TRANSITION_TO_FULL || 
      +                          *stateTwo == TRANSITION_TO_EMPTY || *stateTwo == TRANSITION_TO_FULL)
  2005  04DF  082B               	movf	blinkLed@stateOne,w
  2006  04E0  0084               	movwf	4
  2007  04E1  1383               	bcf	3,7	;select IRP bank0
  2008  04E2  0300               	decf	0,w
  2009  04E3  1903               	btfsc	3,2
  2010  04E4  2CF6               	goto	l1146
  2011  04E5  082B               	movf	blinkLed@stateOne,w
  2012  04E6  0084               	movwf	4
  2013  04E7  3003               	movlw	3
  2014  04E8  0600               	xorwf	0,w
  2015  04E9  1903               	btfsc	3,2
  2016  04EA  2CF6               	goto	l1146
  2017  04EB  0827               	movf	blinkLed@stateTwo,w
  2018  04EC  0084               	movwf	4
  2019  04ED  0300               	decf	0,w
  2020  04EE  1903               	btfsc	3,2
  2021  04EF  2CF6               	goto	l1146
  2022  04F0  0827               	movf	blinkLed@stateTwo,w
  2023  04F1  0084               	movwf	4
  2024  04F2  3003               	movlw	3
  2025  04F3  0600               	xorwf	0,w
  2026  04F4  1D03               	btfss	3,2
  2027  04F5  2CFD               	goto	l1148
  2028  04F6                     l1146:	
  2029                           
  2030                           ;util.c: 107: {
  2031                           ;util.c: 108: *blinkState = FILTER_BLINK_FAST ;
  2032  04F6  3002               	movlw	2
  2033  04F7  00AA               	movwf	??_blinkLed
  2034  04F8  0829               	movf	blinkLed@blinkState,w
  2035  04F9  0084               	movwf	4
  2036  04FA  082A               	movf	??_blinkLed,w
  2037  04FB  0080               	movwf	0
  2038                           
  2039                           ;util.c: 110: }
  2040  04FC  0008               	return
  2041  04FD                     l1148:	
  2042                           
  2043                           ;util.c: 111: else if(*almState == ALARM_ON || *almState == ALARM_DOUBLE_TIME)
  2044  04FD  0828               	movf	blinkLed@almState,w
  2045  04FE  0084               	movwf	4
  2046  04FF  0300               	decf	0,w
  2047  0500  1903               	btfsc	3,2
  2048  0501  2D08               	goto	l1152
  2049  0502  0828               	movf	blinkLed@almState,w
  2050  0503  0084               	movwf	4
  2051  0504  3002               	movlw	2
  2052  0505  0600               	xorwf	0,w
  2053  0506  1D03               	btfss	3,2
  2054  0507  2D0F               	goto	l1154
  2055  0508                     l1152:	
  2056                           
  2057                           ;util.c: 112: {
  2058                           ;util.c: 113: *blinkState = ALARM_BLINK_SLOW;
  2059  0508  3003               	movlw	3
  2060  0509  00AA               	movwf	??_blinkLed
  2061  050A  0829               	movf	blinkLed@blinkState,w
  2062  050B  0084               	movwf	4
  2063  050C  082A               	movf	??_blinkLed,w
  2064  050D  0080               	movwf	0
  2065                           
  2066                           ;util.c: 115: }else if (*almState == ALARM_FINAL_STATE)
  2067  050E  0008               	return
  2068  050F                     l1154:	
  2069  050F  0828               	movf	blinkLed@almState,w
  2070  0510  0084               	movwf	4
  2071  0511  3003               	movlw	3
  2072  0512  0600               	xorwf	0,w
  2073  0513  1D03               	btfss	3,2
  2074  0514  2D1C               	goto	l1158
  2075                           
  2076                           ;util.c: 116: {
  2077                           ;util.c: 117: *blinkState = ALARM_SOLID_ON;
  2078  0515  3004               	movlw	4
  2079  0516  00AA               	movwf	??_blinkLed
  2080  0517  0829               	movf	blinkLed@blinkState,w
  2081  0518  0084               	movwf	4
  2082  0519  082A               	movf	??_blinkLed,w
  2083  051A  0080               	movwf	0
  2084                           
  2085                           ;util.c: 119: }else
  2086  051B  0008               	return
  2087  051C                     l1158:	
  2088                           
  2089                           ;util.c: 120: {
  2090                           ;util.c: 121: *blinkState = LIGHTS_OFF;
  2091  051C  0829               	movf	blinkLed@blinkState,w
  2092  051D  0084               	movwf	4
  2093  051E  0180               	clrf	0
  2094  051F  0008               	return
  2095  0520                     __end_of_blinkLed:	
  2096                           
  2097                           	psect	text15
  2098  042A                     __ptext15:	
  2099 ;; *************** function _adc_init_CH0 *****************
  2100 ;; Defined at:
  2101 ;;		line 195 in file "util.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;		None
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;		None
  2106 ;; Return value:  Size  Location     Type
  2107 ;;		None               void
  2108 ;; Registers used:
  2109 ;;		wreg, status,2, status,0
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2115 ;;      Params:         0       0       0       0       0
  2116 ;;      Locals:         0       0       0       0       0
  2117 ;;      Temps:          0       0       0       0       0
  2118 ;;      Totals:         0       0       0       0       0
  2119 ;;Total ram usage:        0 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    2
  2122 ;; This function calls:
  2123 ;;		Nothing
  2124 ;; This function is called by:
  2125 ;;		_main
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           
  2130                           ;psect for function _adc_init_CH0
  2131  042A                     _adc_init_CH0:	
  2132                           
  2133                           ;util.c: 196: ADCON0bits.ADCS = 0x00;
  2134                           
  2135                           ;incstack = 0
  2136                           ; Regs used in _adc_init_CH0: [wreg+status,2+status,0]
  2137  042A  303F               	movlw	-193
  2138  042B  1283               	bcf	3,5	;RP0=0, select bank0
  2139  042C  1303               	bcf	3,6	;RP1=0, select bank0
  2140  042D  059F               	andwf	31,f	;volatile
  2141                           
  2142                           ;util.c: 197: ADCON0bits.CHS = 0x00;
  2143  042E  30C7               	movlw	-57
  2144  042F  059F               	andwf	31,f	;volatile
  2145                           
  2146                           ;util.c: 199: ADCON1bits.ADFM = 1;
  2147  0430  1683               	bsf	3,5	;RP0=1, select bank1
  2148  0431  1303               	bcf	3,6	;RP1=0, select bank1
  2149  0432  179F               	bsf	31,7	;volatile
  2150                           
  2151                           ;util.c: 200: ADCON1bits.PCFG = 0x00;
  2152  0433  30F0               	movlw	-16
  2153  0434  059F               	andwf	31,f	;volatile
  2154  0435  0008               	return
  2155  0436                     __end_of_adc_init_CH0:	
  2156                           
  2157                           	psect	text16
  2158  0436                     __ptext16:	
  2159 ;; *************** function ___bmul *****************
  2160 ;; Defined at:
  2161 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/Umul8.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;  multiplier      1    wreg     unsigned char 
  2164 ;;  multiplicand    1    7[BANK0 ] unsigned char 
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;  multiplier      1   10[BANK0 ] unsigned char 
  2167 ;;  product         1    9[BANK0 ] unsigned char 
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  1    wreg      unsigned char 
  2170 ;; Registers used:
  2171 ;;		wreg, status,2, status,0
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2177 ;;      Params:         0       1       0       0       0
  2178 ;;      Locals:         0       2       0       0       0
  2179 ;;      Temps:          0       1       0       0       0
  2180 ;;      Totals:         0       4       0       0       0
  2181 ;;Total ram usage:        4 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    2
  2184 ;; This function calls:
  2185 ;;		Nothing
  2186 ;; This function is called by:
  2187 ;;		_main
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           
  2192                           ;psect for function ___bmul
  2193  0436                     ___bmul:	
  2194                           
  2195                           ;incstack = 0
  2196                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2197                           ;___bmul@multiplier stored from wreg
  2198  0436  1283               	bcf	3,5	;RP0=0, select bank0
  2199  0437  1303               	bcf	3,6	;RP1=0, select bank0
  2200  0438  00AA               	movwf	___bmul@multiplier
  2201  0439  01A9               	clrf	___bmul@product
  2202  043A                     l1162:	
  2203  043A  1C2A               	btfss	___bmul@multiplier,0
  2204  043B  2C40               	goto	l1166
  2205  043C  0827               	movf	___bmul@multiplicand,w
  2206  043D  00A8               	movwf	??___bmul
  2207  043E  0828               	movf	??___bmul,w
  2208  043F  07A9               	addwf	___bmul@product,f
  2209  0440                     l1166:	
  2210  0440  1003               	clrc
  2211  0441  0DA7               	rlf	___bmul@multiplicand,f
  2212  0442  1003               	clrc
  2213  0443  0CAA               	rrf	___bmul@multiplier,f
  2214  0444  082A               	movf	___bmul@multiplier,w
  2215  0445  1D03               	btfss	3,2
  2216  0446  2C3A               	goto	l1162
  2217  0447  0829               	movf	___bmul@product,w
  2218  0448  0008               	return
  2219  0449                     __end_of___bmul:	
  2220                           
  2221                           	psect	text17
  2222  056B                     __ptext17:	
  2223 ;; *************** function _ISR *****************
  2224 ;; Defined at:
  2225 ;;		line 43 in file "main.c"
  2226 ;; Parameters:    Size  Location     Type
  2227 ;;		None
  2228 ;; Auto vars:     Size  Location     Type
  2229 ;;		None
  2230 ;; Return value:  Size  Location     Type
  2231 ;;		None               void
  2232 ;; Registers used:
  2233 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2234 ;; Tracked objects:
  2235 ;;		On entry : 0/0
  2236 ;;		On exit  : 0/0
  2237 ;;		Unchanged: 0/0
  2238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2239 ;;      Params:         0       0       0       0       0
  2240 ;;      Locals:         0       0       0       0       0
  2241 ;;      Temps:          0       7       0       0       0
  2242 ;;      Totals:         0       7       0       0       0
  2243 ;;Total ram usage:        7 bytes
  2244 ;; Hardware stack levels used:    1
  2245 ;; Hardware stack levels required when called:    1
  2246 ;; This function calls:
  2247 ;;		___awmod
  2248 ;;		i1_timer1_stop
  2249 ;; This function is called by:
  2250 ;;		Interrupt level 1
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           
  2255                           ;psect for function _ISR
  2256  056B                     _ISR:	
  2257                           
  2258                           ;main.c: 44: static int adcResult = 0;
  2259                           ;main.c: 45: static int blinkCounter =0;
  2260                           ;main.c: 49: if(TMR0IF && TMR0IE){
  2261  056B  1D0B               	btfss	11,2	;volatile
  2262  056C  2DB7               	goto	i1l1238
  2263  056D  1A8B               	btfsc	11,5	;volatile
  2264  056E  2D91               	goto	i1l1230
  2265  056F  2DB7               	goto	i1l1238
  2266  0570                     i1l1220:	
  2267                           ;main.c: 52: {
  2268                           ;main.c: 53: case FILTER_BLINK_FAST:
  2269                           
  2270                           ;main.c: 51: switch(blinkState)
  2271                           
  2272                           
  2273                           ;main.c: 54: if((blinkCounter % 5) == 0)
  2274  0570  3005               	movlw	5
  2275  0571  2D73               	goto	L4
  2276  0572                     i1l1224:	
  2277                           ;main.c: 60: case ALARM_BLINK_SLOW:
  2278                           
  2279                           ;main.c: 57: }
  2280                           ;main.c: 58: break;
  2281                           
  2282                           ;main.c: 55: {
  2283                           ;main.c: 56: PORTC ^= (1<<3);
  2284                           
  2285                           
  2286                           ;main.c: 61: if((blinkCounter % 15) == 0)
  2287  0572  300F               	movlw	15
  2288  0573                     L4:	
  2289  0573  00F1               	movwf	___awmod@divisor
  2290  0574  3000               	movlw	0
  2291  0575  00F2               	movwf	___awmod@divisor+1
  2292  0576  0879               	movf	ISR@blinkCounter+1,w
  2293  0577  00F4               	movwf	___awmod@dividend+1
  2294  0578  0878               	movf	ISR@blinkCounter,w
  2295  0579  00F3               	movwf	___awmod@dividend
  2296  057A  120A  118A  2520  120A  118A  	fcall	___awmod
  2297  057F  0871               	movf	?___awmod,w
  2298  0580  0472               	iorwf	?___awmod+1,w
  2299  0581  1D03               	btfss	3,2
  2300  0582  2D9F               	goto	i1l1232
  2301                           
  2302                           ;main.c: 62: {
  2303                           ;main.c: 63: PORTC ^= (1<<3);
  2304  0583  3008               	movlw	8
  2305  0584  1283               	bcf	3,5	;RP0=0, select bank0
  2306  0585  1303               	bcf	3,6	;RP1=0, select bank0
  2307  0586  00A0               	movwf	??_ISR
  2308  0587  0820               	movf	??_ISR,w
  2309  0588  0687               	xorwf	7,f	;volatile
  2310                           
  2311                           ;main.c: 64: }
  2312                           ;main.c: 65: break;
  2313  0589  2D9F               	goto	i1l1232
  2314  058A                     i1l78:	
  2315                           ;main.c: 67: case ALARM_SOLID_ON:
  2316                           
  2317                           
  2318                           ;main.c: 68: PORTC |= (1<<3);
  2319  058A  1587               	bsf	7,3	;volatile
  2320                           
  2321                           ;main.c: 69: break;
  2322  058B  2D9F               	goto	i1l1232
  2323  058C                     i1l1228:	
  2324                           ;main.c: 72: default:
  2325                           
  2326                           ;main.c: 71: case LIGHTS_OFF:
  2327                           
  2328                           
  2329                           ;main.c: 73: PORTC &= ~((1<<3));
  2330  058C  30F7               	movlw	247
  2331  058D  00A0               	movwf	??_ISR
  2332  058E  0820               	movf	??_ISR,w
  2333  058F  0587               	andwf	7,f	;volatile
  2334                           
  2335                           ;main.c: 74: }
  2336  0590  2D9F               	goto	i1l1232
  2337  0591                     i1l1230:	
  2338  0591  087D               	movf	_blinkState,w
  2339                           
  2340                           ; Switch size 1, requested type "space"
  2341                           ; Number of cases is 4, Range of values is 0 to 4
  2342                           ; switch strategies available:
  2343                           ; Name         Instructions Cycles
  2344                           ; simple_byte           13     7 (average)
  2345                           ; direct_byte           23     8 (fixed)
  2346                           ; jumptable            260     6 (fixed)
  2347                           ;	Chosen strategy is simple_byte
  2348  0592  3A00               	xorlw	0	; case 0
  2349  0593  1903               	skipnz
  2350  0594  2D8C               	goto	i1l1228
  2351  0595  3A02               	xorlw	2	; case 2
  2352  0596  1903               	skipnz
  2353  0597  2D70               	goto	i1l1220
  2354  0598  3A01               	xorlw	1	; case 3
  2355  0599  1903               	skipnz
  2356  059A  2D72               	goto	i1l1224
  2357  059B  3A07               	xorlw	7	; case 4
  2358  059C  1903               	skipnz
  2359  059D  2D8A               	goto	i1l78
  2360  059E  2D8C               	goto	i1l1228
  2361  059F                     i1l1232:	
  2362                           
  2363                           ;main.c: 75: blinkCounter ++;
  2364  059F  3001               	movlw	1
  2365  05A0  07F8               	addwf	ISR@blinkCounter,f
  2366  05A1  1803               	skipnc
  2367  05A2  0AF9               	incf	ISR@blinkCounter+1,f
  2368  05A3  3000               	movlw	0
  2369  05A4  07F9               	addwf	ISR@blinkCounter+1,f
  2370                           
  2371                           ;main.c: 76: blinkCounter %= 1000;
  2372  05A5  30E8               	movlw	232
  2373  05A6  00F1               	movwf	___awmod@divisor
  2374  05A7  3003               	movlw	3
  2375  05A8  00F2               	movwf	___awmod@divisor+1
  2376  05A9  0879               	movf	ISR@blinkCounter+1,w
  2377  05AA  00F4               	movwf	___awmod@dividend+1
  2378  05AB  0878               	movf	ISR@blinkCounter,w
  2379  05AC  00F3               	movwf	___awmod@dividend
  2380  05AD  120A  118A  2520  120A  118A  	fcall	___awmod
  2381  05B2  0872               	movf	?___awmod+1,w
  2382  05B3  00F9               	movwf	ISR@blinkCounter+1
  2383  05B4  0871               	movf	?___awmod,w
  2384  05B5  00F8               	movwf	ISR@blinkCounter
  2385                           
  2386                           ;main.c: 77: TMR0IF = 0;
  2387  05B6  110B               	bcf	11,2	;volatile
  2388  05B7                     i1l1238:	
  2389                           
  2390                           ;main.c: 78: }
  2391                           ;main.c: 81: if(TMR1IE && TMR1IF){
  2392  05B7  1683               	bsf	3,5	;RP0=1, select bank1
  2393  05B8  1303               	bcf	3,6	;RP1=0, select bank1
  2394  05B9  1C0C               	btfss	12,0	;volatile
  2395  05BA  2DDD               	goto	i1l81
  2396  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  2397  05BC  1303               	bcf	3,6	;RP1=0, select bank0
  2398  05BD  180C               	btfsc	12,0	;volatile
  2399  05BE  2DCF               	goto	i1l1250
  2400  05BF  2DDD               	goto	i1l81
  2401  05C0                     i1l1244:	
  2402                           ;main.c: 84: case ALARM_ON:
  2403                           
  2404                           ;main.c: 83: switch(theAlarm.ALARM_STATE){
  2405                           
  2406                           
  2407                           ;main.c: 85: theAlarm.current_value += 1;
  2408  05C0  3001               	movlw	1
  2409  05C1  2DC3               	goto	L3
  2410  05C2                     i1l1246:	
  2411                           ;main.c: 87: case ALARM_DOUBLE_TIME:
  2412                           
  2413                           ;main.c: 86: break;
  2414                           
  2415                           
  2416                           ;main.c: 88: theAlarm.current_value += 3;
  2417  05C2  3003               	movlw	3
  2418  05C3                     L3:	
  2419  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  2420  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  2421  05C5  00A0               	movwf	??_ISR
  2422  05C6  0820               	movf	??_ISR,w
  2423  05C7  07FB               	addwf	_theAlarm+1,f	;volatile
  2424                           
  2425                           ;main.c: 89: break;
  2426  05C8  2DDA               	goto	i1l84
  2427  05C9                     i1l1248:	
  2428                           ;main.c: 91: default:
  2429                           
  2430                           ;main.c: 90: case ALARM_FINAL_STATE:
  2431                           
  2432                           
  2433                           ;main.c: 92: timer1_stop();
  2434  05C9  120A  118A  23EB  120A  118A  	fcall	i1_timer1_stop
  2435                           
  2436                           ;main.c: 93: }
  2437  05CE  2DDA               	goto	i1l84
  2438  05CF                     i1l1250:	
  2439  05CF  087A               	movf	_theAlarm,w	;volatile
  2440                           
  2441                           ; Switch size 1, requested type "space"
  2442                           ; Number of cases is 3, Range of values is 1 to 3
  2443                           ; switch strategies available:
  2444                           ; Name         Instructions Cycles
  2445                           ; simple_byte           10     6 (average)
  2446                           ; direct_byte           20    11 (fixed)
  2447                           ; jumptable            263     9 (fixed)
  2448                           ;	Chosen strategy is simple_byte
  2449  05D0  3A01               	xorlw	1	; case 1
  2450  05D1  1903               	skipnz
  2451  05D2  2DC0               	goto	i1l1244
  2452  05D3  3A03               	xorlw	3	; case 2
  2453  05D4  1903               	skipnz
  2454  05D5  2DC2               	goto	i1l1246
  2455  05D6  3A01               	xorlw	1	; case 3
  2456  05D7  1903               	skipnz
  2457  05D8  2DC9               	goto	i1l1248
  2458  05D9  2DC9               	goto	i1l1248
  2459  05DA                     i1l84:	
  2460                           
  2461                           ;main.c: 94: TMR1IF = 0;
  2462  05DA  1283               	bcf	3,5	;RP0=0, select bank0
  2463  05DB  1303               	bcf	3,6	;RP1=0, select bank0
  2464  05DC  100C               	bcf	12,0	;volatile
  2465  05DD                     i1l81:	
  2466                           
  2467                           ;main.c: 95: }
  2468                           ;main.c: 98: if(TMR2IF && TMR2IE){
  2469  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  2470  05DE  1C8C               	btfss	12,1	;volatile
  2471  05DF  2E01               	goto	i1l1268
  2472  05E0  1683               	bsf	3,5	;RP0=1, select bank1
  2473  05E1  1303               	bcf	3,6	;RP1=0, select bank1
  2474  05E2  1C8C               	btfss	12,1	;volatile
  2475  05E3  2E01               	goto	i1l1268
  2476                           
  2477                           ;main.c: 99: if(levelSensors[0].LEVEL_STATE == TRANSITION_TO_EMPTY || levelSensors[0].LE
      +                          VEL_STATE == TRANSITION_TO_FULL){
  2478  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  2479  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  2480  05E6  0337               	decf	_levelSensors,w	;volatile
  2481  05E7  1903               	btfsc	3,2
  2482  05E8  2DED               	goto	i1l1258
  2483  05E9  3003               	movlw	3
  2484  05EA  0637               	xorwf	_levelSensors,w	;volatile
  2485  05EB  1D03               	btfss	3,2
  2486  05EC  2DF3               	goto	i1l1260
  2487  05ED                     i1l1258:	
  2488                           
  2489                           ;main.c: 100: levelSensors[0].counter++;
  2490  05ED  3001               	movlw	1
  2491  05EE  07BA               	addwf	_levelSensors+3,f	;volatile
  2492  05EF  1803               	skipnc
  2493  05F0  0ABB               	incf	_levelSensors+4,f	;volatile
  2494  05F1  3000               	movlw	0
  2495  05F2  07BB               	addwf	_levelSensors+4,f	;volatile
  2496  05F3                     i1l1260:	
  2497                           
  2498                           ;main.c: 101: }
  2499                           ;main.c: 103: if(levelSensors[1].LEVEL_STATE == TRANSITION_TO_EMPTY || levelSensors[1].L
      +                          EVEL_STATE == TRANSITION_TO_FULL){
  2500  05F3  033C               	decf	_levelSensors+5,w	;volatile
  2501  05F4  1903               	btfsc	3,2
  2502  05F5  2DFA               	goto	i1l1264
  2503  05F6  3003               	movlw	3
  2504  05F7  063C               	xorwf	_levelSensors+5,w	;volatile
  2505  05F8  1D03               	btfss	3,2
  2506  05F9  2E00               	goto	i1l1266
  2507  05FA                     i1l1264:	
  2508                           
  2509                           ;main.c: 104: levelSensors[1].counter++;
  2510  05FA  3001               	movlw	1
  2511  05FB  07BF               	addwf	_levelSensors+8,f	;volatile
  2512  05FC  1803               	skipnc
  2513  05FD  0AC0               	incf	_levelSensors+9,f	;volatile
  2514  05FE  3000               	movlw	0
  2515  05FF  07C0               	addwf	_levelSensors+9,f	;volatile
  2516  0600                     i1l1266:	
  2517                           
  2518                           ;main.c: 105: }
  2519                           ;main.c: 106: TMR2IF = 0;
  2520  0600  108C               	bcf	12,1	;volatile
  2521  0601                     i1l1268:	
  2522                           
  2523                           ;main.c: 107: }
  2524                           ;main.c: 110: if(ADIF && ADIE){
  2525  0601  1283               	bcf	3,5	;RP0=0, select bank0
  2526  0602  1F0C               	btfss	12,6	;volatile
  2527  0603  2E21               	goto	i1l96
  2528  0604  1683               	bsf	3,5	;RP0=1, select bank1
  2529  0605  1303               	bcf	3,6	;RP1=0, select bank1
  2530  0606  1F0C               	btfss	12,6	;volatile
  2531  0607  2E21               	goto	i1l96
  2532                           
  2533                           ;main.c: 111: adcResult = (ADRESH <<8) | (ADRESL);
  2534  0608  1283               	bcf	3,5	;RP0=0, select bank0
  2535  0609  1303               	bcf	3,6	;RP1=0, select bank0
  2536  060A  081E               	movf	30,w	;volatile
  2537  060B  00B6               	movwf	ISR@adcResult+1
  2538  060C  1683               	bsf	3,5	;RP0=1, select bank1
  2539  060D  1303               	bcf	3,6	;RP1=0, select bank1
  2540  060E  081E               	movf	30,w	;volatile
  2541  060F  1283               	bcf	3,5	;RP0=0, select bank0
  2542  0610  1303               	bcf	3,6	;RP1=0, select bank0
  2543  0611  00B5               	movwf	ISR@adcResult
  2544                           
  2545                           ;main.c: 112: theAlarm.trigger_value = adcResult >> 2;
  2546  0612  0836               	movf	ISR@adcResult+1,w
  2547  0613  00A1               	movwf	??_ISR+1
  2548  0614  0835               	movf	ISR@adcResult,w
  2549  0615  00A0               	movwf	??_ISR
  2550  0616  0D21               	rlf	??_ISR+1,w
  2551  0617  0CA1               	rrf	??_ISR+1,f
  2552  0618  0CA0               	rrf	??_ISR,f
  2553  0619  0D21               	rlf	??_ISR+1,w
  2554  061A  0CA1               	rrf	??_ISR+1,f
  2555  061B  0CA0               	rrf	??_ISR,f
  2556  061C  0820               	movf	??_ISR,w
  2557  061D  00A2               	movwf	??_ISR+2
  2558  061E  0822               	movf	??_ISR+2,w
  2559  061F  00FC               	movwf	_theAlarm+2	;volatile
  2560                           
  2561                           ;main.c: 113: ADIF = 0;
  2562  0620  130C               	bcf	12,6	;volatile
  2563  0621                     i1l96:	
  2564  0621  1283               	bcf	3,5	;RP0=0, select bank0
  2565  0622  0826               	movf	??_ISR+6,w
  2566  0623  00FF               	movwf	127
  2567  0624  0825               	movf	??_ISR+5,w
  2568  0625  008A               	movwf	10
  2569  0626  0824               	movf	??_ISR+4,w
  2570  0627  0084               	movwf	4
  2571  0628  0E23               	swapf	(??_ISR+3)^0,w
  2572  0629  0083               	movwf	3
  2573  062A  0EFE               	swapf	126,f
  2574  062B  0E7E               	swapf	126,w
  2575  062C  0009               	retfie
  2576  062D                     __end_of_ISR:	
  2577                           
  2578                           	psect	intentry
  2579  0004                     __pintentry:	
  2580                           ;incstack = 0
  2581                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2582                           
  2583  0004                     interrupt_function:	
  2584  007E                     saved_w	set	btemp
  2585  0004  00FE               	movwf	btemp
  2586  0005  0E03               	swapf	3,w
  2587  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2588  0007  1303               	bcf	3,6	;RP1=0, select bank0
  2589  0008  00A3               	movwf	??_ISR+3
  2590  0009  0804               	movf	4,w
  2591  000A  00A4               	movwf	??_ISR+4
  2592  000B  080A               	movf	10,w
  2593  000C  00A5               	movwf	??_ISR+5
  2594  000D  087F               	movf	btemp+1,w
  2595  000E  00A6               	movwf	??_ISR+6
  2596  000F  120A  118A  2D6B   	ljmp	_ISR
  2597                           
  2598                           	psect	text18
  2599  03EB                     __ptext18:	
  2600 ;; *************** function i1_timer1_stop *****************
  2601 ;; Defined at:
  2602 ;;		line 149 in file "util.c"
  2603 ;; Parameters:    Size  Location     Type
  2604 ;;		None
  2605 ;; Auto vars:     Size  Location     Type
  2606 ;;		None
  2607 ;; Return value:  Size  Location     Type
  2608 ;;		None               void
  2609 ;; Registers used:
  2610 ;;		None
  2611 ;; Tracked objects:
  2612 ;;		On entry : 0/0
  2613 ;;		On exit  : 0/0
  2614 ;;		Unchanged: 0/0
  2615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2616 ;;      Params:         0       0       0       0       0
  2617 ;;      Locals:         0       0       0       0       0
  2618 ;;      Temps:          0       0       0       0       0
  2619 ;;      Totals:         0       0       0       0       0
  2620 ;;Total ram usage:        0 bytes
  2621 ;; Hardware stack levels used:    1
  2622 ;; This function calls:
  2623 ;;		Nothing
  2624 ;; This function is called by:
  2625 ;;		_ISR
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           
  2630                           ;psect for function i1_timer1_stop
  2631  03EB                     i1_timer1_stop:	
  2632                           
  2633                           ;util.c: 150: T1CONbits.TMR1ON = 0;
  2634                           
  2635                           ;incstack = 0
  2636                           ; Regs used in i1_timer1_stop: []
  2637  03EB  1283               	bcf	3,5	;RP0=0, select bank0
  2638  03EC  1303               	bcf	3,6	;RP1=0, select bank0
  2639  03ED  1010               	bcf	16,0	;volatile
  2640                           
  2641                           ;util.c: 151: T1CONbits.T1OSCEN =0;
  2642  03EE  1190               	bcf	16,3	;volatile
  2643                           
  2644                           ;util.c: 152: PIE1bits.TMR1IE = 0;
  2645  03EF  1683               	bsf	3,5	;RP0=1, select bank1
  2646  03F0  1303               	bcf	3,6	;RP1=0, select bank1
  2647  03F1  100C               	bcf	12,0	;volatile
  2648  03F2  0008               	return
  2649  03F3                     __end_ofi1_timer1_stop:	
  2650                           
  2651                           	psect	text19
  2652  0520                     __ptext19:	
  2653 ;; *************** function ___awmod *****************
  2654 ;; Defined at:
  2655 ;;		line 6 in file "/opt/microchip/xc8/v1.34/sources/common/awmod.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;  divisor         2    0[COMMON] int 
  2658 ;;  dividend        2    2[COMMON] int 
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;  sign            1    6[COMMON] unsigned char 
  2661 ;;  counter         1    5[COMMON] unsigned char 
  2662 ;; Return value:  Size  Location     Type
  2663 ;;                  2    0[COMMON] int 
  2664 ;; Registers used:
  2665 ;;		wreg, status,2, status,0
  2666 ;; Tracked objects:
  2667 ;;		On entry : 0/0
  2668 ;;		On exit  : 0/0
  2669 ;;		Unchanged: 0/0
  2670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2671 ;;      Params:         4       0       0       0       0
  2672 ;;      Locals:         2       0       0       0       0
  2673 ;;      Temps:          1       0       0       0       0
  2674 ;;      Totals:         7       0       0       0       0
  2675 ;;Total ram usage:        7 bytes
  2676 ;; Hardware stack levels used:    1
  2677 ;; This function calls:
  2678 ;;		Nothing
  2679 ;; This function is called by:
  2680 ;;		_ISR
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           
  2685                           ;psect for function ___awmod
  2686  0520                     ___awmod:	
  2687                           
  2688                           ;incstack = 0
  2689                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2690  0520  01F7               	clrf	___awmod@sign
  2691  0521  1FF4               	btfss	___awmod@dividend+1,7
  2692  0522  2D2A               	goto	i1l1182
  2693  0523  09F3               	comf	___awmod@dividend,f
  2694  0524  09F4               	comf	___awmod@dividend+1,f
  2695  0525  0AF3               	incf	___awmod@dividend,f
  2696  0526  1903               	skipnz
  2697  0527  0AF4               	incf	___awmod@dividend+1,f
  2698  0528  01F7               	clrf	___awmod@sign
  2699  0529  0AF7               	incf	___awmod@sign,f
  2700  052A                     i1l1182:	
  2701  052A  1FF2               	btfss	___awmod@divisor+1,7
  2702  052B  2D31               	goto	i1l1186
  2703  052C  09F1               	comf	___awmod@divisor,f
  2704  052D  09F2               	comf	___awmod@divisor+1,f
  2705  052E  0AF1               	incf	___awmod@divisor,f
  2706  052F  1903               	skipnz
  2707  0530  0AF2               	incf	___awmod@divisor+1,f
  2708  0531                     i1l1186:	
  2709  0531  0871               	movf	___awmod@divisor,w
  2710  0532  0472               	iorwf	___awmod@divisor+1,w
  2711  0533  1903               	btfsc	3,2
  2712  0534  2D5E               	goto	i1l1204
  2713  0535  01F6               	clrf	___awmod@counter
  2714  0536  0AF6               	incf	___awmod@counter,f
  2715  0537                     i1l1194:	
  2716  0537  1BF2               	btfsc	___awmod@divisor+1,7
  2717  0538  2D45               	goto	i1l1196
  2718  0539  3001               	movlw	1
  2719  053A                     u75_25:	
  2720  053A  1003               	clrc
  2721  053B  0DF1               	rlf	___awmod@divisor,f
  2722  053C  0DF2               	rlf	___awmod@divisor+1,f
  2723  053D  3EFF               	addlw	-1
  2724  053E  1D03               	skipz
  2725  053F  2D3A               	goto	u75_25
  2726  0540  3001               	movlw	1
  2727  0541  00F5               	movwf	??___awmod
  2728  0542  0875               	movf	??___awmod,w
  2729  0543  07F6               	addwf	___awmod@counter,f
  2730  0544  2D37               	goto	i1l1194
  2731  0545                     i1l1196:	
  2732  0545  0872               	movf	___awmod@divisor+1,w
  2733  0546  0274               	subwf	___awmod@dividend+1,w
  2734  0547  1D03               	skipz
  2735  0548  2D4B               	goto	u77_25
  2736  0549  0871               	movf	___awmod@divisor,w
  2737  054A  0273               	subwf	___awmod@dividend,w
  2738  054B                     u77_25:	
  2739  054B  1C03               	skipc
  2740  054C  2D53               	goto	i1l1200
  2741  054D  0871               	movf	___awmod@divisor,w
  2742  054E  02F3               	subwf	___awmod@dividend,f
  2743  054F  0872               	movf	___awmod@divisor+1,w
  2744  0550  1C03               	skipc
  2745  0551  03F4               	decf	___awmod@dividend+1,f
  2746  0552  02F4               	subwf	___awmod@dividend+1,f
  2747  0553                     i1l1200:	
  2748  0553  3001               	movlw	1
  2749  0554                     u78_25:	
  2750  0554  1003               	clrc
  2751  0555  0CF2               	rrf	___awmod@divisor+1,f
  2752  0556  0CF1               	rrf	___awmod@divisor,f
  2753  0557  3EFF               	addlw	-1
  2754  0558  1D03               	skipz
  2755  0559  2D54               	goto	u78_25
  2756  055A  3001               	movlw	1
  2757  055B  02F6               	subwf	___awmod@counter,f
  2758  055C  1D03               	btfss	3,2
  2759  055D  2D45               	goto	i1l1196
  2760  055E                     i1l1204:	
  2761  055E  0877               	movf	___awmod@sign,w
  2762  055F  1903               	btfsc	3,2
  2763  0560  2D66               	goto	i1l1208
  2764  0561  09F3               	comf	___awmod@dividend,f
  2765  0562  09F4               	comf	___awmod@dividend+1,f
  2766  0563  0AF3               	incf	___awmod@dividend,f
  2767  0564  1903               	skipnz
  2768  0565  0AF4               	incf	___awmod@dividend+1,f
  2769  0566                     i1l1208:	
  2770  0566  0874               	movf	___awmod@dividend+1,w
  2771  0567  00F2               	movwf	?___awmod+1
  2772  0568  0873               	movf	___awmod@dividend,w
  2773  0569  00F1               	movwf	?___awmod
  2774  056A  0008               	return
  2775  056B                     __end_of___awmod:	
  2776  007E                     btemp	set	126	;btemp
  2777  007E                     wtemp	set	126
  2778  007E                     wtemp0	set	126
  2779  0080                     wtemp1	set	128
  2780  0082                     wtemp2	set	130
  2781  0084                     wtemp3	set	132
  2782  0086                     wtemp4	set	134
  2783  0088                     wtemp5	set	136
  2784  007F                     wtemp6	set	127
  2785  007E                     ttemp	set	126
  2786  007E                     ttemp0	set	126
  2787  0081                     ttemp1	set	129
  2788  0084                     ttemp2	set	132
  2789  0087                     ttemp3	set	135
  2790  007F                     ttemp4	set	127
  2791  007E                     ltemp	set	126
  2792  007E                     ltemp0	set	126
  2793  0082                     ltemp1	set	130
  2794  0086                     ltemp2	set	134
  2795  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    4
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13      7      13
    BANK0            80     21      33
    BANK1            80      0       0
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    turnAlarmOn@theAlarm	PTR volatile struct Alarm size(1) Largest target is 3
		 -> theAlarm(COMMON[3]), 

    checkAlarmState@theAlarm	PTR volatile struct Alarm size(1) Largest target is 3
		 -> theAlarm(COMMON[3]), 

    checkAlarmState@theSensor	PTR volatile struct levelSensor size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 

    blinkLed@almState	PTR enum E1005 size(1) Largest target is 3
		 -> theAlarm(COMMON[3]), 

    blinkLed@blinkState	PTR enum E1026 size(1) Largest target is 1
		 -> blinkState(COMMON[1]), 

    blinkLed@stateTwo	PTR enum E1033 size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 

    blinkLed@stateOne	PTR enum E1033 size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 

    init_sensor@theSensor_init	PTR volatile struct levelSensor size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 

    checkSensorState@theSensor	PTR volatile struct levelSensor size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 

    checkTankStatus@theSensor	PTR volatile struct levelSensor size(1) Largest target is 10
		 -> levelSensors(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awmod

Critical Paths under _main in BANK0

    _main->_checkAlarmState
    _checkAlarmState->___bmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    1875
                                             15 BANK0      6     6      0
                             ___bmul
                       _adc_init_CH0
                           _blinkLed
                    _checkAlarmState
                   _checkSensorState
                    _checkTankStatus
                        _init_sensor
                        _timer0_init
                       _timer0_start
                        _timer1_init
                        _timer2_init
                       _timer2_start
 ---------------------------------------------------------------------------------
 (1) _timer2_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_sensor                                          2     2      0     142
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _checkTankStatus                                      2     2      0      93
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _checkSensorState                                     6     6      0     533
                                              7 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _checkAlarmState                                      4     3      1     349
                                             11 BANK0      4     3      1
                             ___bmul (ARG)
                        _timer1_stop
                        _turnAlarmOn
 ---------------------------------------------------------------------------------
 (2) _turnAlarmOn                                          2     2      0     159
                                              7 BANK0      2     2      0
                          _adc_start
                       _timer1_start
 ---------------------------------------------------------------------------------
 (3) _timer1_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _adc_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _timer1_stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _blinkLed                                             5     2      3     428
                                              7 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _adc_init_CH0                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     170
                                              7 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  7     7      0     614
                                              0 BANK0      7     7      0
                            ___awmod
                      i1_timer1_stop
 ---------------------------------------------------------------------------------
 (5) i1_timer1_stop                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              7     3      4     614
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___bmul
   _adc_init_CH0
   _blinkLed
   _checkAlarmState
     ___bmul (ARG)
     _timer1_stop (ARG)
     _turnAlarmOn (ARG)
       _adc_start
       _timer1_start
   _checkSensorState
   _checkTankStatus
   _init_sensor
   _timer0_init
   _timer0_start
   _timer1_init
   _timer2_init
   _timer2_start

 _ISR (ROOT)
   ___awmod
   i1_timer1_stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            D      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               D      7       D       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2E       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     15      21       5       41.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            55      0       0       8        0.0%
BANK3               55      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2E      12        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Jun 21 19:54:41 2015

                         pc 0002              ___bmul@product 0029                 __CFG_CP$OFF 0000  
     __end_ofi1_timer1_stop 03F3                          fsr 0004                         l154 07E9  
              __CFG_CPD$OFF 0000                         _ISR 056B                         u605 07B9  
                       u555 074E                         u975 06F4                 __CFG_WRT$ON 0000  
                       fsr0 0004                         indf 0000                ___awmod@sign 0077  
              __CFG_FOSC$HS 0000                __CFG_LVP$OFF 0000                        ?_ISR 0071  
                      l1100 0760                        l1030 04A4                        l1040 04BC  
                      l1042 04C9                        l1122 07CB                        l1114 0793  
                      l1106 0779                        l1036 04B5                        l1132 0487  
                      l1108 0780                        l1126 07D2                        l1152 0508  
                      l1080 0703                        l1162 043A                        l1154 050F  
                      l1146 04F6                        l1314 068E                        l1306 067D  
                      l1148 04FD                        l1092 0728                        l1084 0711  
                      l1076 045A                        l1324 06D0                        l1166 0440  
                      l1158 051C                        l1086 0718                        l1326 06E3  
                      _ADIE 0466                        _ADIF 0066     __end_of_checkTankStatus 045F  
                      i1l81 05DD                        i1l84 05DA                        i1l78 058A  
                      i1l96 0621       __size_of_adc_init_CH0 000C            ?_checkAlarmState 002B  
                      _main 062D                        btemp 007E               __CFG_BOREN$ON 0000  
                      ltemp 007E                        start 0012                        ttemp 007E  
                      wtemp 007E                 _turnAlarmOn 04A0           ___bmul@multiplier 002A  
                     ??_ISR 0020            blinkLed@almState 0028                       ?_main 0071  
             __CFG_WDTE$OFF 0000             __end_of___awmod 056B     checkAlarmState@theAlarm 002B  
                     _PORTB 0006                       _PORTC 0007                       _TRISA 0085  
                     _TRISB 0086                       _TRISC 0087                       u75_25 053A  
                     u77_25 054B                       u78_25 0554                _adc_init_CH0 042A  
              ?_init_sensor 0071                       main@i 0034                       pclath 000A  
                     ltemp0 007E                       ltemp1 0082                       ltemp2 0086  
                     ltemp3 0080                       ttemp0 007E                       ttemp1 0081  
                     ttemp2 0084                       ttemp3 0087                       ttemp4 007F  
                     status 0003                       wtemp0 007E                       wtemp1 0080  
                     wtemp2 0082                       wtemp3 0084                       wtemp4 0086  
                     wtemp5 0088                       wtemp6 007F            blinkLed@stateOne 002B  
          blinkLed@stateTwo 0027             __initialization 07EA                __end_of_main 06FF  
  __end_of_checkSensorState 07EA                      ??_main 002F                      _ADRESH 001E  
                    _ADRESL 009E                      i1l1200 0553                      i1l1204 055E  
                    i1l1220 0570                      i1l1230 0591                      i1l1208 0566  
                    i1l1224 0572                      i1l1232 059F                      i1l1250 05CF  
                    i1l1260 05F3                      i1l1244 05C0                      i1l1228 058C  
                    i1l1182 052A                      i1l1246 05C2                      i1l1238 05B7  
                    i1l1264 05FA                      i1l1248 05C9                      i1l1194 0537  
                    i1l1186 0531                      i1l1266 0600                      i1l1258 05ED  
                    i1l1196 0545                      i1l1268 0601            ?_checkTankStatus 0071  
                    _TMR0IE 005D                      _TMR0IF 005A                      _TMR1IE 0460  
                    _TMR1IF 0060                      _TMR2IE 0461                      _TMR2IF 0061  
  checkAlarmState@theSensor 002E            __end_of_blinkLed 0520              __CFG_PWRTE$OFF 0000  
                    ___bmul 0436                   ??___awmod 0075                ?_timer0_init 0071  
              ?_timer1_init 0071                ?_timer2_init 0071                ?_timer1_stop 0071  
           ___awmod@divisor 0071             ___awmod@counter 0076                      saved_w 007E  
   __end_of__initialization 07FC          __size_of_adc_start 000A         ___bmul@multiplicand 0027  
            __pcstackCOMMON 0071              _OPTION_REGbits 0081        __size_of_init_sensor 0018  
                __pbssBANK0 0035                ?_turnAlarmOn 0071                  __pmaintext 062D  
        blinkLed@blinkState 0029                     ?___bmul 0027                  _blinkState 007D  
                __pintentry 0004           __end_of_adc_start 0420                   ?_blinkLed 0027  
           ISR@blinkCounter 0078                  __stringtab 0015      __size_ofi1_timer1_stop 0008  
  __size_of_checkAlarmState 0029             __size_of___bmul 0013                     ___awmod 0520  
      __size_of_timer0_init 0009           ?_checkSensorState 0071        __size_of_timer1_init 0006  
                   __ptext1 040D                     __ptext2 0404                     __ptext3 03E5  
                   __ptext4 03E1                     __ptext5 03FB                     __ptext6 045F  
                   __ptext7 0449                     __ptext8 06FF                     __ptext9 0477  
      __size_of_timer2_init 0009               ?_timer0_start 0071        __size_of_timer1_stop 0008  
             ?_timer1_start 0071               ?_timer2_start 0071           _FILTERTMR_TO_FULL 001D  
              __size_of_ISR 00C2                   _T1CONbits 0010                   _T2CONbits 0012  
        ??_checkSensorState 0027            ___awmod@dividend 0073                  ??_blinkLed 002A  
      end_of_initialization 07FC   __end_of_FILTERTMR_TO_FULL 001F               i1_timer1_stop 03EB  
            ??_timer0_start 0027              ??_timer1_start 0027              ??_timer2_start 0027  
              ISR@adcResult 0035    __size_of_checkTankStatus 0016        __size_of_turnAlarmOn 003C  
            __end_of___bmul 0449              ?i1_timer1_stop 0071  __end_of_FILTERTMR_TO_EMPTY 001D  
       turnAlarmOn@theAlarm 0028           ??_checkAlarmState 002C         start_initialization 07EA  
               __end_of_ISR 062D                    ??___bmul 0028    checkTankStatus@theSensor 0028  
             ?_adc_init_CH0 0071               ??_init_sensor 0027                 __pbssCOMMON 0078  
                 ___latbits 0002               __pcstackBANK0 0020                   _adc_start 0416  
         __size_of_blinkLed 0044                _levelSensors 0037        __end_of_timer0_start 03E5  
      __end_of_timer1_start 042A        __end_of_timer2_start 0416             ??i1_timer1_stop 0071  
                  ?___awmod 0071                   __pstrings 0015           ??_checkTankStatus 0027  
            ??_adc_init_CH0 0027                  ?_adc_start 0071         __end_of_init_sensor 0477  
 __size_of_checkSensorState 00EB           interrupt_function 0004                    _PIE1bits 008C  
             ??_timer0_init 0027               ??_timer1_init 0027               ??_timer2_init 0027  
             ??_timer1_stop 0027                  _ADCON0bits 001F                 __stringbase 001A  
                _ADCON1bits 009F                   main@i_139 0032             _checkAlarmState 0477  
          __size_of___awmod 004B          __end_of__stringtab 001B         __end_of_timer0_init 0404  
       __end_of_timer1_init 03EB         __end_of_timer2_init 040D         __end_of_timer1_stop 03FB  
               _init_sensor 045F                    _blinkLed 04DC                    __ptext10 04A0  
                  __ptext11 0420                    __ptext12 0416                    __ptext13 03F3  
                  __ptext14 04DC                    __ptext15 042A                    __ptext16 0436  
                  __ptext17 056B                    __ptext18 03EB                    __ptext19 0520  
     __size_of_timer0_start 0004                 ??_adc_start 0027       __size_of_timer1_start 000A  
     __size_of_timer2_start 0009          _FILTERTMR_TO_EMPTY 001B               __size_of_main 00D2  
                  _theAlarm 007A        __end_of_adc_init_CH0 0436               ??_turnAlarmOn 0027  
 checkSensorState@theSensor 002C                _timer0_start 03E1                _timer1_start 0420  
              _timer2_start 040D                  _INTCONbits 000B                    intlevel1 0000  
          _checkSensorState 06FF     __end_of_checkAlarmState 04A0   init_sensor@theSensor_init 0028  
           _checkTankStatus 0449                   stringcode 0015                 _timer0_init 03FB  
               _timer1_init 03E5                 _timer2_init 0404                 _timer1_stop 03F3  
       __end_of_turnAlarmOn 04DC                    stringdir 0015                    stringtab 0015  
